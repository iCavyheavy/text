ВСТУП
 Інформаційні технології активно і успішно проникають в усі сфери діяльності людини. Інтелектуальні системи  є складовою частиною інформатики, але при цьому значно розширює її можливості, дозволяючи вирішувати погано формалізовані завдання.
Основні проблеми інтелектуальних систем - пошук і представлення знань, розробка теоретичних уявлень і створення для ЕОМ відповідних програм найбільш проблемного характеру.
Якщо предметом інформатики є обробка інформації, то до області інтелектуальних систем  слід відносити тільки ті випадки обробки інформації, які не можуть бути виконані за допомогою простих, точних алгоритмічних методів і коли число методів досить велике. Кажуть так, що предметом вивчення інтелектуальних систем є будь-яка інтелектуальна діяльність людини, що підкоряється заздалегідь невідомим законам. Іноді об'єктом дослідження інтелектуальних систем  називають "все те, що ще не зроблено в інформатиці".
Інформатика часто розглядається як основа для моделювання та / або як інструмент для безпосередньої перевірки гіпотез. Інформатика та інтелектуальні системи тісно зв’язані  з лінгвістикою, психологією і логікою. Всі ці науки вивчають явища, що відносятьсяя до пізнання, розуміння, логічного виведення.   
Інтелектуальні системи -  це молодий науковий напрям, що зародився в 60-і роки ХХ століття. Завданням цієї науки є відтворення на основі ЕОМ розумних міркувань і дій. При цьому мають місце дві проблеми: людина, приймаючи рішення або виконуючи ту чи іншу дію, не знає точно алгоритм цієї дії, наприклад, як здійснюється розуміння тексту, доведення теореми, розробка плану дій та ін.; друге затруднення полягає в тому, що ЕОМ далека від людської компетентності.
 Під інтелектуальною системою розуміється об'єднана інформаційним процесом сукупність технічних засобів і програмного забезпечення, що працює у взаємозв'язку з людиною (колективом людей) або автономно, здатна на основі відомостей і знань при наявності мотивації синтезувати мету, приймати рішення до дії і знаходити раціональні способи досягнення мети.
 Інтелектуальна система  - це програмна система, що імітує на комп'ютері мислення людини. Для створення такої системи необхідно вивчати процес мислення людини,що вирішує певні завдання або приймає рішення в конкретній області, виділити основні кроки цього процесу і розробити програмні засоби, які відтворюють їх на комп'ютері. Отже, методи інтелектуальних систем припускають простий структурний підхід до розробки складних програмних систем прийняття рішень.
 Інтелектуальні системи - це системи, що будуються із застосуванням нової інформаційної технології обробки та використання знань.
Інтелектуальні системи - є науковим напрямком, завдання якого пов'язані з розробкою методів моделювання окремих функцій інтелекту людини за допомогою програмно-апаратних засобів ЕОМ. Слово «інтелект» вживається в різних сенсах і, хоча кожен з його інтрепретаторів має різну суб'єктну думку, що слід розуміти під людським інтелектом, можна стверджувати, що одним з головних його проявів є здатність адекватно реагувати на будь-яку, особливо нову, ситуацію шляхом коригування поведінки на основі наявного досвіду, однак реалізація цього за допомогою наявних стандартних обчислювальних методів проблематична або неможлива в принципі. Причина цього - властивий ЕОМ алгоритмічний, строго детермінований підхід до обробки інформації, часто обмежує її використання на рівні потужного калькулятора з багатими можливостями візуалізації інформації при вирішенні задач кількісного характеру.
 В останні роки в нашій країні і за кордоном істотно підвищився інтерес до дослідження прикладних інтелектуальних керуючих систем, їх розробці та впровадженню в промислових і непромислових сфери.
 Інтелектуальні системи останнім часом стали досить поширеним комерційним продуктом, який знаходить користуються широким попитом користувачів фахівців в найрізноманітніших областях інженерно-технічної та науково-технічної сфер діяльності. 
 Харчова галузь є перспективним напрямком впровадження інтелектуальних систем. В першу чергу це пов'язано з наявністю природного фактора, який породжує невизначеність і створює труднощі при формалізації процесів і явищ. Крім того, технологічні процеси (і відповідні процеси обробки інформації та керування), необхідні для перетворення сировини в кінцевий продукт, досить різноманітні.  
 У цих умовах для сучасного розвитку систем керування в харчовій галузі стає актуальною підготовка наукових кадрів, які володіють методами і засобами штучного інтелекту.    
 У конспекті представлені сучасні методи, моделі та структури інтелектуальних систем, показані області їх застосування.   Особливу увагу приділено відшукання можливості самоорганізації різних методів, що складається в тому, що в міру  функціонування в інтелектуальних системах накопичуються нові відомості про їхню роботу, що дозволяє перейти до більш точних методів керування і що неможливо на початковому етапі через неповне знання впливів навколишнього середовища і власного стану системи.
Конспект підготовлено відповідно до навчальної програми дисципліни " Сучасні методи та моделі інтелектуальних систем керування". 
Мета дисципліни  –  є засвоєння  принципів та методів інженерії знань; отримання  поглиблених знань про методи і моделі опису, оцінки, оптимізації інтелектуальних процесів і інформаційних ресурсів у вигляді знань, а також засобів аналізу та виявлення закономірностей і знань в інформаційних потоках;  формування у здобувачів уявлень про завдання та принципи використання інтелектуальних технологій у системах автоматичного та автоматизованого керування; вивчення структур інтелектуальних систем різного призначення; формування уявлення про типи завдань, що виникають у області інтелектуального аналізу даних (Data Mining) і методах їх вирішення, які допоможуть здобувачам виявляти, формалізувати і успішно вирішувати практичні завдання аналізу даних, що виникають у процесі їх професійної діяльності; ознайомлення здобувачів з технологіями моделювання знань, сучасними інструментальними засобами створення інтелектуальних систем, методами розробки програмного та алгоритмічного забезпечення інтелектуальних систем керування, методами та засобами проектування і застосування інтелектуальних систем;     придбання здобувачами умінь і навичок при оцінці перспективи і можливості використання досягнень науково-технічного прогресу в галузі інтелектуальних автоматизованих інформаційних систем, сучасних тенденцій розвитку інформаційних технологій; формування знань про основні можливості систем штучного інтелекту - нейромережевих і нечітких систем керування і їх застосування у задачах контролю та керування технологічними об'єктами.
 
ІНФОРМАЦІЙНИЙ ОБСЯГ НАВЧАЛЬНОЇ ДИСЦИПЛІНИ
Дисципліна вивчається у 2-му  семестру обсягом 330 год. (11 кред.).
Передбачається виділення 2 змістових модулів:
Змістовий модуль 1. «Теоретичні основи інтелектуальних систем керування».
Тема 1. Основні поняття в області інтелектуальних систем керування. Предмет і завдання курсу. Актуальність створення інтелектуальних систем керування. Цілі і завдання інтелектуальних систем керування.. Основні вимоги щодо реалізації  інтелектуальних функцій при керуванні технологічними  об’єктами. Принципи побудови сучасних інтелектуальних систем керування. Визначення і термінологія з області інтелектуальних систем керування.   Сучасний стан розробок у області інтелектуальних систем керування. Спрямування зусиль розробників інтелектуальних систем керування та приклади розв'язання проблем. Стан і напрямки розвитку  інтелектуальних систем керування у передових розвинутих країнах (США, Європа, Японія). Основні проблеми при створенні інтелектуальних систем керування  в     Україні.
Тема 2.  Особливості інтелектуалізації складних систем.   Технологічні  комплекси харчових виробництв як складні організаційно-технічні системи. Міри важливості об'єктів в складних системах.   Приклади введення заходів важливості об'єктів в складних системах.  Обчислювальні алгоритми отримання інформаційних ваг і оцінки їх складності. Деякі застосування мір важливості ознак. Критерії оцінки інтелектуальності систем керування. Характеристика інтелектуальних функцій керування складними технологічними об’єктами.
Тема 3. Види і рівні знань в інтелектуальних системах керування . Знання і дані. Факти і правила. Принципи організації знань. Вимоги, що пред'являються до систем подання та обробки знань. Види невизначеності опису завдання. Нечіткі знання. Нечіткі множини. Нечіткі відносини. Лінгвістична та нечітка змінна Формалізми, засновані на класичній і математичній логіках. Сучасні логіки. Фрейми. Семантичні мережі і графи. Знання, засновані на прецедентах. Метазнання. Придбання і формалізація знань. Поповнення знань. Узагальнення і класифікація знань. Логічний висновок і умовивід на знаннях. Проблеми і перспективи представлення знань.
Тема 4. Напрямки розвитку інтелектуальних систем. Еволюція інформаційних систем. Етапи розвитку та основні напрямки інтелектуальних систем. Загальна характеристика та особливості нейробіологічного та кібернетичного (інформаційного) напрямків розвитку інтелектуальних систем. Особливості реалізації гібридних інтелектуальних систем.
Тема 5. Типи інтелектуальних систем  та їх функціональні структури. Загальна концептуальна структура інтелектуальних систем. Основні компоненти інтелектуальних систем, їх призначення та характеристики. Експертні системи. Системи інтелектуальної підтримки прийняття рішень. Типові структури інтелектуальних систем керування. Нечіткі регулятори.
Тема 6. Нейронні мережі у розв’язанні задач керування. Елементи, архітектура, процес навчання і перенавчання нейронних мереж.   Класифікація нейронних мереж. Способи реалізації штучних нейронних мереж. Мережі прямої передачі: з запізненням, каскадна. RBF NN - радіальні нейронні мережі. Мережі Хопфілда, Кохонена. Процес підготовки даних для навчання нейронних мереж.  Алгоритм настроювання нейронної мережі.
Тема 7.  Нечітка логіка в системах керування. Робота з нечіткістю. Нечіткі множини як способи формалізації нечіткості. Способи формування нечітких множин. Основні операції над нечіткими множинами. Системи, засновані на нечіткій логіці.  Лінгвістична апроксимація технологічних змінних. Методи побудови функції належності. Процедура нечіткого логічного висновку для систем з нечіткими правилами. Використання коефіцієнта впевненості при проектуванні інтелектуальних систем з нечіткою логікою. Правила нечіткого логічного висновку: Мамдані, Сугено, Цукамото, Ларсена. Методи дефазифікації результатів  нечіткого виведення.  
Тема 8. Основні функції інтелектуальних систем керування складними об’єктами. Проблемна ситуація в поведінці складного об’єкта керування як передумова застосування інтелектуальних механізмів.   Характеристика процесів оперативного мислення при виникненні та усуненні проблемних ситуацій. Модель мислення оператора: індуктивні та дедуктивні складові.  Етапи та фази прийняття рішень при керуванні складними об’єктами із застосуванням інтелектуальних систем.
Тема 9. Прийняття рішень в інтелектуальних системах керування. Представлення процесу прийняття рішень. Стратегія управління. Організація пошуку рішень  за зразками. Процес конструювання дерева рішень Пошук рішень  на дереві варіантів способами  “в глибину ” та  “в ширину”. Евристичні методи пошуку рішень. Аналіз альтернатив в задач пошуку, вибору та синтезу рішень. Пошук рішень в інтелектуальних системах підтримки прийняття рішень на основі темпоральних моделей, м'яких обчислень, аналогій і прецедентів.
Тема 10. Задачі планування в  інтелектуальних системах керування. Планування в інтелектуальних системах.  Класифікація планування. Класичне планування. Планування і здійснення дій в реальному часі. Методи вирішення завдань планування: редукції, ключових станів і ключових операторів, аналізу засобів і цілей. Планування за допомогою логічного висновку. 
 Змістовий модуль 2. «Методи та моделі  в організації інтелектуальних систем керування».
Тема 11. Моделі та бази знань і даних в інтелектуальних системах керування. Інформативність опису предметної області. Диференціально-модельна концепція в систематиці бази  знань для інтелектуальних систем. Склад і організація даних і знань в інтелектуальних системах керування. Технології для створення  бази знань. Представлення бази знань в сучасних інтелектуальних системах.  Моделі подання знань в інтелектуальних системах керування. 
 Тема 12. Методи вилучення знань. Психологічний, лінгвістичний та гносеологічний аспекти здобуття знань. Пасивні та активні (індивідуальні і групові) комунікативні методи отримання знань.  Характеристика текстологічних методів видобування знань. Методи обробки експертної інформації. Методи структуризації знань:ієрархічний та об’єктно-структурний підходи.
Тема 13. Формальні логічні моделі представлення знань. Обчислення висловлювань. Кон'юнктивна і диз'юнктивна нормальні форми.   Інтерпретація логіки висловлювань  Обчислення предикатів першого порядку.   Опис алфавіту логіки предикатів.  Синтаксис логіки предикатів. Семантика логіки предикатів. Особливості застосування модальної і темпоральної логіки в моделях знань.
Тема 14. Продукційні моделі представлення знань. Представлення продукційних систем. Механізми винятків та повернень. Інтерпретатор продукційної системи. Правила прямого та зворотнього виведення. Ефективність пошуку рішень в продукційних системах.  Механізм розв'язання конфліктів.   
Тема 15. Представлення знань з використання семантичних мереж.  Екстенсіональні і інтенсіональні семантичні мережі. Типи відношень в семантичних мережах. Використання сценаріїв як моделей знань в інтелектуальних системах керування.
Тема 16. Фреймові моделі задання знань. Структури фреймів.Фрейми-зразки і фрейми-екземпляри. Фрейми-ролі, фрейми-сценарії, фрейми-ситуації в інтелектуальних системах керування.  Апарат логічного висновку фреймової моделі. Обробка знань в інтелектуальних системах  з фреймовим поданням.
Тема 17. Онтологія як форма представлення знань в інтелектуальних інформаційних системах. Спадний, висхідний та змішаний стилі розробки онтологій. Методи та засоби створення онтологій предметниз областей.
Тема 18. Генетичні алгоритми і еволюційне програмування. Еволюційне моделювання та методи самоорганізації в інтелектуальних системах. Генетичний алгоритм. Структура і компоненти. Репродукція: селекція, кросовер, мутація, інверсія. Робота генетичного алгоритму. Застосовування генетичних алгоритмів.
Тема 19. Інтелектуальний аналіз даних. Основні поняття Data Mining, перспективи, проблеми Data mining.  Методи і стадії інтелектуального аналізу даних.   Класифікація та кластеризація.   Прогнозування і візуалізація. Алгоритми пошуку асоціативних правил.  Впровадження інтелектуального аналізу даних.
Тема 20. Багатоагентні технології в інтелектуальних системах. Парадигми багатоагентних систем. Основні властивості програмного агента.  Засоби розробки мультиагентних систем. Багатоагентні технології в системах мережноцентричного керування організаційно-технологічними комплексами.






















Тема 1. Основні поняття в області інтелектуальних систем керування.
Класичні методи і підходи до вирішення управлінських завдань, розвинені в теорії дослідження операцій і прийняття рішень, теорії автоматичного регулювання, теорії оптимального управління та, навіть, теорії адаптивних, інваріантних, робастних і систем настійно вимагають свого вдосконалення і розвитку з урахуванням наявних, об'єктивних і суб'єктивних проявів на практиці факторів невизначеності. Це обумовлено, перш за все, тим, що на процес управління практично будь-якої реальної системою вже фізично, а не віртуально впливають різного роду, взагалі кажучи, невизначені або не цілком певні, фактори впливу середовища, які повинні адекватно відображатися і враховуватися в математичних моделях і формалізації задач синтезу управління, процедурах вибору і прийняття рішень. Такі фактори визначаються особливостями взаємодії елементів складної автоматизованої системи «Система - Особа, яка приймає рішення - Середовище, що визначає обстановку прийняття рішення і функціонування системи».
Штучний інтелект є науковим напрямком, завдання якого пов'язані з розробкою методів моделювання окремих функцій інтелекту людини за допомогою програмно-апаратних засобів ЕОМ. Слово «інтелект» вживається в різних сенсах і, хоча кожен з його власників має різну суб'єктивну думку, що слід розуміти під людським інтелектом, можна стверджувати, що одним з головних його проявів є здатність адекватно реагувати на будь-яку, особливо нову, ситуацію шляхом коригування поведінки на основі наявного досвіду. Однак реалізація цього за допомогою наявних стандартних обчислювальних методів проблематична або неможлива в принципі. Причина цього - властивий ЕОМ алгоритмічний, строго детермінований підхід до обробки інформації, часто обмежує її використання на рівні потужного калькулятора з багатими можливостями візуалізації інформації при вирішенні задач кількісного характеру.
Системи, засновані на знаннях.Другий напрямок в інформаційному підході до штучного інтелекту утворює його фундамент, саме тут створюється теорія даного наукового напрямку, вирішуються основні проблеми, пов'язані з центральним об'єктом вивчення штучного інтелекту - знаннями.
Будь-яка предметна область діяльності може бути описана у вигляді деякої сукупності відомостей про структуру цієї області, основних її характеристиках, процесах, що протікають в ній, а також про способи вирішення завдань , що виникають в ній, всі ці відомості утворюють знання про предметну область. При використанні інтелектуальних систем для вирішення завдань в даній предметній області необхідно створити її концептуальну модель.
Джерелами знань можуть бути документи, статті, книги, фотографії, кінозйомка і багато іншого. З цих джерел треба витягти містяться в них знання, цей процесс може виявитися досить важким, бо треба заздалегідь оцінити важливість і потребу тих чи інших знань для роботи інтелектуальної системи. Фахівці, які займаються усіма питаннями, пов'язаними зі знаннями, тепер називаються інженерами по знаннях або інженерами знань. Ця нова професія породжена розвитком штучного інтелекту.
Значна частина професійного досвіду залишається поза цими джерел, в головах у професіоналів, які не можуть словесно їх висловити. Такі знання часто називають професійним умінням або інтуїцією. Для того, щоб придбати такі знання, потрібні спеціальні прийоми і методи. Вони використовуються в інструментальних системах по придбанню знань. Отримані від експертів знання потрібно оцінити з точки зору їх відповідності раніше накопичених знань і формалізувати їх для введення в пам'ять інтелектуальної системи. Крім того, знання, отримані від різних експертів, треба ще узгодити між собою. Нерідкі випадки, коли ці знання виявляються зовні несумісними і навіть суперечливими. Інженер по знаннях повинен шляхом опитування експертів усунути ці протиріччя.
Дані, інформація, знання
Існує невизначеність змісту "різночитання" термінів: "дані", "інформація", "знання". Ми вважаємо за доцільне оп-рідшали їх наступним чином.
Дані являють собою інформацію, що розглядається в чисто синтаксичному аспекті, тобто безвідносно до її змісту і використання, тобто семантиці і телеології (зазвичай на будь-якому носії або в каналі передачі).
Інформація - це дані, проінтерпретовані з використанням тезауруса, тобто осмислені дані, що розглядаються в єдності синтаксичного і семантичного аспектів.
Знання, є система інформації, що забезпечує збільшення ймовірності досягнення будь-якої мети, тобто по суті знання - це "Ноу-хау" або технології.
Вищесказане резюмуємо в такій формі:
знання = інформація + мета
інформація = дані + сенс;
знання = дані + сенс + мета.
Штучний інтелект - це один з напрямків інформатики, мета якого розробка апаратно-програмних засобів, що дозволяють користувачеві-непрограмістів ставити і вирішувати свої завдання, що традиційно вважаються інтелектуальними, спілкуючись з ЕОМ на обмеженій підмножині природної мови.
Подання знань і розробка систем, заснованих на знаннях.Це основний напрямок штучного інтелекту. Воно пов'язане з розробкою моделей представлення знань, створенням баз знань, які становлять ядро експертних систем (ЕС). Останнім часом включає в себе моделі і методи добування та структурування знань і зливається з інженерією знань .
  	Основні визначення.Дані і знання. При вивченні інтелектуальних систем традиційно виникає питання - що ж таке знання і чим вони відрізняються від звичайних даних, десятиліттями оброблюваних ЕОМ. Можна запропонувати кілька робочих операцій, в рамках яких це стає очевидним. Дані - це окремі факти, що характеризують об'єкти, процеси і явища в предметній області, а також їх властивості.
При обробці на ЕОМ дані трансформуються, умовно проходячи наступні етапи:
• дані як результат вимірювань і спостережень;
• дані на матеріальних носіях інформації (таблиці, протоколи, довідники;
• моделі (структури) даних у вигляді діаграм, графіків, функцій;
• дані в комп'ютері на мові опису даних;
• бази даних на машинних носіях.
Знання пов'язані з даними, ґрунтуються на них, але представляють результат розумової діяльності людини, узагальнюють його досвід, отриманий в ході виконання будь-якої практичної діяльності. Вони виходять емпіричним шляхом.
Знання - це виявлені закономірності предметної області (принципи, зв'язки, закони), що дозволяють вирішувати завдання в цій галузі. При обробці на ЕОМ знання трансформуються аналогічно даними:
• знання в пам'яті людини як результат мислення;
• матеріальні носії знань (підручники, методичні посібники);
• поле знань - умовний опис основних об'єктів предметної області, їх атрибутів і закономірностей, їх зв'язують;
• знання, описані на мовах подання знань (продукційні мови, семантичні мережі, фрейми);
• бази знань.
Часто використовуються такі визначення знань:знання - це добре структуровані дані, або дані про дані, або метадані.
Існує безліч способів визначати поняття знань. Один з широко застосовуваних способів, заснований на ідеї інтенсіонал. Інтенсіонал поняття - це визначення через поняття більш високого рівня абстракції із зазначенням специфічних властивостей. Цей спосіб визначає знання. Інший спосіб визначає поняття через перерахування понять більш низького рівня ієрархії або фактів, що відносяться до визначеного. Це є визначення через дані, або екстенсіонал поняття.
В основі визначення знань лежать поняття семіотики - науки про знакові системи (штучних і природних мовах). У семіотиці розрізняють наступні розділи: синтактику, що має справу зі структурою (синтаксисом) знакових систем, семантику, яка розглядає сенс (інтерпретацію) знакових систем (іншими словами, відповідність знакової системи іншої знакової системі), прагматику, що має справу з цілеспрямованістю знакових систем.
Іншими словами синтактика відповідає на питання: як виглядає знання (як воно структуровано або як формалізовано), семантика відповідає на питання "що означає знання ", прагматика відповідає на питання" навіщо "або" чому "необхідно (або передається) знання. Таким чином, маючи справу з "знанням" необхідно вміти розрізняти його синтаксис, семантику і прагматику. Методи представлення знань розглядаються в основному як синтаксис (структура знань). Методи обробки знань в основному характеризують їх семантику. Прагматика знань в основному виражається в архітектурі інтелектуальної системи - особливості реалізації методів представлення та обробки знань, реалізації інтерфейсів системи з зовнішнім світом.
З точки зору глибини розрізняють екстенсіональності (конкретні, поповерхневі) і інтенсіональні (абстрактні, глибинні) знання. Екстенсиональні знання являють собою факти про об'єкти реального світу.
Прикладом їх є реляційна база даних, затвердження виду:
"Іванов має автомобіль";
"Відстань від Землі до Сонця 150 млрд. Км";
"Трикутник - є геометрична фігура".
Інтенсіональні знання являють собою правила, що зв'язують  факти, або закономірності реального світу. Прикладами їх є продукційна база знань ствердження виду:
"Людина може мати власність, наприклад, автомобіль";
"Планета, на якій може бути життя, повинна знаходитися від Сонця на відстані 100-300 млрд. км "; "Якщо геометрична фігура має три кути, то це трикутник".
Іноді поділ на екстенсіональності і інтенсіональні знання  залежить від рівня абстрагування. Наприклад, при необхідності  оперувати з правилами типу "якщо ... то" як з фактами, вони виступають в ролі екстенсиональних знань, а інтенсіональні знання, призначені для цього, зазвичай називають метазнанія. Прикладом метазнанія може бути стверждення "Якщо ми маємо справу з Евклідовій геометрією, то справедливим є твердження "Сума кутів трикутника орівнює 180 градусів ".
За використовуваним методам представлення знання поділяються на декларативні і процедурні.
Декларативні знання містять опис об'єктів і відносин між ними. Їх інтерпретація або обробка здійснюється програмами. кажуть, що при декларативному поданні семантичні і синтаксичні знання відокремлені один від одного, що надає цій формі уявлення велику порівняно з іншими універсальність і спільність.
Процедурні знання містять у явному вигляді опис процедур, тобто мають інтерпретацію. У цих процедурах можуть бути запрограмовані  дії, пов'язані зі зміною предметної області та її моделі в базі знань. При цьому поточний стан представляється у вигляді набору спеціалізованих процедур, що обробляють певну ділянку бази знань. Це дозволяє відмовитися від зберігання описів всіх можливих станів предметної області, необхідних для роботи системи ШІ, і обмежується зберіганням вихідного стану і процедур, що забезпечують перетворення моделі предметної області, тобто породження всіх інших станів з вихідного.  
Поділ методів подання знань на процедурні і декларативні є деякою мірою умовною. "Чисто" декларативні або процедурні знання практично не використовуються. Приклад чисто процедурного знання - програма, написана на алгоритмічній мові (але не об'єктно-орієнтованій). Приклад чисто декларативного знання - реляційна база даних.  
Під поняттям «інтелект» розуміють здатність розв’язувати складні задачі: здатність до навчання, узагальнень та аналогій; здатність взаємодії із зовнішнім світом шляхом спілкування, сприйняття та осмислення сприйнятого. Проте багато дослідників штучного інтелекту визнають тест штучного інтелекту, який був запропонований на початку 50-х років англійським математиком та спеціалістом з обчислювальної техніки Аланом Тюрінгом: «Комп’ютер можна вважати розумним, якщо він здатний примусити вас повірити, що ми маємо справу не з машиною, а з людиною».
Термін інтелект походить від латинського інтелектус, що означає – розум, здатність людей до мислення.
	Інтелектом називають здатність мозку людини розв´язувати задачі шляхом набуття, накопичення та цілеспрямованого перетворення знань в процесі навчання, що грунтується на досвіді та адаптації людини до різноманітних обставин.














Рис.1.1. Концептуальна схема використання знань

Знання  являють собою модель, що носить образний характер і в процесі діяльності мають змогу змінюватися за рахунок використання засобів (механізмів) адаптації та навчання.
	Штучний інтелект- сукупність автоматичних методів та програмно-технічних засобів цілеспрямованої переробки інформації відповідно до набутого в процесі навчання і адаптації досвіду при розв´язанні будь-яких задач проблемного характеру.
		Штучний інтелект(ШІ) (artifical intelligence) – це галузь наукових досліджень розумової поведінки та її штучного моделювання.
		Завдання штучного інтелекту – навчитися розуміти принципи та механізми інтелектуальної діяльності. Практичною метою є створення методів та техніки, необхідної для програмування розумності та її передачі обчислювальним машинам, а через них різноманітним системам та засобам.
		Технологія знань (knowledge engeneering) – це інженерні методи та навички в галузі штучного інтелекту.
		Технологія знань безпосередньо застосовується при вирішуванні складних проблем, спрямованих на збільшення продуктивності та якості розумової праці, на удосконалення професійних навичок працівника. Продуктом технології знань є активні знання і навички роботи із знаннями, які відрізняються від пасивних знань тим, що їх використання (в оптимальному варіанті) не передбачає читання та засвоєння всіх знань, необхідних для вирішення проблеми.
Штучний інтелект – це один з напрямків в інформаційних технологіях, метою якого є розробка апаратних та програмних засобів, які дозволяють користувачу ставити та вирішувати задачі творчого та неформального характеру, спілкуючись з ЕОМ на обмеженій природній мові. Ключ до розв’язання задач за допомогою штучного інтелекту полягає у скороченні перебору варіантів при пошуку розв’язку. Для цього програми мають  реалізовувати ті ж принципи, якими у процесі мислення користується людина.
Під інтелектуальною системою (ІС) в практичному плані розуміють, як правило, комп'ютерну програму, здатну "думати" і розв’язути так звані "творчі задачі".
Інтелектом (від латин. "intellectus" - "пізнання") називають здатність міркувати, діяти цілеспрямовано, правильно реагувати на ситуацію. Відповідно, інтелектуальними є  задачі, для рішення яких немає чітко заданого алгоритму, що завжди приводить до потрібного результату, а інтелектуальною діяльністю — процес розв’язування інтелектуальних задач.
Інтелектуальним задачам властиві неповнота, неточність і суперечливість знань про предметну галузь, а також велика розмірність простору рішень, що не дозволяє розв'язувати їх простим перебором. У таких задачах часто немає чітких критеріїв для вибору оптимального рішення, а сама задача не завжди цілком формалізується. Прикладом інтелектуальної задачі є розпізнавання образів, тобто визначення належності об'єкта, що спостерігається, до однієї із заздалегідь визначених категорій. Основні властивості інтелектуальних задач:
•   символьне подання даних;
•   відсутність строгої постановки задачі;
• відсутність прийнятного для практичного використання алгоритму  рішення;
•   неповнота, неточність і суперечливість знань про предметну галузь;
•   відсутність чітких критеріїв вибору оптимального рішення;
•   велика розмірність простору рішень.
1нтелектуальна діяльність - це дії людей, що приводять до отримання бажаного результату в ситуаціях, коли алгоритм вирішення проблеми відсутній. Іншими словами, це процес одержання бажаного результату в інтелектуальних задачах. Людина володіє певним набором знань про навколишній світ, які дозволяють їй орієнтуватися в різних ситуаціях і приймати правильні рішення. Крім того, людина вміє використовувати ці знання.
У зв'язку з цим потрібно розглянути термін "алгоритм". Поняття алгоритму є базовим для всіх галузей комп'ютерного програмування. Термін "алгоритм" ("algorithm") подається у виданні словника Webster’s New World Dictionary, що вийшов у 1957 р., правда, дещо в іншому звучанні " algorism " - стародавнє слово, що позначає "виконання арифметичних операцій за допомогою арабських цифр" і походить від імені автора знаменитого перського підручника з математики IX сторіччя Мухамеда аль-Хорезмі.
Алгоритм - це метод, якому властиві такі ознаки:
•   скінченність - закінчення роботи за скінченну кількість кроків;
•  визначеністъ - дії, що потрібно виконати, строго і однозначно визначені для всіх можливих ситуацій;
•  наявність   вхідних   даних  -  дані,   з   яких   починається   робота алгоритму;
•  наявністъ результуючих даних - дані, що формуються внаслідок виконання алгоритму;
•  ефективність - здатність алгоритму перетворювати вхідні дані в результат. Можна визначити такі основні параметри алгоритму: 
•   сукупність можливих вхідних даних;
•   сукупність можливих результуючих даних;
•   сукупність можливих проміжних даних;
•   правило початку;
•   правило безпосереднього перетворення;
•   правило закінчення;
•   правило отримання результату.
Знаходження алгоритмів є основною метою людини при розв'язку різноманітних класів задач. Відшукання алгоритму для задач певного типу пов'язано зі складними міркуваннями, що вимагають участі інтелекту людини. Доказом еквівалентності різних класів алгоритмів займалися такі вчені, як Пост, Тюринг, Марков, Колмогоров. Процес вирішення задач, для яких знайдені відповідні алгоритми, не потребує інтелектуальних зусиль і тому його може здійснювати об'єкт (людина або комп'ютер), здатний виконувати елементарні операції, з яких складається алгоритм.
Квазиалгоритми. Автоматизована інтелектуальна система - програмна реалізація конкретного алгоритму. Інтелектуальна система - реалізація алгоритму, який не існує або нам невідомий. На перший погляд, маємо протиріччя. Проте це не так. Можна запрограмувати не безпосередньо сам алгоритм, а засоби, за допомогою яких інтелектуальна система  автономно за прикладами навчиться цьому алгоритму (зокрема, цей прийом часто застосовують при розробці програмних агентів та нейромереж). Якщо ж алгоритм розв’язання задачі є надто складним, то можна реалізувати його спрощений варіант, який дозволяє отримати рішення з точністю, задовільною для практичного застосування.
Узагальненням поняття алгоритму є квазиалгоритм. На відміну від алгоритму інструкції квазиалгоритму можуть бути не зовсім чіткими, тому результат квазиалгоритму не може бути гарантованим.
Можлива також ситуація, коли алгоритм розв’язання  задачі взагалі відсутній. У цьому випадку його можуть замінити запропоновані користувачем метазнання у вигляді набору евристик, які дозволяють знайти прийнятне (хоча, можливо, не оптимальне) рішення для певної підмножини вхідних даних. Цей шлях найближчий до способу прийняття рішень, який звичайно застосовує людина за відсутності чітких знань і досвіду розв’язання схожих задач для виконання будь-яких дій, що призводять до зміни ситуації.
Для реалізації штучного інтелекту  у такій системі необхідно попередньо вивчити, як мислять люди, коли їм потрібно прийняти будь-яке рішення або вирішити відповідну проблему. Слід виділити у такому процесі основ¬ні стадії, що дозволить потім розробити комп'ютерну програму, здатну розв'язувати різноманітні задачі, використовуючи ті ж стадії процесу мислення. Штучний інтелект, таким чином, забезпечує, щонайменше в принципі, простий структурний підхід до розробки досить складних проблем, що дозволяють розв'язувати творчі задачі різного рівня.
Штучний інтелект імітує основний людський процес навчання, за яким відбувається прийом інформації для подальшого використання. Людський мозок здатний сприймати все нові та нові знання без зміни процесів життєдіяльності і без функціональних порушень різних відділів головного мозку. Система штучного інтелекту діє майже у такий спосіб.
Системна модель інтелекту.Інтелект – надсистема по відношенню до будь-якої абстрактної логічної чи математичної структури і не може бути зведений до неї.
Мозок мислить не формулами, а формалізує результат своєї діяльності, до якого він приходить індивідуальним шляхом завдяки моделюванню реальних ситуацій, які він сприймає у вигляді певних образів.
Розглянемо системну модель інтелектуальної діяльності, яка складається з таких компонентів:
1)	відображення середовища;
2)	ідеалізація;
3)	абстрагування;
4)	взаємодія образів;
5)	конкретизація образів.
Відображення середовища: органи сприйняття людей влаштовані однаково, але сприйняття різне і відображення середовища індивідуальне.
Ідеалізація полягає в стисненні інформації, узагальненні головних ознак та формулюванні понять.
Абстрагування передбачає подальше стиснення інформації, скорочення числа ознак образу і формування категорій.
Конкретизація – зворотній процес наділення понять чи категорій новими ознаками, формування конкретного образу внаслідок взаємодії образів, які знаходяться в середині моделі.
Системна модель інтелекту має декілька рівнів:













Рис 1.2. Концептуальна схема інтелекту
А – інтелектуальна підсистема;
1 – підсвідомість;
2 – свідомість;
3 – надсвідомість;
4 – колективна підсвідомість;
5 – колективна свідомість;
6 – колективна надсвідомість;
7 – рецептори;
8 – зворотні сигнали;
9 – символічні (вербальні) сигнали.
 Підсвідомість завдяки рецепторним підсистемам зв’язана з середовищем: у підсвідомість поступають первинні сигнали і в ній створюється первинне відображення середовища, формуються рефлекторні та стереотипні форми поведінки, які вдосконалюються в процесі взаємодії з середовищем та практичної діяльності. Мова підсвідомості образна (іконічна). Інтелектуальність підсвідомості полягає в комбінуванні моделей, у встановленні причинного зв’язку між ними на основі досвіду. Підсвідомість функціонує дуже швидко, відповідаючи реальному розвитку подій навіть в екстремальній обстановці. Підсвідомість враховує досвід у вигляді апріорних (дослідних) моделей. За допомогою комбінування цих моделей підсвідомість створює можливі форми поведінки, але не здатна вийти за межі досвіду.
Свідомість отримує інформацію про середовище та систему через підсвідомість у вигляді підсвідомих образів. Свідомість – спільне, доступне іншим особистостям знання, продукт спільної діяльності. Свідомість оперує природною мовою, яка “стискує” вхідну інформацію, що дозволяє відобразити мільйони образів тисячами слів. Основна категорія природної мови – поняття. За допомогою понять будуються семантичні (змістовні) моделі ситуацій і формується вербальна інформація у вигляді слів і речень. Елементами природної мови є також спеціальні мови. Поняття утворюється шляхом суспільної угоди, а природня мова служить комунікаційним засобом. Свідомість використовує семантичні правила (зміст) при тісному зв’язку з підсвідомістю. В цьому випадку формування моделі поведінки проходить на основі використання абстрагованих, але перевірених досвідом ситуацій. Наявність таких моделей в свідомості дозволяє будувати асоціацію, розвивати теорію, тобто будувати нові закони поведінки середовища чи окремої людини для ситуацій та умов, які не спостерігались раніше. Оперуючи узагальненими моделями, свідомість здатна охопити і врахувати головні реакції середовища, виявити результати і уточнити дії.
Надсвідомість. Мова надсвідомості – символьні образи, в яких відображується як природна, так і підсвідома мова. Високий рівень узагальненості забезпечує цінне сприйняття ситуації та проблеми. Багатогранність таких моделей в надсвідомості дозволяє виявити їх невідповідність та протиріччя. Надсвідомість є областю творчості. В ній на основі розрізнених факторів створюються об’єднані нові системи, але безпосередньо перевірку відповідності істини надсвідомість здійснити не може. Контроль за істинністю покладається на свідомість.
Колективна підсвідомість. Інтегральний інтелект груп, що утворюються при спільній діяльності, яскраво проявляється в ситуаціях, коли не вистачає часу для спілкування на природній мові. В таких умовах свідомість людини не встигає перероблювати інформацію і спільна поведінка формується за допомогою механізму використання зв’язків. Кожний індивід сприймає частину ситуації. Взаємодопомога організується на рівні конкретних дій рефлекторного типу. Загальна ситуація охоплюється тільки спільно, пристосування до неї організовано спонтанно за допомогою груп стереотипів та взаємного доповнення функцій.
Колективна свідомість. В цьому випадку використовуються колективні моделі дійсності. Вхідною інформацією є моделі свідомості окремих індивидів. Мова колективної свідомості природня. Самоорганізація колективу полягає у розвитку типізації та розповсюдження суспільних моделей діяльністю. Обмін інформацією між індивідумами породжує динамізм функціонування загальних моделей. Практична діяльність є засобом формування нової інформації, яка використовується колективом для побудови нових форм моделей. Значна частина цих моделей створюється окремими людьми, а вже потім освоюється колективом. Інша частина моделей виникає в процесі свідомої колективної роботи і є продуктом інтеграції.
Колективна надсвідомість. Це творча сила суспільства, вона формує узагальнені моделі сприйняття дійсності та розвитку. Вона формує ідеї та тенденції, породжує системи та сили, що визначають та направляють колективний розвиток.
Вимоги до інтелектуальних систем. Сьогодні ясно, що у комп'ютерів може бути неелектронна основа, і що їх функції далеко виходять за межі власне проведення обчислень. Тому більш правильним, на нашу  думку, було б таке визначення комп'ютера: "Комп'ютер – це засіб праці для обробки інформації (тобто засіб праці 5-го функціонального рівня)".  Саме поняття: "Обробка інформації" також еволюціонує. Це відбувається за рахунок зміни його змісту, який поступово змінюється і сьогодні включає не тільки  виконання операцій із вже наявною інформацією, але також і дуже важливі операцій пошуку інформації і забезпечення віддаленого доступу до інформації, зокрема із застосуванням засобів глобальних комп'ютерних комунікацій (наприклад, Internet). Причому роль ефективного пошуку і швидкого доступу до інформації все більше і більше зростає. Очевидно, що цінність і ефективність використання інформації визначається перш за все можливістю її знайти і отримати до неї якісний доступ. Операції по обробці вже наявної інформації також стають все більш розвинутими: вони включають вже не тільки найпростіші арифметичні операції, але і операції з  базами даних (пошук, вибірка, відбір, фільтрація, сортування), статистичні розрахунки, числові методи, імітаційне моделювання, методи розпізнавання образів і прийняття рішень, теорії ігор, експертні системи, нейронні сітки, генетичні алгоритми, когнітивне моделювання і ін. Розвиток автоматизованих технологій обробки інформації йде по дорозі все більш глибокої переробки "інформаційної сировини", внаслідок чого "інформаційний продукт" все більшою мірою відрізняється від початкового стану інформації. Якщо на перших етапах ця переробка полягала в основному в сортуванні і виконанні арифметичних операцій, то в подальшому вона стає все більш і більш інтелектуальною. Альтернативою централізованому проектуванню і впровадженню програмних систем є ідеологія відкритих систем, при якій над розвитком системи одночасно і незалежно один від одного працює дуже багато розробників, що не дотримуються якого-небудь одного плану, але за   деякими загальними правилами:
1. Адаптивні і самонавчальні системи настроюються на розв’язання тих або інших задач за рахунок врахування апріорної інформації і інформації, що поступає в систему в процесі її експлуатації. Можна вваажати, що подібні системи розвиваються на основі досвіду їх експлуатації і що засвоєння цього досвіду є один з технологічних етапів створення таких систем. 
2. Відкриті системи дуже великого масштабу, які не спроектовані якою-небудь однією групою розробників і розвиваються не по якому-небудь плану, а що саморозвиваються. Ці системи створюють як би інформаційне середовище загального доступу,  в розвиток якого можуть вносити свій внесок розробники і навіть користувачі, незалежно від свого місця знаходження.
При створенні систем штучного інтелекту розробники оперують такими основоположними поняттями, як:
– дані, інформація, знання;
– факт, значення, думка;
– моніторинг, аналіз і управління.
Від того, який конкретний зміст вкладається розробниками в дані поняття, найістотнішим чином залежать і підходи до створення математичних моделей, структур даних і алгоритмів функціонування інтелектуальних систем. Системи, що містять інформацію про систему в цілому в кожній своїй частині певного рівня структурної ієрархії, широко відомі, це:
– біологічні системи, в кожній клітці яких міститься повний геном;
– фрактальні системи;
– високоорганізовані системи із великою взаємною інформацією в своїх частинах, які успішно протистоюють закону зростання ентропії.
Факти розглядаються як причини і їх значення вважається відомим, якщо відомі наслідки даного факту. Таким чином, розуміння значення певних конкретних подій полягає у виявленні причинно-наслідкових взаємозв'язків між цими подіями і іншими.
 Створення інтелектуальних систем  повинне включати три етапи:
– створення матеріальної системи підтримки (ця проблема в основному вирішена, оскільки інтелектуальні системи  можуть створюватися навіть на базі сучасних персональних комп'ютерів);
– створення системи потенційного штучного інтелекту, тобто програмної оболонки, інструментальної системи (таких систем в даний час існує поки що дуже мало);
– навчання і самонавчання системи потенційного штучного інтелекту і перетворення її в реальну інтелектуальну систему. При розгляді самої ідеї реалізації природного інтелекту на іншій матеріальній основі відразу виникає питання про те, наскільки це взагалі у принципі можливо, тобто питання про те, чи можуть інтелектуальні функції бути реалізовані на основі іншої, ніж мозок, матеріальної структури. Це питання про співвідношення функцій і підтримуючих їх структур. Звичайно, структура залежить від функцій, які вона підтримує, і в цілому складніші функції підтримуються складнішими структурами. Проте цей зв'язок "структура – функція" неоднозначний, тобто одні і ті ж функції можуть підтримуватися найрізноманітнішими, тобто альтернативними структурами функцій і підтримуючих їх структур. При цьому звичайно функціональна універсальність досягається за рахунок певної структурної надмірності, що неминуче приводить до зменшення ефективності підтримки конкретних функцій, в порівнянні з їх спеціалізованою реалізацією. 
Існує певна ієрархія задач обробки даних, інформації і знань:
Моніторинг – накопичення даних за рядом  показників про об'єкт управління з прив'язкою до часу.
Аналіз – виявлення значення в даних, тобто виявлення в них причинно-наслідкових взаємозв'язків.
Прогнозування – використання значення причинно-наслідкової залежності в предметній області для прогнозу поведінки об'єкта управління в умовах дії певних факторів.
Управління –використання знань для досягнення певної мети управління:
– забезпечення стабільного функціонування об'єкта управління;
–переведення об'єкта управління в заздалегідь заданий цільовий стан. Таким чином, управління – це вища форма обробки і використання інформації.
Системи штучного інтелекту  реалізують все більше функцій,  що раніше  виконувалися виключно людиною, наприклад, таких як: отримання нових знань із фактів, виявлення причинно-наслідкових взаємозв'язків між факторами, діючими на об'єкт, і переходом цього об'єкту в ті або інші стани. В основі будь-якої математичної моделі, реалізованої в інтелектуальній системі, завжди лежить певне уявлення про те, яким чином здійснюються аналогічні процеси людиною. Тому для розробників інтелектуальних систем великий інтерес представляє уточнення смислового змісту і поглиблений аналіз таких базових понять, як дані – інформація – знання, факт –значення - думка, моніторинг – аналіз – управління. 
Існує багато різних підходів до класифікації інтелектуальних систем. Відмінності між цими класифікаціями визначаються тими критеріями, за якими проводиться класифікація, наприклад:
–за ступенню структурованості  задачі, що розв’язується;
– за функціями, що автоматизуються;
– за ступенню автоматизації функцій, що реалізуються;
– за сферою застосування і характером використання інформації, зокрема, по рівнях управління.
Відомо, що при навчанні людей існують різні рівні вивчення: відтворення (пам'ять); вирішення стандартних задач (уміння, навички); вирішення нестандартних, творчих задач (знання, активне інтелектуальне розуміння).  Інтелект може виявлятися в різних областях, але ми розглянемо його можливості у вирішенні  задач в предметних галузях, оскільки ця область використання є типовою для інтелекту. В цьому плані існують задачі стандартні і нестандартні. Для стандартних задач відомі алгоритми розв’язання. Для нестандартних задач вони невідомі. Тому розв’язання нестандартної задачі є проблемою. Саме поняття "стандартності" задачі відносно, відносна сама "невідомість": тобто алгоритм може бути відомий одним і невідомий іншим, або інформація про нього може бути недоступною в певний момент або період часу, і доступною – в інший. Тому для одних задача може бути стандартною, а для інших ні. Знаходження або розробка алгоритму вирішеня переводить задачу із розряду нестандартних в стандартні.
В математиці і кібернетиці задача вважається розв’язаною, якщо відомий алгоритм її вирішенння. Тоді процес її фактичного вирішення перетворюється на рутинну роботу, яку можуть в точності виконати людина, обчислювальна машина або робот. Розробка алгоритму розв’язання  задачі пов'язана з тонкими і складними міркуваннями, що вимагають винахідливості, досвіду, високої кваліфікації. Вважається, що ця робота є творчою, якщо вона не формалізується і вимагає участі людини із його "природним досвідом" і інтелектом. Інтелектуальними вважаються задачі, пов'язані з розробкою алгоритмів розв’язання  раніше невирішених задач певного типу. Існує ряд задач, таких, як розпізнавання образів, ідентифікація, прогнозування, прийняття рішень по управлінню, для яких розбиття процесу пошуку вирішення на окремі елементарні кроки, а значить і розробка алгоритму,  вельми скрутні. З цих міркувань витікає таке визначення інтелекту: інтелект є універсальним алгоритмом, здатним розробляти алгоритми розв’язання  конкретних задач. 
Виходячи з вищенаведеного, можна зробити висновок про те, що в нашому випадку найбільш вдалою є  класифікація інтелектуальних систем, яка  заснована на критерії, що дозволяє оцінити "ступінь інтелектуальності інтелектуальних систем", тобто за критерієм "ступіню структурованості задач, що розв’язуються". 


 


Рис 1.3. Класифікація інтелектуальних систем за критерієм  структурованості задач
Аналіз підходів до оцінки рівня інтелектуалъності інтелектуальних систем.
Інтелектуалізація інтелектуальних систем - це процес підвищення рівня інтелекту інтелектуальних систем . Пропонуємо наступне визначення. Нехай є дві інтелектуальні системи - А та В, здатні знаходити рішення RA(d) і RB(d)-відповідно в ситуаціях d з визначеної предметної галузі D. Система В отримана внаслідок інтелектуалізації А, В = Int(А), якщо:
•   система В завжди одержує рішення в ситуаціях, у яких його знаходить і система А, RA(d)=> RB(d);                         
•   існують ситуації, у яких А не знаходить рішення, а В - знаходить.
Від рівня інтелектуальності інтелектуальних систем  залежить, на скільки кроків система здатна прогнозувати свою поведінку і реакцію середовища на свої дії (приміром, гросмейстер може оцінити наслідки своїх рішень на багато ходів, а шахіст-початківець - у кращому випадку на 1-2 ходи). На рівень інтелектуальності системи впливають як здатність навчатися і самонавчатися, тобто використовувати наявні знання в нових заздалегідь невідомих ситуаціях, так і широта її програмного забезпечення. Поняття інтелектуалізації інтелектуальних систем  містить у собі такі аспекти, як підвищення "грамотності" інтелектуальних систем , наявність метазнань  і розширення способів одержання нових знань. Чим вище інтелектуальність інтелектуальних систем , тим ефективніше вона може досягати поставлену ціль.  Нові знання формуються шляхом застосування наявних знань - інформації про процеси рішення, логічне виведення, закономірності предметної галузі, тощо -до даних, з яких породжується нова інформація. Однак такі властивості, як «широта предметної галузі» і «нові знання», складно оцінити кількісно.
Висування гіпотез і узагальнення емпіричних фактів, як вид інтелектуальної діяльності людини, відіграє найважливішу роль у процесі пізнання і вважається однією з характерних властивостей людського розуму. Тому наявність в інтелектуальних систем  механізмів моделювання недедуктивних міркувань, зокрема індуктивного узагальнення, і ступінь "досконалості" цих механізмів природньо розглядати як один з показників інтелектуальності інформаційних систем. 3 формальної точки зору додання різних видів недедуктивного виведення в базі знань сприяє розширенню логічної формальної системи подання знань.
Рівень   інтелектуальності інтелектуальних систем   I(A)=s(s1,…,s9), i=  визначається наявністю в них таких властивостей:
•   S1 - автономність роботи;
•   S2 - взаємодія з іншими об'єктами;
•   S3 - сприймання інформації про навколишній світ;
•   S4- застосування абстракції;
•   S5- використання знання;
•   S6 - адаптивність поведінки;
•   S7 - здатність до навчання;
•   S8 - толерантність до помилок;
•   S9 - здатність до спілкування природною мовою.
Цей підхід дозволяє в деяких випадках порівнювати рівень інтелектуальності, призначених для вирішення задач у різних областях (якщо в системі А є всі властивості системи В, але в системі В є властивості, яких немає в системі А, тоді І(В) - рівень інтелектуальності системи В - вище, ніж у системи А).
 S(А)S,S(B) S,S(А) S(B)=>I(B)>I(А).
Проте значна частина інтелектуальних систем   при такому підході непорівняні: S(А)S,S(B) S, S(А) S(B), S(B) S(А)I(B) i I(А) непорівняні. Наприклад, складно порівняти рівень інтелектуальності інтелектуальних систем,  здатних до спілкування природною мовою, але не здатних до навчання (різноманітні чат-імітатори), і систем індуктивного виведення нових знань, що не підтримують природньомовний діалог. Пропонується кількісна оцінка рівня інтелектуальності
ІС  І(А) = , де   ,- вага і-ї властивості, а  - значення і-ї
властивості:
• S1 - використання моделі навколишнього світу для формування планів власних дій;
•   S2- наявність альтернативних варіантів при плануванні дій;
•  S3- здатність реконструювати план під час його виконання, якщо здійснювані дії призводять до небажаних наслідків;
•S4- використання власного досвіду для розширення і корекції моделі предметної галузі;
•  S5- спілкування з користувачем природньою мовою;
•  S6 - допустимість періоду виконання плану вирішення задачі.
Пропонується критерій оцінки рівня інтелектуальності інтелектуальних систем    I(A)=f(T,X,L,C,P,K), завдяки якому завжди виконується умова: при інтелектуалізації якої-небудь інтелектуальних систем    рівень  інтелектуальності має збільшитися (або хоча б не зменшитися).
Цей критерій використовує набір параметрів, значення яких користувач системи здатний сам оцінити кількісно (хоча б дуже приблизно)  
f(T,X,L,C,P,K),A,B,B=Int(a)
 f(T(A),X(A),L(A),C(A),P(A),K(A))=,	      
<= f(T(B),X(B),L(B),C(B),P(B),K(B)),
•   Т - тип атомарних елементів;
•   X - кількість атомарних елементів;
•   L -  кількість зв'язків між ними;
•   С - кількість команд у нормалізованому алгоритмі;
•  Р - співвідношення кількості успішних експериментів з кількістю проведених;
•   К - клас задач, які розв'язує інтелектуальна система.
Складність структури даних, які здатна обробляти інтелектуальна система, характеризують тип атомарних елементів Т, їхню кількість X і кількість зв'язків між ними L. Складність методів перетворення даних характеризує кількість команд у нормалізованому алгоритмі С. Очевидно, що користувач не може точно оцінити ці параметри, але може дати їм приблизну якісну оцінку.
Імовірність того, що дії ІС приводять до мети, яку вона декларує, оцінюється як співвідношення кількості успішних експериментів з кількістю проведених Р. Цей параметр користувач звичайно може оцінити досить точно.
І(А) = f(Т,Х, L,С,Р,К) = g(Т,Х, L)*h(С)*Р*(К).                               
               Для  простоти  оцінки  в якості g(Т,Х, L) ми  використовуємо  g (Т,Х, L) = g 1(т)* g 2(Х, L),   де   функція   g,(Т)    і   g 2(Х, L)   задаються таблично. Таким чином,
І(А) = g 1(Т)* g 2(Х, L) )*h(С)*Р*(К).	             
Введемо шкалу інтервалів для значень параметрів: "дуже мало", "мало", "середньо", "багато", "дуже багато". Їх обробка базується на теорії нечітких множин, тобто мультиплікація двох нечітких значень визначається як добуток їхніх відносних ваг, а об'єднання - як їхня сума.  h(С) і (К) також задаються таблично.  Якщо ІС обробляє дані різних типів, то g,(Т1,..,Тп)= .       
Контрольні питання.
1. Які етапи  розвитку інформаційних систем? 
2. Що таке знання?
3. Що таке інтелектуальна система?
4. Які є рівні представлення знань?
5. Чим визначається концептуальна схема інтелекту?
6. Класифікація інтелектуальних систем.
 7. Які напрямки розвитку інтелектуальних систем?
 8. Які вимоги до інтелектуальних систем  ?
 
Тема 2.  Особливості інтелектуалізації складних систем.
 
Управління біотехнологічними процесами харчових виробництв, які є складними об’єктами з нелінійними характеристиками і функціонують в умовах суттєвих невизначеностей та складних процесів взаємодії із зовнішнім середовищем, повинно базуватись на двох основних положеннях:
-	всебічне вивчення особливостей цих процесів (математичне моделювання, розкриття складних механізмів процесів, пошук ефективних способів інтенсифікації і оптимізації режимів і інш.; 
-	створення систем автоматизованого управління для визначення та підтримання оптимальних технологічних режимів з урахуванням існуючих ресурсів та обмежень технологічного характеру. 
Традиційні системи управління, засновані на формуванні і інтенсивних змінюваннях матеріальних та енергетичних потоків, не враховують природи біотехнологічних комплексів (БТК) і потребують значних ресурсів, в першу чергу енергоносіїв. Біотехнологічні процеси харчових виробництв мають суттєві особливості, які дозволяють виділити їх в один клас об’єктів.
 Ефективні методи та системи автоматизації БТК дають можливість в різних галузях харчової промисловості забезпечити отримання продукції високої якості при суттєвому зменшенні витрат на її виробництво. Отримання нових наукових результатів пов’язано з використанням методів сучасної теорії управління: теорії самоорганізації та катастроф; методів синергетики та адаптивних систем; теорії нелінійних динамічних систем; методології сценарного підходу до побудови систем управління; теорії та практики інтелектуальних систем; методів синтезу структур комп’ютерно-інтегрованих систем управління і інш.
В основі системних досліджень прикладних біотехнологій, як правило, лежать класифікаційні схеми технологій, їх ознак, розділення виробництв за рівнями ієрархій, оцінка системних показників. В той же час відомо, що науковий підхід до дослідження такого складного об’єкта, яким є харчова технологія, повинен базуватись на визначенні станів цього об’єкта у фазовому просторі, опису цих станів у динаміці, прогнозу цієї динаміки і на їх основі – організацію управляючих дій. Особливого значення набуває така методологія тоді, коли об’єкт досліджень (біотехнологічні процеси) має стохастичний або нечіткий характер, має складну поведінку, включаючи хаотичний характер. За думкою багатьох вчених на інтенсифікацію та вдосконалення технологічних процесів в харчовій промисловості в найближчому майбутньому буде значно впливати біотехнологія.
 Перспективне широке застосування досягнень біотехнологій в харчовому виробництві перш за все зв’язане  з виключною селективністю та швидкістю біохімічних перетворень із зберіганням харчових та біоактивних речовин у продуктах. Найбільші об’єми використання біотехнологічних методів у виробництві продукції підвищеної харчової та біологічної цінності приходяться на такі процеси – це приготування чистих чи комплексних ферментних препаратів, обробка ними харчової сировини, напівфабрикатів та продукції і наступна інактивація ферментів в продуктах. Це вирощування чистих та змішаних культур мікроорганізмів, бактеріальних заквасок, розводок дріжджів, обробка ними харчової сировини, продукції та наступна стерилізація мікроорганізмів в продукті. Технологічною метою при цьому є: гідроліз харчових речовин, зброджування цукро- та лактозовмістних продуктів, біосинтез білків, амінокислот, етанолу, харчових карбонових кислот, біологічно активних та інших харчових речовин. Сюди відносяться також біотехнологічні процеси  модифікації з метою збагачення продуктів вітамінами, нейтралізація чи видалення шкідливих речовин, оптимізація впливу продуктів метаболізму, стабілізація  показників технологічної та екологічної якості сировини та готової продукції, структурних та функціональних властивостей гетерогенних харчових систем. 
Розглянемо особливості біотехнологічних процесів з точки зору системного підходу. Вивчення технологій, закономірностей їх формування та розвитку базується на знанні сутності технологічного процесу, його структури та основних шляхах розвитку. При системному підході, як правило, використовуються два види аналізу: структурний та функціональний. Структурний аналіз доречний в тому випадку, коли об’єкт дослідження має складну структуру при відносно невеликих складностях та різнорідності складових елементів. Доцільно при цьому виділити групи подібних за характеристиками елементів і аналізувати найбільш типові характеристики кожної із груп. Функціональний аналіз рекомендується в тому випадку, коли число елементів об’єкта дослідження є незначним, але вони самі є складними за своїми параметрами та взаємозв’язками. Тоді доцільно виділяти групи подібних функцій і слідкувати за їх реалізацією, незважаючи на їх належність до тієї чи іншої частини об’єкта досліджень.
Структурний аналіз технологічних систем показує, що переходи від одного життєвого циклу до іншого відбувається часто, і цей процес протікає хвилеподібно.   Вважається, що біотехнологія є частиною бази п’ятої технологічної хвилі, початок якої вже покладений. Метод структурного аналізу (декомпозиція складних систем на більш простіші елементи, перехід від структур систем до їх функцій) знаходить все більше застосування в харчовій промисловості. В основу структурного аналізу технологій в багатьох випадках покладений “принцип кадрування”, основу якого складає наступне: всі багатовиди об’єктів мають загальну, єдину для всіх сутність, так званий «стан», структури якого характеризують чотири компоненти: речовинний – відображує масу об’єкта та фазові стани речовини; енергетичний – відображує напруженість та види силових полів; інформаційний – відображує ступінь організованості (складності) внутрішніх структур об’єкта відносно оточуючого середовища; просторовий – відображує форму об’єктів та їх взаємне розміщення. Згідно із “принципом кадрування”, будь-яку технологічну операцію можна показати як структуру (систему), що складається з чотирьох взаємозв’язаних елементів: трансформований об’єкт чи сировина; засоби дій; засоби управління; новий об’єкт чи продукт.
 Аналіз роботи будь-якого технологічного апарата показує, що якість його функціонування залежить від взаємодії комплексу фізико-хімічних та біохімічних явищ, що протікають в ньому. Рівень складності апарата як системи визначається різноманіттям елементарних фізико-хімічних та біологічних ефектів, насиченістю взаємних зв’язків між ними, суміщеністю і взаємодією явищ різної природи в локальному об’ємі простору та у апараті в цілому.
При аналізі процесів, які протікають в окремих апаратах, всю сукупність явищ в них необхідно розділити на два рівня: мікрорівень (мікрокінетика процеса) і макрорівень (макрокінетика процеса). До факторів, що визначають мікрорівень стосовно біохімічного реактора, входить сукупність фізичних, хімічних і біохімічних явищ, які відбуваються на рівні окремих клітин. Аналіз процесів, які протікають в самих клітинах, оцінюється інтегрально як швидкість росту клітин, їх поділ, загибель тощо. До факторів, які визначають макрорівень, входять гідродинамічні, теплові, дифузійні ефекти великомасштабного характеру, структура яких, в значній мірі формується особливостями конструкції апарата, характером та способами підводу до нього зовнішньої енергії та ін. Оскільки провести чітку межу між двома рівнями явищ в апараті неможливо, виникає необхідність введення та врахування ефектів проміжного рівня.
Біотехнологічні процеси мають характерні ознаки складної біохімічної системи, яка в термінах абстрактної математичної теорії систем відноситься до класу причино-наслідкових систем. Для такого роду систем характерні багатоелементність; багатозв’язність; складна структура взаємозв’язків між елементами; сумісність в локальних просторових областях явищ різної природи – хімічної, фізичної, біологічної; ієрархічність побудови із значним числом рівнів ієрархій.
Стратегія аналізу такого роду систем являє собою складну багатоетапну процедуру, яка в термінах абстрактної математичної теорії систем відноситься до класу програмно-цільових систем прийняття рішень для досягнення визначених кінцевих цілей. Характерними ознаками таких систем є: наявність визначеної мети дослідження, постановка задачі по реалізації цієї мети і визначення критеріїв ефективності розв’язання  задачі; розробка плану досліджень з вказівкою основних етапів та напрямків у розв’язанні задач; послідовне просування по всьому комплексу взаємозв’язаних етапів та можливих напрямків (сценарний підхід).
Зважаючи на те, що біотехнологічні процеси  є складними системами, тобто мають специфічні, унікальні особливості, проблема їх класифікації в повному об’ємі класифікаційних ознак є важкою задачею. Все ж таки можна виділити властиві для всіх біотехнологічних процесів деякі основні характерні ознаки; призначення, спосіб проведення, структури технологічних потоків та обладнання.
За призначенням (за цільовим продуктом) біотехнологічні процеси в харчовій промисловості розвиваються за двома основними напрямками: отримання біомаси мікроорганізмів (наприклад, отримання кормових дріжджів) та використання продуктів їх життєдіяльності (отримання етанолу, органічних кислот, очистка стічних вод). При переробці різними мікроорганізмами (дріжджі, бактерії) живильними речовинами (субстратами) відбувається синтез таких цінних продуктів (спирти, розчинники, органічні кислоти, пиво і т.п.). Деякі мікроорганізми в процесі своєї життєдіяльності утворюють так звані вторинні метаболіти, в складі яких можуть бути вітаміни та антибіотики, чи є продуцентами ферментів. За способом проведення технологій біотехнологічні процеси розділяють на неперервні та періодичні, відкриті (процес закінчується повним виведенням культурального середовища та основного продукту біологічного синтезу) чи закриті (здійснюється повна або часткова рециркуляція культурального середовища з метою більш повного використання живильних речовин). За структурами технологічних потоків та технологічного обладнання біотехнологічні процеси розділяють на гомогенні (концентрація компонентів однакова по всьому об’ємі реакторів) та гетерогенні (концентрація компонентів є неоднаковою в реакторі); одно- та багатоступінчатими; з послідовним чи паралельним з’єднанням   реакторів; з частковою чи повною рециркуляцією компонентів, чи її відсутністю; наявністю чи відсутністю   байпасних потоків, тощо. Таким чином, біотехнологічні процеси є складними біохімічними динамічними, нелінійними об’єктами керування, що вимагає розробки складних алгоритмів керування з урахуванням їх системних особливостей.                  
На протікання біотехнологічних процесів значний вплив створюють внутрішні та зовнішні фактори: концентрації компонентів живильного середовища та продуктів біосинтезу, рН та температура середовища, умови аерації та перемішування, передісторія процесу і т. п.. Серед факторів, що впливають та характеризують біотехнологічні процеси, виділяємо фактори першої (є можливість контролю) та другої груп (відсутність або недоцільність контролю). До першої групи відносимо температуру та рН середовищ, концентрацію розчиненого кисню, швидкість перемішування. Управляючими факторами можуть бути: швидкість подачі  підживильного розчину, швидкість розбавлення, концентрація субстрату. До другої групи відносяться такі фактори, як передісторія процесу, вікова структура популяції, змінювання генетичних властивостей культури і т. п.
	Важливе місце у вирішенні загальної проблеми підвищення ефективності біотехнологічних процесів складає автоматизація та оптимізація процесів, що досліджуються, бо лише біотехнологія, яка управляється, може вирішувати всі поставлені завдання. Незважаючи на можливість застосування сучасної обчислювальної техніки та створення в різних країнах світу численних та різноманітних біотехнологічних установок, проблема синтезу ефективного управління усе ще залишається невирішеною, чому перешкоджають в основному три причини:
- відсутність датчиків та засобів для виміру у реальному масштабі часу тих біологічних та фізико-хімічних параметрів, що необхідні для миттєвого розпізнання (визначення) стану біотехнологічного процесу;
- обмежені можливості інтерпретації отриманої інформації у такому вигляді, в якому можна було б цю інформацію у подальшому використовувати як основу для синтезу замкнутого управління процесом;
- відсутність ефективних методів ідентифікації та управління, придатних для роботи системи ЕОМ-біореактор в реальному масштабі часу.
Для БТК необхідно врахувати такі характеристики.
 Складність об’єкта (системи) управління, яка характеризується неможливістю з заданною точністю за заданий час виконати аналіз і прогноз змінювання стану системи. В данному випадку мова йде про неможливість забезпечення необхідної якості управління об’єктом  з необхідною точністю на обмеженому інтервалі часу.  Пропонується вважати систему складною, коли вона має 104 – 107 елементів, ультраскладною  – систему, яка має 107 – 1030 елементів, і суперсистемою – систему з 1030 – 10200  елементів. Але, запропонована шкала складності не відображає складність взаємних зв’язків між елементами; таким чином, системи, які мають однакову кількість елементів, але різну топологію, не піддаються порівнянню.  Складною системою називається система, у моделі якої недостатньо інформації для забезпечення досягнення цілі управління цією системою, тобто для забезпечення функціонування цієї системи потрібно отримання великого об’єму  інформації і побудови більш повної детальної моделі. В данному випадку також надзвичайно складно побудувати шкалу складності для  порівняння між собою різних варіантів побудови системи.   Враховуючи, що складність є невід’ємною характеристикою системи, що проектується, дане поняття має пряме відношення і до самого процессу проектування САУ. При цьому основною задачею процесу проектування є побудова системи, яка забезпечує необхідну якість (ефективність) процесів управління БТК при мінімальній складності проектного рішення. Дана обставина є надзвичайно важливою при проектуванні САУ  сучасних  БТК, які функціонують в умовах суттєвої апріорної і апостеріорної невизначеності.
Фактори невизначеності в значній мірі визначають складність процессу проектування і технічні рішення систем управління БТК. До основних факторів невизначеності зазвичай відносять:
-	неповноту проектної інформації про рабочі характеристики БТК, умови його функціонування, зовнішніх та внутрішніх збуреннях тощо. Особливо великий вплив цей фактор має на складність процессу проектування унікальних (нових) зразків БТК;
-	неточність математичних моделей БТК як об’єкта управління, і його підсистеми, похибка вимірювально-інформаційних систем, виконуючих механізмів, алгоритмів і методик розрахунку тощо.
-	нечіткість опису характеру ряду процесів, які протікають в БТК; внаслідок дефіциту доступної інформації про цілі і задачі функціонування БТК в умовах зміни ситуації управління і стану зовнішнього середовища, несприятливий вплив якого знижує вірогідність досягнення поставленої цілі управління;
-	 можливу некоректність вживання тих чи інших підходів 
(методів, методик) при проектуванні САУ БТК, збої, відмови апаратури тощо.
В даний час проблема проектування систем автоматичного керування динамічними об'єктами характеризується переходом від парадигми адаптивного управління до парадигми інтелектуального управління. Це викликано як безперервним ускладненням об'єктів управління і умов їх функціонування, появою нових класів обчислювальних засобів (розподілених обчислювальних систем), високопродуктивних каналів телекомунікації, так і різким підвищенням вимог до надійності та ефективності процесів управління в умовах істотної апріорної та апостеріорної невизначеності. Врахування перерахованих вище факторів є можливим тільки на основі переходу від "жорстких" алгоритмів параметричної та структурної адаптації до антропоморфного принципу формування управління, тобто інтелектуального управління, яке моделює судження оператора-технолога.
Інтелектуальне управління є міждисциплінарною предметною областю, в якій тісно переплітаються завдання і методи їх вирішення, розроблені в теорії дослідження операцій, сучасної теорії управління складними динамічними об'єктами і теорії штучного інтелекту, що обумовлюють внутрішню складність вирішення проблем у даній предметній галузі, тому в ній не тільки зберігаються проблеми наукових областей "донорів", але й з'являються нові невирішені проблеми, викликані синергетичним ефектом їх взаємодії.
Одним з перспективних напрямків в теорії інтелектуальних систем управління (ІСУ) динамічними об'єктами є розробка теоретико-інформаційного підходу до побудови цих систем на основі принципу IPDI (Increasing Precision with Decreasing Intelligence), запропонованого Дж. Сарідісом (США), суть якого полягає в декомпозиції цілей і завдань управління складним динамічним об'єктом в залежності від необхідної точності і інтелектуальності розробки управляючих впливів. При цьому, чим вище необхідна точність управління на ієрархічному рівні, тим нижче його рівень інтелектуальності, і навпаки, чим вище необхідний рівень інтелектуальності, тим нижче вимоги щодо точності вироблення управління.
Як відомо, опис поведінки динамічного об’єкта (ДО) в просторі стану може бути представлено у вигляді системи нелінійних диференціальних та алгебраїчних рівнянь:
			                                                           (2.1)
де   - вектор стану ДО;  - вектор вимірювальних координат (виходів) ДО;  - вектор управляючих дій (входів) ДО;   - вектор стану зовнішнього середовища.
	При цьому оператори F, H  системи (2.1) можуть мати різну форму представлення: аналітичні вирази, якісний опис (знання експертів), логіко-динамічні рівняння (гібрідні системи), у вигляді програмного коду, таблиць тощо.
	Табл. 2.1
Тип моделі ДО і рівень невизначеності                
Тип моделі ДО	Доступна інформація про поведінку ДО	Реалізація	Рівень невизначеності (недолік знань)
Детермінована
(Д-модель)	Повна інформація	Рівняння,
поелементна модель	Відсутній
Інтервальна
(І-модель)	Неповна інформація	Рівняння з інтервальними коефіцієнтами	Низький
Імовірнісна
(Ім-модель)	Статистична інформація про процеси (наявність великої виборки)
	Стохастичні рівняння	Середній
Нейромережева модель
(НН-модель)	Стататистична інформація (мала вибірка)	Нейромережеві моделі	Середній
Лінгвистична модель
(Л-модель)	Якісна інформація про поведінку ДО (мала вибірка)	Нечіткі моделі	Достатньо високий
Експертна модель
(Е-модель)	Знання експертів	База знань, машина логічного вивода	Високий
Об’єм доступної інформації у процесі управління ДО (2.1) визначає вибір класу проектованої САУ. В таблиці 2.1 представлені основні типи моделей ДО, які визначають міру повноти нашого знання про поведінку ДО, тобто відображають рівень існуючої невизначеності.
Основні поняття та визначення в інтелектуальних системах управління. Системи управління відносяться до відкритих систем, які інформаційно звязані з реальним зовнішнім світом, за рахунок чого створюється можливість здійснення обміну інформації із зовнішнім середовищем, забезпечується адаптація до зовнішнього середовища шляхом самоорганізації та самонавчання. Така можливість створюється в системах управління за рахунок використання інтелектуальних механізмів.
	Системи управління, що використовують інтелектуальні механізми називаються  багатоагентними системами.
	Під агентом розуміють деяку сутність, що знаходиться в певному середовищі,з якого вона отримує інформацію про події і формує відповідні дії на це середовище.
	В теорії багатоагентних систем основними проблемами є:
-	розробка архітектур самих агентів;
-	організація взаємодії між агентом і середовищем.
Загальна структура таких систем управління має такі блоки:
1). База знань (БЗ);
2). Механізм логічного виведенння на основі БЗ;
3). Інтелектуальний вирішувач, який формує постановку і загальний план розв’язання задачі управління;
4). Інтелектуальний планувальник, який формує конкретний план розв’язання  задачі управління;
5). Інтерфейс користувача (підсистема спілкування з системою користувача);
6). Система пояснень – може дати пояснення, чому саме прийняте таке рішення.
7). Система зв’язку з  об’єктом.
	Основною вимогою до інтелектуальних систем управління є їх можливість забезпечення реалізації прикладних функцій управління із швидкістю, з якою може приймати рішення досвідчений оператор. Такі системи управління називаються  активними системами.
	Архітектура інтелектуальних систем управління  характеризується ієрархічними структурами, що складаються з узагальнених рівнів, які впорядковані у відповідності з відповідним базовим принципом побудови інтелектуальних систем управління  – принцип IPDI, який сформульований у 1989р. й означає,  що по мірі просування від нищих до вищих рівнів системи управління підвищується інтелектуальність рівнів, але знижується їх точність.
	Точність – невизначеність при визначенні задач управління.
	За цієї концепцією призначається 3 обов’язкових базових рівнів:
1.	Організатор .
2.	Координатор.
3.	Виконавець.
Принципи організації інтелектуальних систем управління (ІСУ)
1.	Тісна взаємодія систем управління з реальним зовнішнім світом з використанням спеціально організованих інформаційних каналів зв’язку.
2.	Принципова відкритість системи з метою підвищення інтелектуальності і удосконалення власної поведінки.
3.	Наявність механізмів прогнозування змінювання зовнішнього світу та власної поведінки системи.
4.	Наявність в інтелектуальних систем управління  багатоієрархічної структури, побудованої у відповідності з правилами: підвищення інтелектуалізації та зниження вимог до точності по мірі підвищення рангу в ієрархії системи.
5.	Зберігання можливостей функціонування з деякою втратою якості чи ефективності з певною деградацією, з розривом звязків чи втратою управляючих дій від вищих рівнів ієрархії структури управління.
Перший принцип  - підкреслює безпосередній звязок інтелектуальних систем управління  із зовнішнім світом. Знаходячись у безпосередній взаємодії зі світом, інтелектуальна система  управління  отримує від нього всю необхідну інформацію для прийняття рішень та порівняння знань. Інтелектуальна система управління в свою чергу створює активну дію на зовнішній світ в результаті обробки знань.
У відповідності з другим принципом забезпечується наявність вищого рангу ієрархічної структури як:
-	самонастроювання;
-	самоорганізація;
-	самонавчання.
Система знань складається з двох частин:
Постійних перевірених знань, якими система користується постійно.
Тимчасових знань, в яких система не впевнена і з якими вона експериментує в процесі навчання.Знання другого типу чи відхиляються, чи уточняються, чи переходять в решті-решт в постійне значення.
Згідно із третім принципом  наявність механізмів прогнозування полягає в тому, що систему управління не можна вважати достатньою мірою інтелектуальною, якщо вона не може здійснювати прогнозування змін зовнішнього світу і власної поведінки в цьому світі. Система без прогнозування може не виявити критичну ситуацію, з якої вона не може знайти виходу, наприклад, через часові обмеження чи складності організації управляючих дій, що усувають цю кризову ситуацію.
Четвертий принцип дозволяє визначити шляхи побудови моделей в тих випадках, коли неточність знань про об’єкт управління і його поведінку можна скомпенсувати шляхом збільшення числа рівнів інтелектуальності, а також за рахунок використання вдосконалених механізмів прийняття рішень в умовах невизначенності.
П’ятий принцип (живучості)  встановлює  в інтелектуальній системі  управління  лише часткову втрату інтелектуальності, але не припинення функціонування системи при відмові в роботі вищих рівнів ієрархії системи.
Загальна концептуальна структура ІСУ
	Системи управління організовані у відповідності із сформульованими принципами в повному їх обємі називається – інтелектуальними системами в повному розумінні. Такі системи повинні мати багаторівневу ієрархічну структуру із наступними рівнями в порядку зниження в ранзі:
1. Рівень самоорганізації (самоперебудова системи за результатами навчання).
2.  Рівень навчання (створення нових знань).
3.  Рівень прогнозування подій.
4.	Рівень адаптації.
5.	Рівень формування рішень по управлінню
6.	Рівень роботи з базами подій та знань. Забезпечення необхідною інформацією.
7.	Рівень планування операцій по реалізації сформованих рішень.
8.	Виконавчий рівень.
Кожен з перелічених рівнів має свою функціональну специфіку й в реальній системі може складатися з декількох рівнів. Але при будь-якій структурі інтелектуальних систем управління  традиційні системи автоматичного управління знаходяться на нижніх рівнях, тобто підкреслюється симбіоз, який повинен бути в цих системах.
 Інтелектуальне управління є складною міждисциплінарною предметною областю, в якій тісно  переплітаються завдання і підходи, розроблені в теорії дослідження операцій, сучасної теорії управління БТК, теорії штучного інтелекту, що обусловлює внутрішню складність розв’язання проблем у даній предметній області. 	
  Виділяються наступні ознаки інтелектуального управління:
- неперервне уточнення можливості досягнення попередньо обраних термінальних умов, заданих в визначеній меті управління;
-  корекція критеріальної бази, що визначає вимоги до якості управління;
- перепланування програми руху, включаючи функції датчиків вхідних впливів і еталонного об'єкта;
- вибір способу регулювання і поточне безпосереднє управління об'єктом. 
Створення інтелектуальних систем  повинне включати три етапи:
– створення матеріальної системи підтримки (ця проблема в основному вирішена, оскільки інтелектуальні системи  можуть створюватися навіть на базі сучасних персональних комп'ютерів);
– створення системи потенційного штучного інтелекту, тобто програмної оболонки, інструментальної системи (таких систем в даний час існує поки що дуже мало);
– навчання і самонавчання системи потенційного штучного інтелекту і перетворення її в реальну інтелектуальну систему.
 При розгляді самої ідеї реалізації природного інтелекту на іншій матеріальній основі відразу виникає питання про те, наскільки це взагалі у принципі можливо, тобто питання про те, чи можуть інтелектуальні функції бути реалізовані на основі іншої, ніж мозок, матеріальної структури. Це питання про співвідношення функцій і підтримуючих їх структур. Звичайно, структура залежить від функцій, які вона підтримує, і в цілому складніші функції підтримуються складнішими структурами. Проте цей зв'язок "структура – функція" неоднозначний, тобто одні і ті ж функції можуть підтримуватися найрізноманітнішими, тобто альтернативними функціями і реалізуючими  їх структурами. При цьому, звичайно, функціональна універсальність досягається за рахунок певної структурної надмірності, що неминуче приводить до зменшення ефективності підтримки конкретних функцій, в порівнянні з їх спеціалізованою реалізацією. 
Існує певна ієрархія задач обробки даних, інформації і знань:
Моніторинг – накопичення даних за рядом  показників про об'єкт управління з прив'язкою до часу.
Аналіз – виявлення знань в даних, тобто виявлення в них причинно-наслідкових взаємозв'язків.
Прогнозування – використання значення причинно-наслідкової залежності в предметній області для прогнозу поведінки об'єкта управління в умовах дії певних факторів.
Управління –використання знань для досягнення певної мети управління:
– забезпечення стабільного функціонування об'єкта управління;
–переведення об'єкта управління в заздалегідь заданий цільовий стан. Таким чином, управління – це вища форма обробки і використання інформації.
Системи штучного інтелекту  реалізують все більше функцій,  що раніше  виконувалися виключно людиною, наприклад, таких як: отримання нових знань із фактів, виявлення причинно-наслідкових взаємозв'язків між факторами, діючими на об'єкт, і переходом цього об'єкта в ті або інші стани. В основі будь-якої моделі, реалізованої в інтелектуальній системі, завжди лежить певне уявлення про те, яким чином здійснюються аналогічні процеси людиною. Тому для розробників інтелектуальних систем великий інтерес представляє уточнення змісту і поглиблений аналіз таких базових понять, як дані – інформація – знання, факт –значення - думка, моніторинг – аналіз – управління. 
Контрольні питання.
1.	Які особливості біотехнологічних процесів з точки зору системного підходу?
2.	В чому полягає складність об’єкта (системи) управління?
3.	Наведіть фактори невизначеності, які в значній мірі визначають складність процессу проектування систем управління БТК.
4.	Що визначає принцип IPDI (Increasing Precision with Decreasing Intelligence)?
5.	Які існують основні типи моделей об’єктів управління, що відображають рівень існуючої невизначеності?
6.	Які ознаки інтелектуального управління?

Тема 3. Види і рівні знань в інтелектуальних системах керування

Ключовими поняттями інформатики були і залишаються поняття «модель», «алгоритм» і «програма». З появою в 60-х роках ХХ ст. нового наукового напрямку, званого штучним інтелектом, в науковий обіг увійшли і нові ключові поняття:«знання», «уявлення знань», «планування», «спілкування», «самонавчання» та інші. Нові програмні системи стають більш комунікабельними завдяки тому, що вони набули інтелектуальні властивості.
Будь-яка програмна система, створювана в рамках штучного інтелекту, завжди орієнтована на використання знань. Знання, виражені на природній мові, черпаються з книг, статей та інших джерел і в тому вигляді, в якому містяться в цих джерелах, не можуть бути використані для обробки на комп'ютері. Потрібно вибрати відповідний спосіб їх формалізації (подання) для отримання можливості обробки знань на обчислювальних машинах. Сама обробка знань на комп’ютері  полягає в отриманні за певними правилами виведення інших знань на основі наявних знань.
Первинними базовими поняттями штучного  інтелекту є поняття знання, подання знань і висновок.
Центральна проблема штучного інтелекту - це проблема подання знань в комп'ютері. Тут важливим є питання: «Що таке знання? ». Наступне питання:« Як представляти знання? »- виникає відразу, якщо ми збираємося використовувати їх із застосуванням комп'ютера.
Знання - це закономірності предметної/проблемної області (принципи, зв'язки, закони, правила), отримані в результаті практичної і теоретичної діяльності та професійного досвіду, які дозволяють фахівцям ставити і вирішувати завдання в даній області.
Предметна область - це спеціальним чином виділена і описана область людської діяльності. Проблемна область - це предметна область плюс суупність розв'язуваних в ній завдань.
Знаннями  в інтелектуальних системах прийнято називати збережену (в комп'ютері) інформацію, формалізовану відповідно до визначених структурних правил, яку комп'ютер може автономно використовувати при вирішенні проблем за такими алгоритмами, як логічні висновки. 
Знання можна розділити на факти (фактичні знання), правила (знання для прийняття рішень) і метазнання (знання про знання). Факти вказують зазвичай на добре відомі в даній галузі обставини. Правила дозволяють приймати рішення, наприклад, зіставлення фактів.   До метазнань відносять  знання про способи використання знань і знання про властивості знань. Метазнання необхідні для управління базою знань, логічним висновком, навчанням і т. п.
Для того, щоб маніпулювати всілякими знаннями про реальний світ за допомогою комп'ютера, необхідно спочатку представити їх у вигляді, придатному для використання на комп'ютері. Типовими моделями представлення знань є:
- Логічна модель, заснована на логіці предикатів першого порядку і виведенні висновків з допомогою силогізму;
- Продукційна система - це модель, заснована на використанні правил, тобто стверджень у формі «ЯКЩО ..., ТОДІ ...»; продукційні моделі бувають двох типів: з прямим і зворотним висновками;
- Фреймова система (frame (англ.) - рамка, каркас); кожен фрейм описує один об'єкт будь-якої предметної області, а конкретні властивості цього об'єкта описуються в слотах (компонентах фрейму); в кожному  фреймі є окремий слот, що містить процедуру, як реалізується  висновок за фреймами;
- Семантична мережа - це граф, вузли якого відповідають поняттям і об'єктам предметної області, а дуги (ребра) графа відповідають відносинам (взаємозв'язкам) між об'єктами; семантичні мережі легко представляються у вигляді фреймової системи.
Іноді окремо розглядають моделі представлення нечітких знань, тобто знань, про які не можна однозначно сказати, істинні вони чи хибні. Такі моделі засновані на використанні модифікацій продукційних систем або логічної моделі.
Нарешті, під висновком мається на увазі механізм отримання нових знань на основі наявних фактів і правил. Механізм виведення заснований на метазнаннях.
У поєднанні з сучасним рівнем розвитку елементної бази і засобів обчислювальної техніки вдається процедуру оброблення знань включити в контур створюваних систем, забезпечуючи  високу якість їх роботи в умовах неповноти, нечіткості і невизначеності  вхідної інформації.   Рішення проблеми подання знань спирається на дослідженнях в області комп'ютерної лінгвістики і в області комп'ютерної логіки. Комп'ютерна лінгвістика лежить в основі природно-мовного спілкування з комп'ютером і автоматичного перекладу, а комп'ютерна логіка служить для формалізації всього багатства людських міркувань.
 Сукупність основних питань, що виникають в прикладних областях, пов'язаних з   автоматизацією промислового виробництва, передбачає  необхідність створення різного роду технічних систем, які повинні мати високий ступінь автономності, адаптивності, надійності і якості функціонування в умовах невизначеності. При цьому головними джерелами проявів невизначеності в задачах управління є такі основні фактори:
- Складність формалізованого опису об'єкта і завдань управління з урахуванням похибок необхідних обчислень і  вимірювань;
- Нечіткість цілей функціонування і завдань управління;
- Нестаціонарність параметрів об'єкта і системи управління;
- Апріорна невизначеність обстановки і умов функціонування;
- Наявність випадкових впливів зовнішнього середовища;
- Спотворення  вхідної інформації в каналах дистанційної передачі даних.
Забезпечення необхідних експлуатаційних характеристик і широкого набору функціональних можливостей по формуванню доцільної поведінки та планування послідовності  виконуваних операцій з активною адаптацією до можливих дій зовнішнього середовища і варіацій її поточних станів обумовлює розробку засобів і методів інтелектуального управління, заснованих на комплексному застосуванні технологій обробки знань.  Поява принципово нового різновиду завдань управління, пов'язаних з підтриманням необхідних режимів функціонування складних динамічних об'єктів в умовах невизначеності, що відносяться до числа поганоформалізованих, вимагає розвитку специфічних методів їх вирішення з використанням технологій штучного інтелекту.
Стосовно до систем автоматичного управління ключовими стали такі теоретичні положення як:
- Принцип ситуаційного управління;
- Принцип ієрархічної побудови інтелектуальних систем;
- Принципи організації процедур логічного висновку на основі використання різних технологій обробки знань;
- Принципи організації процесів самонавчання;
- Принципи побудови інтелектуального людино-машинного інтерфейсу.
Практичне втілення цієї концепції передбачає  вибіркове використання тих чи інших технологій обробки знань в залежності від специфіки вирішуваних завдань, особливостей  об'єкта керування, його функціонального призначення, умов експлуатації і т.п.  Важливо відзначити, що до розряду інтелектуальних слід відносити ті інформаційні технології, які забезпечують можливість обробки знань. Найбільш перспективними для створення інтелектуальних систем управління представляються чотири технології: експертних систем, нечіткої логіки, нейронних мереж, асоціативної пам'яті,.
Так, головною відмітною особливістю технології експертних систем є можливість роботи з формами явного уявлення знань, включаючи продукційні правила, предикати, семантичні мережі і фреймові структури. Яскраво виражена структурованість цих форм обумовлює застосовність формалізованих логічних методів для аналізу і перетворення знань, а також виведення висновків за сукупністю вихідних даних. 
Нарешті, найважливіша проблема управління складними динамічними об'єктами пов'язана з формалізацією невизначеностей, численні джерела яких мають різну природу. В першу чергу до них слід віднести похибки обчислень і вимірювань, що призводить до можливості встановлення параметрів поточного стану об'єкта і його зовнішньої середовища тільки лише з деякою вірогідністю. З іншого сторони, умови автономного функціонування цілого ряду систем спеціального призначення характеризуються апріорною невизначеністю (або невідомістю) робочої обстановки, неподання ознак її змін, випадковістю зовнішніх збурень, що виникають в різних прикладних областях. Логіко-лінгвістичні моделі, отримані в результаті інтерпретації цих описів в термінах теорії нечітких множин, можуть служити конструктивною основою для розробки алгоритмів і систем інтелектуального управління складними динамічними об'єктами, що діють в умовах неповної інформації.   Моделі такого типу призначені для формалізації неточних, розмитих в змістовному плані суджень і будуються з використанням узагальнених категорій, що задають класифікацію вихідних понять на рівні нечітких множин. Формалізація поняття нечіткої множини заснована на використанні так званої функції належності. Ця спеціальна характеристична функція, що приймає значення в інтервалі [0, 1], відображає суб'єктивну оцінку ступеню належності окремих елементів базової шкали у відповідності нечіткій множині і при побудові функцій належності окремих термів задає необхідні, але недостатні умови коректного синтезу і настройки моделей нечіткого управління. Компенсація цього недоліку, як правило, здійснюється за рахунок залученням досвіду експертів для безпосереднього підбору відсутніх параметрів сформованих функцій належності за допомогою  різних евристик. Таким чином, використання методів нечіткої логіки  дозволяє формувати  і досліджувати нечіткі моделі складних об'єктів і процесів  різних типів і характеру.
Один з перспективних підходів до організації обробки неявних форм представлення знань пов'язаний із застосуванням технології нейрон-мережевих структур, що акумулює основні функціональні особливості біологічних прототипів. Ця технологія побудови інтелектуальних систем передбачає формування однорідних структур, що складаються з множини взаємодіючих і пов'язаних елементів із заданою характеристикою перетворення сигналів. Сукупність знань, які закладаються в процесі навчання такої структури, визначається настроюванням вагових коефіцієнтів міжелементних зв'язків і дозволяє забезпечити надійну класифікацію пропонованих прикладів. При цьому найважливішою перевагою нейрон-мережевих структур є висока швидкодія, що досягається за рахунок паралельності обробки інформації.
Пошуки альтернативних шляхів побудови швидкодіючих систем обробки знань привели до розвитку технології асоціативної пам'яті. Ця технологія передбачає використання механізмів відновлення цілісних образів по їх виділених елементах і зводиться до роботи з багатовимірними масивами пам'яті. Знання, у цьому випадку, мають неявну форму уявлення і задають класифікацію понять деякої предметної області у вигляді сполучення ознак, притаманних деяким якісним категоріям. Головні переваги такого підходу пов'язані з простотою як програмного, так і апаратного втілення асоціативної пам'яті, швидкодія якої залежить від обраного способу  звернення до окремого осередку  і за часом  реалізації може мати високі показники. У технічних системах пам'ять зазвичай розглядається як деякий пристрій, що характеризується  двома основними властивостями: здатністю певним чином запам'ятовувати інформацію і можливістю відновлювати її з заданою точністю. В інтелектуальних системах управління  одна з інформаційних технологій,  що базується, з одного боку, на механізмах асоціативного запису та відновлення інформації, що забезпечують доступ до даних  з високою швидкістю, а з іншого боку, на механізмах асоціаційної зв'язності, що дозволяють проводити класифікацію станів системи на якісному рівні і формувати управляючі впливи відповідно з поточним станом системи і заданому критерію якості, може бути досить ефективною.
Таким чином, практична реалізація концепції  систем інтелектуального управління на основі сучасних інтелектуальних технологій передбачає наявність розгорнутої бази знань про принципи побудови і мети функціонування системи, специфічне використання різних алгоритмів, про особливості об'єкта керування. У цьому випадку, класифікаційний аналіз наявних знань з урахуванням поточних показань вимірювально-інформаційних засобів повинен забезпечувати параметричну і структурну настройку керуючих алгоритмів, модифікацію програми досягнення  цілей управління, а при необхідності і їх корекцію.
Найважливішою проблемою розробки інтелектуальних систем, тобто систем заснованих на знаннях, є вибір моделей представлення знань. При цьому спосіб формального виразу знань про предметну область в комп'ютерній формі, що інтерпретується, називаємо представленням знань, а відповідні формалізми, що забезпечують указане представлення - моделями представлення знань.
Моделі представлення знань можна умовно розділити на два класи: декларативні і процедурні. В декларативних моделях знання представляються у вигляді описів об'єктів і відносин між об'єктами без вказівки в явному вигляді, як ці знання обробляти. Ці моделі передбачають відокремлення декларацій інформаційних структур від механізму виведення, що оперує цими структурами. В процедурних моделях знання представляються процедурами (алгоритмами), що описують інформаційні елементи і одночасно визначають способи їхньої обробки.
На практиці частіше всього використовується комбінація декларативних і процедурних моделей представлення знань. Найпоширенішими є такі моделі:
•	логічні моделі 
•	продукційні моделі 
•	сіткові моделі
•	фреймові моделі
Логічні моделі представлення знань засновані на формалізмі мов математичної логіки. Ці моделі створюються на основі логіки висловлювань та логіки предикатів. В цьому випадку знання про предметну область представляються у вигляді сукупності логічних формул. Методологічною основою логічних моделей (як і багатьох інших моделей представлення знань) є логіка першого порядку. Перевагою логічного представлення знань є наявність чіткого синтаксису і широко ухваленої формальної семантики, а також теоретично обґрунтованих процедур автоматичного виведення. Основним недоліком логічних моделей є неможливість отримання висновків в ситуаціях, коли потрібні правдоподібні висновки і результат виходить із певною оцінкою упевненості в його істинності. Такі моделі характеризуються монотонним характером висновків, що означає, що в базу знань добавляються тільки істинні ствердження, а це виключає можливість суперечностей. Таким чином, за допомогою логічних моделей дуже важко або взагалі неможливо реалізувати немонотонні міркування, які дуже часто зустрічаються в практиці. Для формалізації і представлення міркувань, неточних, нечітких знань, якими оперує людина, використовуються такі підходи, як байєсовська логіка, теорія Демпстера-Шефера і найпоширеніша нечітка логіка.
Використання природної мови зі всім набором наявних в ньому засобів для виразу людських міркувань і прийняття рішень за допомогою якісних уявлень, понять і оцінок, дозволяє всесторонньо описувати загальну смислову постановку задач прийняття рішень, що виникають в процесі функціонування підприємства. Ефективним засобом формалізації і представлення нечітких понять, категорій і знань, у тому числі лінгвістичних висловів є теорія нечіткої множини і заснована на ній нечітка логіка. Отримані в результаті інтерпретації цих описів в термінах нечітких множин логіко-лінгвістичні або нечіткі моделі є конструктивною основою для розробки методів і алгоритмів моделювання процесів в складних системах в умовах невизначеної і неповної інформації. Перевагою нечіткої логіки є можливість використання експертних знань про вирішувані проблеми або структуру об'єкта у вигляді лінгвістичних висловлювань, які представляються нечіткою базою правил: «якщо <входи>, тоді <вихід>».
Нечітка логіка ближче по духу до людського мислення і природних мов, ніж формальна двозначна логіка. Нечітка логіка забезпечує ефективні засоби відображення невизначеностей і неточностей реального світу. Наявність математичних засобів відображення нечіткості первинної інформації дозволяє побудувати модель, адекватну реальності.В якості базового теоретичного матеріалу розглянемо основні поняття теорії нечітких множин і нечіткої логіки. Теорія множин являє собою потужний інструмент математики. Однак у її основі лежить аксіома виключеного третього, стверджуюча, що елемент або належить множині або не належить, що часто робить цю теорію непридатною в реальних завданнях, у яких застосовуються нечіткі оцінки, такі як: «більший прибуток», «високий тиск», «помірна температура», «надійні інструменти», «безпечні умови» і т.п. На жаль, подібні висловлення не можуть бути адекватно формалізовані звичайними математичними методами.
Спроба розвитку формального апарата для залучення часткової належності в теорію множин була почата в середині 60-х років Заде. Він увів поняття нечіткої множини як збірки елементів, які можуть належати цій множині зі ступенем від 0 до 1. Причому 0 позначає абсолютну неналежність, а 1 - абсолютну належність множині. Це було зроблено шляхом застосування поняття функції належності, яке ставить у відповідність кожному елементу універсальної множини число з інтервалу [0,1], що позначає ступінь належності. Поняття функції належності є узагальненням поняття характеристичної функції чіткої множини, що оперує значеннями [0,1]. Тому основні властивості й операції над нечіткими множинами, уведені Заде і його численними послідовниками, є узагальненнями відповідних властивостей й операцій класичної теорії множин. З метою формалізації нечітких понять і відносин природної мови скористаємося визначенням нечіткої множини.
Нечіткою множиною А в деякому просторі Х, що позначається як  , називається множина пар
 ,                                                                                   (3.1)
де                                                                                             (3.2)
-	функція належності нечіткій множині А. Ця функція присвоює кожному елементу   степінь його належності до нечіткої множини А, при цьому вона може приймати наступні значення:
1)	  означає повну належність елемента х до нечіткої множини А, тобто  ;
2)	  означає відсутність належності елемента х до нечіткої множини А, тобто  ;
3)	  означає часткову належність елемента х до нечіткої множини А. 
В літературі застосовується символьний опис нечіткої множини. Якщо Х – це простір з певною кількістю елементів, тобто  , то нечітка множина   записується наступним чином:
                                                     (3.3)
Наведений запис має символьний характер. Знак «---» не означає ділення, а означає присвоєння конкретним елементам   степені належності  . Іншими словами, запис:
                                                                                             (3.4)
означає пару:
                                                                                        (3.5)
Якщо Х – це простір з безкінечно кількістю елементів, то нечітка множина   символічно записується у вигляді:
                                                                                                 (3.6)

 
Операції над нечіткими множинами. Над нечіткими множинами можна проводити ряд операцій, як операції на множинах, так і алгебраїчні.
Визначення 1:Перетином нечітких множин А, В Х  називається нечітка множина А В з функцією належності
                                   (3.7)
для кожного х Х.
Визначення 2:Сума нечітких множин А і В – нечітка множина   визначається функцією належності
                                     (3.8)
для кожного х Х.
Функція належності суми нечітких множин  ,  , …,   виражається залежністю
                    (3.9)
для кожного х Х.
Варто пам’ятати, що властивість випуклості нечітких множин зберігається для їх перетину, а властивість ввігнутості  - для їх суми, тобто:
1)	Якщо А і В – випуклі нечіткі множини, то  , випукла нечітка множина;
2)	Якщо А і В – випуклі нечіткі множини, то  , ввігнута нечітка множина.
Визначення 3:Будь-яку нечітку множину   можна представити у вигляді 
                                                                                            (3.10)
де   - відповідає нечіткій множині, елементам якого відповідають наступні степені належності:
                                                                       (3.11)
Визначення 4:Доповнення нечіткої множини визначається однаково:
                                                                                      (3.12).
Визначення 5:Концентрація нечіткої множини   позначається   і визначається наступним чином
                                                                               (3.13)
для кожного х Х.
Визначення 6:Розбавлення нечіткої множини   позначається   і визначається наступним чином
                                                                               (3.14)
для кожного х Х.
При графічному визначенні функцій належності об'єднаної множини необхідно в кожній точці множини вибрати максимальне значення з двох (точку того графіка, який вище) і об'єднати всі отримані точки в графік, який і буде відображенням нової функції належності. Перетин аналогічно об'єднанню, тільки вибирається мінімальне значення в кожній точці. При побудові доповнення необхідно дзеркально відобразити графік від осі, яка паралельна осі абсцис і проходить через точку 0,5 осі ординат.
Задача - приклад № 1.
Припустимо, що Х={1, 2, 3, 4, 5, 6, 7} та  
 
 
Розв’язання:
Відповідно до визначення 1 отримуємо:
 
Відповідно до визначення 2 отримуємо:
 

Задача-приклад № 2.
Дано 3 нечітких множини A, B, C (задані їх функції належності). Побудувати функцію належності нечіткої множини   і визначити ступінь належності одного елемента множині D, використовуючи метод обмежень.
 

Розв’язання:
Для побудови функції належності нової множини необхідно:
1)	Визначити послідовність виконання операцій у формулі
Для множини   послідовність операцій буде мати наступний вигляд:  
2)	Побудувати на окремих графіках проміжні множини, згідно певної послідовності дій. Звести проміжні множини на одному графіку і визначити підсумкову функцію належності.
 
3)	Використовуючи певний в задачі метод, визначити аналітично ступінь належності елемента, що входить до підсумкової множини.
Множина D складається з елементів з інтервалу (2,13). Виберемо елемент 8.
 
 
4)	Перевірити аналітичні обчислення по побудованому графіку функції належності.
 
 

 Функція належності являє собою імовірнісну оцінку, що показує наближене відтворення числового діапазону до лінгвістичного поняття: „мале”, „нижче норми”, „норма”, „вище норми”, „висока” тощо.
Лінгвістична змінна – це така змінна, яка задається на кількісній шкалі і приймає значення у вигляді слів та словосполучень природньої мови. Окреме значення лінгвістичної змінної або лінгвістичне значення називається термом і задається за допомогою функції належності, тобто кожному терму відповідає нечітка множина. Значення лінгвістичної змінної описується нечіткими змінними. Лінгвістичні змінні використовуються для якісного словесного опису кількісної величини. Будь – яка лінгвістична змінна та всі її значення зв’язані з конкретною кількісною шкалою. 
Вибір виду функцій належності та їх параметрів знаною мірою визначається досвідом, інтуїцією та іншими суб’єктивними факторами, в тому числі особою, яка приймає рішення – (ОПР). Існує ряд стандартних функцій належності для представлення нечітких чисел, їх перелік наведений в таблиці 3.1. 
Таблиця 3.1. Стандартні функції належності нечітких чисел
№	Опис	Аналітична формула	Вигляд функції належності
1	Трикутна функція належності	 
де  	 

2	Трапеціє-
видна
функція
належності	 
де  	 
3	Симетрична
гаусівська
функція
належності	
 	 


Основні етапи побудови систем інтелектуального управління на основі нечіткої логіки:
1.	Визначення входів і виходів системи, що створюється.
2.	Визначення для кожного входу і виходу функції належності.
3.	Розробка бази правил для нечіткої системи.
4.	Вибір і реалізація алгоритму нечіткого висновку.
5.	Аналіз результатів роботи системи, що створена.
Загальний логічний висновок виконується за наступною схемою (рис. 3.1).
 
Рис. 3.1. Загальна схема логічного висновку.
Розглянемо цю схему більш докладно.
Нечіткість (введення нечіткості, фаззіфікація).
Функції належності, що визначені для вхідних змінних, застосовуються до їх фактичних значень для визначення ступеня істинності кожної передумови кожного правила.
Логічний висновок.
Обчислене значення істинності для передумов кожного правила застосовується до висновків кожного правила. Це призводить до однієї нечіткої підмножини, яка буде призначена кожній змінній виводу для кожного правила. В якості правил логічного висновку зазвичай використовуються тільки операції min (мінімум) або prod (множення). У логічному висновку prod функція належності відсікається по висоті, що відповідає обчисленому ступеню істинності передумови правила (нечітка логіка "ТА"). У логічному висновку prod функція належності виведення масштабується за допомогою обчислень ступеня істинності передумови правила.
Композиція.
Нечіткі підмножини, що призначені для кожної змінної виводу (у всіх правилах) об’єднуються разом, щоб сформувати одну нечітку підмножину для кожної змінної виводу. При подібному об’єднанні зазвичай використовується max (максимум) або sum (сума). При композиції max комбінований висновок нечіткої підмножини будується як поточковий максимум по всім нечіткім підмножинам (нечітка логіка "АБО"). При композиції sum комбінований висновок нечіткої підмножини будується як поточкова сума за всіма нечіткими підмножинами, призначеними змінними виводу правилами логічного висновку.
Приведення до чіткості (дефазифікація).
Це додатковий етап, який корисно використовувати, коли необхідно перетворити нечіткий набір висновків у чітке число.
Розглянемо алгоритми реалізації схеми логічного висновку, що наведена на рис. 3.1.
Алгоритм Мамдані (Mamdani). Даний алгоритм математично може бути описаний наступним чином:
1.	Нечіткість: знаходяться ступені істинності для передумов кожного правила: A1(x0), A2(x0), B1(y0), B2(y0).
2.	Нечіткий висновок: знаходяться рівні «відсікання» для передумов кожного з правил (з використанням операції min):
 
3.	де через «Λ», як і раніше, позначена операція логічного мінімуму (min), потім знаходяться відсічені функції належності:
 
4.	Композиція: з використанням операції max (що позначається як «V») виконується об'єднання знайдених усічених функцій, що приводить до одержання підсумкової нечіткої підмножини для змінної виходу з функцією приналежності:
 
5.	Нарешті, приведення до чіткості (для знаходження z0) проводиться, наприклад, центроїдним методом (як центр ваги для кривої μΣ(z)):
 
Алгоритм Сугено (Sugeno). Сугено (Sugeno) і Такагі (Takagi) використали набір правил в наступній формі (як і раніше, приводимо приклад двох правил):
П1: якщо x є A1 та y є B1 , тоді z1=a1x+b1y,
П2: якщо x є A2 та y є B2 , тоді z2=a2x+b2y.
Представлення алгоритму:
1.	Перший етап – як в алгоритмі Мамдані.
2.	На другому етапі знаходяться  та індивідуальні виходи правил:
 
3.	На третьому етапі визначається чітке значення змінної виводу:
 
Наведене представлення відноситься до алгоритму Сугено 1-го порядку.
Якщо правила записані в формі:
П1: якщо x є A1 та y є B1 , тоді z1=с1,
П2: якщо x є A2 та y є B2 , тоді z2=с2,
то говорять, що заданий алгоритм Сугено 0-го порядку.
Методи приведення до чіткості. Вище вже був розглянутий один з даних методів – центроїдний (centroidofarea). Наведемо відповідні формули ще раз:
для неперервного варіанту:
 
для дискретного варіанту:
 
Інші можливі методи приведення до чіткості ілюструє рис.2.2: найменший максимум (smallestofmax, som), найбільший максимум (largestofmax, lom), середній максимум (meanofmax, mom), бісекторний (bisectorofarea).
 
Рис. 3.2. Методи приведення до чіткості.
 Контрольні питання.
1.	Яким чином розділяються знання?
2.	Що таке функція належності?
3.	Які існують стандартні функції належності нечітких чисел?
4.	Загальна схема нечіткого логічного висновку.
5.	Які існують методи приведення до чіткості?
6.	Як здійснюється композиція?

Тема 4. Напрямки розвитку інтелектуальних систем
Всі дослідження по штучному інтелекту використовують один з двох підходів: - Біонічний або нейробіологічний та прагматичний або кібернетичний.
Біонічний ставить задачу змоделювати діяльність мозку людини, його психофізіологічні властивості за допомогою обчислювальних машин чи спеціальних технічних пристроїв. Основною ідеєю цього підходу є єдиний об´єкт, який здатний мислити це- мозок людини: тому будь- який пристрій, здатний мислити, повинен відтворювати структуру мозку людини; тобто такий підхід орієнтований на програмно- апаратне моделювання структур подібних структурі мозку людини.	Фізіологами встановлено, що основу мозку людини складає велика кількість зв´язаних між собою взаємодіючих нервових клітинок – нейронів. Першою нейронною мережею був пристрій,створений Розенблатом в 1956 році і називався персептрон, який імітував роботу ока людини, зокрема для виділення букв латинського алфавіту. 	Поступово у 70-х р.р. кількість робіт, що використовували нейробіологічні підходи почали знижуватись через недостатні ресурси ЕОМ. Але в 1980р. в Японії в рамках проекту ЕОМ 5-го покоління був створений перший нейрокомпютер (компютер 6-го покоління). Це один із способів представлення нейронних мереж, які моделюють ієрархічну структуру мозку людини. В подальшому нейронні мережі набули широкого розвитку в практичних використаннях в алгоритмах ідентифікації, адаптації та самонавчання.
Можна визначити 3 зарактерні способи задання нейромереж:
1). Апаратний – це створення спеціальних компютерів, нейрочіпів, наборів спеціальних мікросхем, які реалізують нейромережі.
2). Програмний – це створення програм та інструментальних засобів, які розраховані на високопродуктивні компютери.
3). Гібридний – при цьому частину обчислювань обробляють спеціальні плати, а частину програмні засоби.











Рис.4.1 Характер функціонування нейронних систем

Прагматичний підхід, передбачає створення штучної системи, функціонування якої за результатами співпадає з функціонуванням мозку людини при однаковій вхідній інформації.
При такому підході ефективність штучної системи оцінюється шляхом порівняння результатів отриманих в штучній системі й розумової діяльності людини.
	За цим підходом були отримані перші практичні результати, зокрема були створені комерційні експертні системи;
	(У 1978 році було створено експертні системи: DENDRAL – використовується в хімії,  EMYCIN – в медицині);
-	 експертні системи реального часу;
-	системи інтелектуального прийняття рішень;
-	нечіткі регулятори.
Перспективи розвитку  інтелектуальних систем. Дослідження в області інтелектуальних систем проводять сьогодні за деякими основними напрямками, перерахованими нижче. 
 	.Розробка моделей представлення знань  в різних предметних областях. Створення принципів побудови баз знань,   програмну чи комп’ютерну реалізацію різних моделей представлення знань  для певних предметних областей.
 2.Створення методів і процедур імітації на ЕОМ людських міркувань при пошуку смислових (семантичних) рішень на основі переробки знань; імітації на ЕОМ процесів навчання людини. 
 	3 Розробка методів розуміння  ЕОМ   природної мови, процедур діалогового спілкування людини з ЕОМ  на природній мові, а також методів автоматизованого перекладу іноземних текстів.
 	4.Розробка автоматизованих процедур доведення теорем в різних розділах математики (алгебра, геометрія, тригонометрія, логіка, теорія множин та ін.); пошуку аналітичних рішень розв’язання алгебраїчних і диференціальних рівнянь; аналітичного   диференціювання   та   інтегрування;   еквівалентного перетворення математичних виразів та ін.
 5. Створення методів: розпізнавання зорових зображень, зорових сцен і звукових сигналів; виділення корисних сигналів в умовах перешкод; прогнозування тренда (тенденцій) зміни сигналів при функціонуванні складних об’єктів.
 6. Розробка методів автоматизованого програмування і перевірки правильності написання (складання) програм для ЕОМ; розробки процедур інтелектуального   пошуку фотографічної і документальної інформації у великих базах даних .
 	7. Розробка методів планування і складання розкладів для складних  організаційно-виробничих процесів і технологічних операцій; розробка процедур ситуаційного управління складними технологічними системами при невизначеності первинної інформації, в тому числі - процедур управління фізичними діями  інтегральних роботів.
8. Створення моделей і процедур пошуку рішень  для різних предметних галузей; процедур комп'ютерної імітації художньої творчості ( твори літературних, музичних і живописних жанрів). 
 	9. Створення спеціальних мов програмування інтелектуальних систем  і мов програмування  представлення знань.
  Таким чином, основна мета наукових досліджень в теорії та практиці інтелектуальних систем   - не заміна розуму людини машиною, а імітація мислення людини на ЕОМ для цілей передачі ЕОМ більшої кількості видів інтелектуальної творчої діяльності і для більш глибокого обгрунтовування ухвалюваних людиною розв’язань важких  неформалізованих задач,  для традиційно використованого різноманітного математичного апарату (власне математика, фізика, хімія, хімічна технологія, економіка, електротехніка, мікроелектроніка та ін.) і математично слабко формалізованих областей знань (медицина, біологія, генетика, геологія, сільське господарство, військова справа та ін.), так і в різних сферах творчої діяльності при експериментальних і теоретичних дослідженнях (при проектуванні, спорудженні і експлуатації складних промислових об’єктів).
На даний час в Україні важливими напрямками досліджень, викликаними проблемами створення, вивчення та розвитку національних інформаційних ресурсів, серед інших, є такі;
· інтеграція інтелектуальної інформації;
· просторове і часове мислення;
· моделювання  мислення в інтелектуальних навчаючих системах;
· емпіричний штучний інтелект;
· наукові відкриття за допомогою штучного інтелекту;
· багатозначна логіка у системах штучного інтелекту;
· теорія прийняття рішень і штучний інтелект;
· багатомовні машинні лексикони.
Контрольні питання.
1.	Особливості біонічного напрямку розвитку інтелектуальних систем.
2.	Особливості   напрямку прагматичного розвитку інтелектуальних систем.
3.	Які особливості гібридних інтелектуальних систем?
4.	Охарактеризуйте перспективи розвитку  інтелектуальних систем.
5.	Який Характер функціонування нейронних систем?

Тема 5. Типи інтелектуальних систем  та їх функціональні структури
Прикладними інтелектуальними системами називаються системи, які вирішують конкретні, практичні задачі у відповідній предметній області.
	Серед цих систем можна виділити:
-	Експертні системи;
-	Системи, що мають в складі підсистеми інтелектуальної підтримки рішень;
-	Інтелектуальні системи управління.
Експертні системи – це складний програмний комплекс, що акумулює рішення спеціалістів конкретних проблемних чи предметних галузей, тиражує їхній досвід, для консультації користувачів, що мають меншу кваліфікацію чи для генерування рішень.
Експертні системи використовуються у випадках: 
1)	Відсутність спеціалістів в певній вузькій спеціалізації проблемної чи предметної області.
2)	Виконання практичної задачі, вимагає цілого колективу спеціалістів, оскільки ні один з них не має достатніх знань.
3)	Велике розузгодження між рішеннями спеціалістів різної кваліфікації.
4)	Низька продуктивність в прийнятті рішень, оскільки прикладна задача потребує повного аналізу, складного набору, а звичайний спеціаліст не взмозі в межах відведеного часу переглянути ці умови.
Розглянемо узагальнену структуру експертної системи :












Рис.5.1. Узагальнена структура експертної системи
Більшість реальних експертних систем мають складнішу структуру, але наведені блоки є обов´язковими у використанні експертних систем . В цілому процес функціонування експертних систем  можна охарактеризувати таким чином: користувач, який бажає отримати необхідну інформацію через інтерфейс користувача посилає запит в експертних систем. Вирішувач, користуючись базою знань, генерує та видає користувачу необхідну рекомендацію, пояснюючи хід своїх міркувань за допомогою підсистеми пояснень.
Користувач – спеціаліст у відповідній предметній чи проблемній галузі, який має потребу в допомозі своєї діяльності зі сторони експертної системи .
	Інженер по знаннях – спеціаліст в області штучного інтелекту, який може запрограмувати знання експерта для відповідної експертної системи.
	Інтерфейс користувача – це комплекс програм, що реалізують діалог користувача і експертної системи  як на стадії вводу інформації, так і при отриманні результатів.
	База знань – це ядро експертної системи , яке являє собою сукупність знань  в предметній чи проблемній області, що записані на машинній копії. 
	Вирішувач(Машина логічного виведення) – програма, що моделює хід суджень екперта на основі знань із бази знань.
	Підсистема пояснень дозволяє користувачу отримувати відповідь на питання “як була отримана рекомендація?”, “чому система прийняла таке рішення?”.
	Інтелектуальний редактор бази знань – це програма, яка дозволяє інженеру по знанням на основі знань експерта створювати бази знань в діалоговому режимі. Редактор включає оболонку бази знань, систему меню, підказок, інформаційних системних засобів.
Класифікація експертних систем:
1.	За  задачами в предметній чи проблемній галузі експертні системи розділяють на:
-	системи інтерпретації даних;
-	діагностики;
-	проектування;
-	прогнозування;
-	планування;
-	навчання.
Під інтерпретацією даних розуміємо процес визначення змісту даних, виходячи з особливостей конкретної проблемної чи предметної галузі.
Діагностика – це процес віднесення об´єкта до деякого класу об´єктів чи знаходження несправностей в деякій системі. 
Проектування полягає в підготовці специфікації для створення об´єктів із заздалегідь визначеними властивостями.
Прогнозування дозволяє передбачувати наслідки деяких подій чи явищ на основі аналізу даних, що надходять в експертні системи.
Планування – це знаходження планів дій для об´єктів, які здатні виконувати деякі функції. 
Навчання – використовується експертними системами для вивчення предметної /проблемної галузі.
2.	За зв´язками з реальним часом експертні системи  поділяються на:
 -статичні;
 - квазидинамічні;
 - динамічні.
	Статичні експертні системи   використовуються в предметних галузях, в яких база знань та дані не змінюються в часі.
Квазистатичні експертні системи   інтерпретують ситуацію, яка змінюється з деяким фіксованим інтервалом часу.
Динамічні експертні системи  працюють з використанням інформації в режимі реального часу із неперервною інтерпретацією даних, що надходять в систему.
3.	За типом ЕОМ:
-	експертні системи   на базі суперЕОМ (наприклад, в  космічній галузі);
-	з використанням ЕОМ середньої продуктивності;
-	з використанням робочих станцій;
-	з використанням персональних комп’ютерів.
4. За ступенем інтеграції:
-	автономні;
-	інтегровані.
Автономні експертні системи  працюють в режимі консультації з користувачами для вирішення специфічних для даної експертної системи  проблеми.
Інтегровані (гібридні) експертні системи   являють собою програмний комплекс, в якому мають місце засоби маніпуляції знаннями, а також стандартні пакети прикладних програм.
Системи інтелектуальної підтримки прийняття рішень.
Інтелектуальна підтримка прийняття рішень  – це сукупність процедур, які забезпечують особу, що приймає рішення (ОПР) рекомендаціями, що полегшують прийняття рішень і дозволяють спеціалістам вибрати чи сформувати необхідну альтернативу серед множини варіантів при прийнятті відповідальних рішень. 
	Розглянемо узагальнену структуру підсистеми інтелектуальної підтримки прийняття рішень   системи управління складним обєктом.   
Як видно, структурна схема підсистеми інтелектуальної підтримки прийняття рішень   системи управління складним обєктом   має деякі компонентні властивості для експертних систем. Основною відмінністю підсистеми інтелектуальної підтримки прийняття рішень   системи управління складним обєктом є її здатність обновлювати свої знання, обгрунтовувати рішення, прогнозувати розвиток ситуацій шляхом активної взаємодії її із системою управління і можливість прийняття  інформації різного характеру. 
	Інтерфейс користувача забезпечує зв´язок на обмеженій природній мові, візуальне представлення результатів, а також можливість втручання ОПР в роботу системи управління
Взаємодія підсистеми інтелектуальної підтримки прийняття рішень   системи управління складним обєктом   з прикладним програмним забезпеченням здійснюється при виконанні спеціальних обчислень, коли виникає необхідність у виконанні стандартних операцій по обробці даних. Зв´язок з розподіленою БД використовують підсистеми інтелектуальної підтримки прийняття рішень   системи управління складним обєктом   для отримання даних та знань розподілених на різних рівнях ієрархії управління.




























Рис.5.2. Узагальнена структура  підсистеми інтелектуальної підтримки прийняття рішень   системи управління складним обєктом.   
	
Блок прогнозування здійснює оцінку ситуації, що склалася як в об´єкті управління, так і передбачену оцінку ситуації – розвитку в майбутньому. Він також може здійснювати оцінку можливих наслідків прийняття того чи іншого альтернативного рішення по управлінню.
	Підсистема інтелектуальної підтримки прийняття рішень   системи управління складним обєктом   реалізує механізм логічного виведення, який в основному базується на еврістиках. Еврістики визиваються метаправилами, які основані на контекстах чи ситуаціях.
Нечіткі регулятори.
В багатьох об´єктах управління (зокрема в харчовій промисловості), присутня невизначеність, яка проявляється навіть на локальному рівні, тому в цьому разі ефективне управління можливе за рахунок застосування інтелектуальних алгоритмів. Інтелектуальні механізми на локальному рівні управління реалізовані у вигляді нечітких регуляторів. Ці регулятори розглянемо на прикладі нечіткого локального регулятора рН 2-гої сатурації:

















Рис. 5.3. Структурна схема нечіткого регулятора рН 2-ої сатурації.

Сигнал розузгодження ΔрН і швидкість змінювання ΔрН' поступають на фазифікатор, де перетворюється у відповідну нечітку змінну лінгвістичних  змінних  ΔрН і ΔрН'; на основі нечітких значень лінгвістичних змінних ΔрН і ΔрН'  блоком вибору правил знаходиться із бази знань (таблиця лінгвістичних правил) нечітке значення лінгвістичної змінної – регулююча дія – подача сатураційного газу. Це значення за допомогою дефазифікатора перетворюється в чітке кількісне значення положення визначеного механізму.
Лінгвістична змінна ΔрН другої сатурації має таку терм-множину:
ЗМ – значно менше;
МЕ – менше;
НО – норма;
БІ – більше;
ЗБ – значно більше.
Лінгвістична змінна  швидкості змінювання ΔрН' має таку терм-множину:
ВВ – від´ємно велика;
ВС – від´ємно середня;
ВМ – від´ємно мале;
НУ – нуль;
ДМ – додатньо мале;
ДС – додатньо середнє;
ДВ – додатньо велике.
Розглянемо терм-множину  витрати сатураційного газу:	
НВ – негативно велике;
НС – негативно середнє;
НМ – негативно мале;
НУ – нуль;
ПМ – позитивно мале; 
ПС – позитивно середнє
ПВ – позитивно велике.
Для каналу витрати сатураційного газу і рН 2-гої сатурації база знань має такий вигляд:


	рН	рН	рН	рН	рН	рН
рН		ЗМ	МЕ	НО	БІ	ЗБ
рН	ВВ	ПВ	ПС	ПС	НУ	НМ
рН	ВС	ПВ	ПС	ПС	НУ	НС
рН	ВМ	ПВ	ПМ	ПМ	НМ	НС
рН	НУ	ПС	ПМ	НУ	НМ	НС
рН	ДМ	ПС	ПМ	НМ	НМ	НВ
рН	ДС	ПС	НУ	НС	НС	НВ
рН	ДВ	ПМ	НУ	НС	НС	НВ

 
Контрольні питання
1. Які є типи інтелектуальних систем? 
2. Із яких компонент складається експертна система?
3. Що таке інтелектуальна система підтримки прийняття рішень?
4. Які є блоки в підсистемі підтримки прийняття рішень?
5. Чим визначається структурна схема нечіткого регулятора?
6. Класифікація експертних систем.
7. Яким чином функціонує експертна система?

Тема 6. Нейронні мережі у розв’язанні задач керування
Нейронна мережа – це сукупність нейронів, що зв’язані великою кількістю зв’язків.
Під штучною нейронною мережею розуміють математичну модель, а також пристрій паралельних обчислень, що представляє собою систему штучних нейронів, що з’єднані та ті, що взаємодіють між собою.
Штучні нейронні мережі являють собою розподілені і паралельні системи, здатні до адаптивного навчання шляхом аналізу позитивних і від’ємних  впливів. Елементарним перетворювачем в даних мережах є штучний нейрон або просто нейрон, названий так за аналогією з біологічним прототипом. До теперішнього часу запропоновано і вивчено велику кількість моделей нейроноподібних елементів і нейронних мереж.
Штучний нейрон це вузол штучної нейронної мережі, що являє собою спрощену модель природнього нейрона. Математично штучний нейрон представляють як деяку нелінійну функцію від одного аргументу – лінійної комбінації всіх вхідних сигналів. Дану функцію називають функцією активації.
На рис.6.1 схематично зображений приклад одного нейрону: 
 
Рис.6.1. Штучний нейрон.
Він складається з елементів трьох типів: помножувачі (синапсів), суматора і нелінійного перетворювача. Синапси здійснюють зв'язок між нейронами, помножують вхідний сигнал на число, що характеризує силу зв'язку (вага синапсу). Суматор виконує додавання сигналів, що надходять по синаптичним зв'язкам від інших нейронів, і зовнішніх вхідних сигналів. Нелінійний перетворювач реалізує нелінійну функцію одного аргументу – виходу суматора. Ця функція називається функцією активації чи передаточною функцією нейрона. Нейрон в цілому реалізує скалярну функцію векторного аргументу.
Математична модель штучного нейрону: 
                                                                                     (6.1)
                                                                                                  (6.2)
де S - результат підсумовування (sum); Wi – вага (weight) синапсу, i = 1 ... n; Xі – компонент вхідного вектора (вхідний сигнал), i = 1 ... n; b – значення зміщення (bias); n – число входів нейрона; Y – вихідний сигнал нейрона; f(S) – нелінійне перетворення (функція активації).
У загальному випадку вхідний сигнал, вагові коефіцієнти та зміщення можуть приймати дійсні значення, а в багатьох практичних задачах – лише деякі фіксовані значення. Вихід Y визначається видом функції активації і може бути як дійсним, так і цілим.
Синаптичні зв’язки з позитивними вагами називають збуджуючими, з негативними – гальмівними. Описаний обчислювальний елемент можна вважати спрощеною математичною моделлю біологічних нейронів. Щоб підкреслити відмінність нейронів біологічних і штучних, останні іноді називають нейроподібні елементи або формальними нейронами.
На вхідний сигнал S нелінійний перетворювач відповідає вихідним сигналом f(S), який представляє собою вихід Y нейрона.
На рис.6. 2 зображені приклади функцій активації.
 
Рис. 6.2. Функції активації: а) функція одиничного стрибка, б) лінійний поріг (гістерезис), в) сигмоїд (логістична функція), г) сигмоїд (гіперболічний тангенс).
•	Порогова:					 ;
•	Логістична (сигмоїдна)			 ;
•	Гіперболічний тангенс:			 .
Однією з найбільш поширених є нелінійна функція активації, так звана логістична функція, або сигмоїда (функція S-подібного виду).
Серед всіх видів нейронних мереж виділяють прямоточні і рекурсивні,одношарові і багатошарові.
Очевидно, що процес функціонування нейронної мережі, тобто сутність дій, які вона здатна виконувати, залежить від величин синаптичних зв’язків, тому, маючи певну структуру нейронної мережі, що відповідає якій-небудь задачі, розробник мережі повинен знайти оптимальні значення всіх змінних вагових коефіцієнтів (деякі синаптичні зв’язки можуть бути постійними).
Цей етап називається навчанням нейронної мережі, і від того, наскільки якісно він буде виконаний, залежить здатність мережі вирішувати поставлені перед нею проблеми під час експлуатації. На етапі навчання окрім параметра якості підбору вагів важливу роль відіграє час навчання. Як правило, ці два параметри пов’язані зворотною залежністю і їх доводиться вибирати на основі компромісу.
Навчання нейронної мережі може вестися з вчителем або без вчителя. У першому випадку на мережі подаються значення як вхідних, так і бажаних вихідних сигналів, і вона, за деякими внутрішніми алгоритмами, підлаштовує ваги своїх синаптичних зв’язків. У другому випадку виходи нейронної мережі формуються самостійно, а ваги змінюються за алгоритмом, що враховує тільки вхідні і похідні від них сигнали.
Існує велика кількість різних алгоритмів навчання, які поділяються на два великі класи: детерміновані та стохастичні. У першому з них підстроювання вагів являє собою жорстку послідовність дій, у другому – здійснюється на основі дій, що підкоряється деякому випадковому процесу.
Розглянемо алгоритм навчання з учителем (рис. 6.3).
 
Рис. 6.3. Структурна схема системи навчання нейтронної мережі.
Хі – вхідні значення, Yі – вихідні значення, Yе – еталонний сигнал,Wij – ваги нейронної мережі,  – похибка навчання.
Розглянемо більш детально алгоритм навчання нейронної мережі з вчителем для одношарової нейронної мережі, прикладом якої є одношаровий персептрон.
1) Ініціалізувати елементи вагової матриці (зазвичай невеликими випадковими значеннями).
2) Подати на входи один із вхідних векторів, які мережа повинна навчитися розрізняти і обчислити її вихід.
3) Якщо вихід правильний, перейти на крок 4.
Інакше обчислити різницю між еталоннимYе і отриманим Yі – значеннями виходу:
                                                                                                  (6.3)
Модифікувати ваги у відповідності до формули:
 ,
де t і t+1 – номери відповідно поточної та наступної ітерацій; η – коефіцієнт швидкості навчання, 0 <η<1; i – номер входу; j – номер нейрону в шарі.
Очевидно, що, якщо Yе>Yі, вагові коефіцієнти будуть збільшені і тим самим зменшать помилку. В іншому випадку вони будуть зменшені, і Yі теж зменшиться, наближаючись до Yе.
4) Цикл із кроку 2, поки мережа не перестане помилятися.
На другому кроці на різних ітераціях по черзі у випадковому порядку пред’являються всі можливі вхідні вектори. На жаль, не можна заздалегідь визначити число ітерацій, які потрібно виконати, а в деяких випадках і гарантувати повний успіх.
У багатошарових же мережах оптимальні вихідні значення нейронів всіх шарів, крім останнього, як правило, невідомі, і дво- або більш шаровий персептрон вже неможливо навчити, керуючись тільки величинами помилок на виходах нейронної мережі. Один з варіантів вирішення цієї проблеми – розробка наборів вихідних сигналів, що відповідають вхідним, для кожного шару нейронної мережі, що, звичайно, є дуже громіздкою операцією і не завжди є здійсненною. Другий варіант – динамічне підстроювання вагових коефіцієнтів синапсів, в ході якого вибираються, як правило, найбільш слабкі зв’язки і змінюються на малу величину в ту чи іншу сторону, а зберігаються тільки ті зміни, які спричинили зменшення помилки на виході всієї мережі. Очевидно, що даний метод "тику", незважаючи на свою простоту, вимагає громіздких рутинних обчислень. І, нарешті, третій, більш прийнятний варіант – поширення сигналів помилки від виходів нейронної мережі до її входів, у напрямку, зворотному прямому поширенню сигналів у звичайному режимі роботи. Цей алгоритм навчання нейронної мережі отримав назву процедури зворотного поширення.
 АЛГОРИТМ НАВЧАННЯ МЕРЕЖІ ПО  - ПРАВИЛУ
Найпростіша нейронна мережа - одношарова (рис. 6. 4), що представляє з себе розташовані паралельно нейрони, які отримують на входи однакові сигнали, але мають різні синаптичні зв'язки. Кількість входів і виходів такої нейронної мережі відповідає кількості нейронів.
 
Рис. 6.4. Одношарова нейронна мережа
Такі нейронні мережі можна навчати за допомогою алгоритму навчання за Δ-правилом. Алгоритм навчання за Δ-правилом:
1 крок: ініціалізація матриці ваг (і порогів, у разі використання порогової функції активації) випадковим чином.
2 крок: пред'явлення нейронної мережі образу (на вхід подаються значення з навчальної вибірки - вектор Х), береться відповідний вихід (вектор D).
3 крок: обчислення вихідних значень нейронної мережі (вектор Y).
4 крок: обчислення для кожного нейрона величини розбіжності реального результату з бажаним.
 
Де   - бажане вихідне значення на i-нейроні,   - реальне значення на i-нейроні.
5 крок: зміна ваг (і порогів при використанні порогової функції) за формулами:
 
 
де t-номер поточної ітерації циклу навчання,   - вага зв'язку j-входу з i- нейроном,   - коефіцієнт навчання, задається від 0 до 1,   – вхідний значення, i   - порогове значення i-нейрона.
6 крок: перевірка умови продовження навчання (обчислення значення помилки і/або перевірка заданого кількості ітерацій). Якщо навчання не завершено, то 2 крок, інакше закінчуємо навчання.
Задача-приклад № 1.
Прорахувати одну ітерацію циклу навчання по Δ-правилом одношарової бінарної неоднорідною нейронної мережі, що складається з 2 нейронів і має функції активації: гіперболічний тангенс (k = 1) і порогову функцію (Т = 0,7). Як навчальну вибірку використовувати таблицю істинності для операцій еквівалентності і диз'юнкції (НЕ використовувати перший рядок таблиці). Синаптичні ваги задати випадковим чином.
Опис процесу рішення. Для навчання нейронної мережі за Δ - правилом необхідно:
1) Графічно відобразити структуру нейронної мережі. Визначити розмірність матриці синаптичних ваг.
2) Визначити навчальну вибірку, представивши її в табличному вигляді.
3) Вибрати вхідні дані, на яких буде розглядатися ітерація циклу навчання.
4) Дотримуючись алгоритми навчання за Δ -правилом, прорахувати одну ітерацію циклу і представити нові синаптичні ваги в матричному вигляді.
Розв’язання: 
1) За завданням нейронна мережа складається з двох нейронів, значить, входів у одношарової нейронної мережі буде 2 і виходів 2, а синаптичних ваг 4. Перший нейрон має порогову функцію активації, другий - гіперболічний тангенс.
 
2)	За завданням нейронна мережа бінарна, тому на її входи можуть подаватися тільки нулі і одиниці, так як входу 2, то можливих комбінацій вхідних значень буде 4 (навчальна вибірка буде складатися з 4 векторів). Вихід першого нейрона відповідно до завдання відповідає оператору еквівалентності, а другого - диз'юнкції. Тому таблиця з навчальною вибіркою буде виглядати наступним чином:
 
3) Нехай в якості вектора навчання буде розглядатися 3-й рядок таблиці.
4) Дотримуючись алгоритми навчання по Δ-правилом виконаємо 6 кроків
1 крок: задамо матрицю ваг випадковим чином з інтервалу [0,1]:
 
2 крок: вектор X = {1,0}, вектор D = {0,1}.
3 крок: обчислення вихідних значень нейронної мережі (вектор Y).
 
4 крок:
 
5 крок:задаємо    - коефіцієнт навчання від 0 до 1 і змінюємо ваги:
 
 
 
6 крок: обчислимо середньоквадратичну помилку (можна вибрати іншіметоди оцінки помилки)
 
H- кількість нейронів.
Так як ми розглядаємо одну ітерацію циклу навчання в будь-якому випадку виходимо з циклу.
АЛГОРИТМ ЗВОРОТНОГО ПОШИРЕННЯ ПОМИЛКИ
Багатошарова штучна нейронна мережа (рис. 6.5) може містити довільну кількість шарів (K), кожен шар складається з декількох нейронів, число яких також може бути довільно (  – кількість нейронів в шарі), кількість входів n, кількість виходів H =   – числу нейронів у вихідному (останньому) шарі.
 
Рис.6.5. Багатошарова нейронна мережа прямого поширення
Шари між першим і останнім називаються проміжними або прихованими. Ваги в такій мережі мають три індексу i- номер нейрона наступного шару, для якого зв'язок вхідні, j - номер входу або нейрона поточного шару, для якого зв'язок вихідна, k - номер поточного шару в нейронної мережі (для входів, вектора X, k = 0).
Багатошарові нейронні мережі прямого поширення навчаються методом зворотного поширення помилки.
Алгоритм навчання методом зворотного поширення помилки:
1 крок: ініціалізація матриць ваг випадковим чином (в циклах).
2 крок: пред'явлення нейронної мережі образу (на вхід подаються значення з навчальної вибірки - вектор Х) і береться відповідний вихід (вектор D).
3 крок(прямий прохід): обчислення в циклах виходів всіх верств і отримання вихідних значень нейронної мережі (вектор Y).
 
 
де   - вихід i-нейрона k-шару, f - функція активації,  – синаптичний зв'язок між j-нейроном шару k-1 і i-нейроном шару k,  - вхідний значення.
4 крок (зворотний прохід): зміна ваг в циклах за формулами:
 
  - для останнього (вихідного) шару,
  - для проміжних шарів, де t-номер поточної ітерації циклу навчання (номер епохи),   - коефіцієнт навчання задається від 0 до 1,   - вихід i- нейрона k-шару,
  - синаптичний зв'язок між j-нейроном шару k-1 і i-нейроном шару k,  - бажане вихідне значення на i-нейроні,  - реальне значення на i- нейроні вихідного шару.
5 крок: перевірка умови продовження навчання (обчислення значення помилки і/або перевірка заданого кількості ітерацій). Якщо навчання не завершено, то 2 крок, інакше закінчуємо навчання. Ефективне значення помилка обчислюється таким чином:
 
де Q - загальна кількість прикладів, H- кількість нейронів у вихідному шарі,   - бажане вихідне значення на i-нейроні,   - реальне значення на i- нейроні вихідного шару.
Задача-приклад № 2.
Прорахувати одну ітерацію циклу навчання методом зворотного поширення помилки багатошарової бінарної неоднорідною нейронної мережі, що складається з 2 шарів, причому в першому шарі знаходиться 2 нейрона і використовується сигмоїдальна функція активації (k = 0,9), а в другому - 1, лінійна (l = 0,7) функція. Як навчальної вибірки використовувати таблицю істинності для операції «штрих Шефера» (не використовувати перший рядок таблиці). Синаптичні ваги задати випадковим чином. 
Опис процесу рішення. Для навчання нейронної мережі методом зворотного поширення помилки необхідно:
1) Графічно відобразити структуру нейронної мережі. Визначити розмірність і кількість матриць синаптичних ваг (для кожного шару своя матриця).
2) Визначити навчальну вибірку, представивши її в табличному вигляді.
3) Вибрати вхідні дані, на яких буде розглядатися ітерація циклу навчання.
4) Дотримуючись алгоритми навчання методом зворотного навчання помилки прорахувати одну ітерацію циклу і представити нові синаптичні ваги в матричному вигляді.
Розв’язання:
1)	За завданням нейронна мережа складається з трьох нейронів, два вхідних, один вихідний, значить синаптичних ваг 6. Перший шар нейронів має сигмоїдальну функцію активації, другий - лінійну.
 
2)	За завданням нейронна мережа бінарна, тому на її входи можуть подаватися тільки нулі і одиниці, так як входу 2, то можливих комбінацій вхідних значень буде 4 (навчальна вибірка буде складатися з 4 векторів). Вихід нейронної мережі відповідно до завдання відповідає оператору «штрих Шеффера». Тому таблиця з навчальної вибіркою буде виглядати наступним чином:
 
3) Нехай в якості вектора навчання буде розглядатися 2-а рядок таблиці.
4) Дотримуючись алгоритму навчання по Δ-правилом, виконаємо 5 кроків: 1 крок: задамо матрицю ваг випадковим чином з інтервалу [0,1]:
 
2 крок: вектор X = {0,1}, D = {1}.
3 крок (прямий прохід): обчислення в циклах виходів всіх верств і отримання вихідних значень нейронної мережі (вектор Y).
 
 
 
4 крок (зворотний прохід): зміна ваг:
 
 
 
 
 
5 крок:
 
Так як ми розглядаємо одну ітерацію циклу навчання, в будь-якому випадку виходимо з циклу.
 

Мережі зустрічного поширення.
Об'єднання різнотипних структур в один призводить до нових властивостей.
Нейронні мережі зустрічного поширення - це гібридні мережі, що складаються з вхідного шару нейронів і шарів нейронів Кохонена і Гросберга. Ці мережі за своїми характеристиками істотно перевершують мережі з однотипними нейронами.
Нейрони шару Кохонена реалізують функцію порогового підсумовування зважених входів, однак, на відміну від інших шарів нейрон шару Кохен з максимальним значенням зваженої суми на заданих вхідних векторів називається переможцем, на його виході формується значення 1, а на виходах інших - 0.
 Шар Кохонена навчається без учителя на основі самоорганізації, тобто самонавчальний шар. Число входів кожного нейрона цього шару рівно розмірності вектора параметрів об'єкта. А кількість нейронів збігається з необхідним числом класів на які необхідне розбити об'єкти. Нейрони шару Гросберга на виході видають величини ваг   , які пов'язують з переможцями нейронів Кохонена. На відміну від самонавчального шару Кохонена, шар Гросберга навчається з учителем.
Відмінність від стандартної схеми навчання полягає в тому, що підстроюванню піддаються тільки ті ваги нейронів шару Гросберга, які з'єднані з ненульовим нейроном Кохонена..
Відмінність мережі зустрічного поширення полягає так само в особливостях функціонування. Відповідно до наведеної на рис. 2 структурою на вхід мережі подаються нормалізовані одиничні вектори u, y.  А на виході формуються їх нормалізовані апроксимації з хвилями. При навчанні вхідні вектора подаються як на вхід, так і на вихід.
Реалізується властивості асоціативної пам'яті, що полягає в тому, що пред'явлення на вхід тільки вектора y   або u   при відсутності іншого призводить до породження на виході як  , так  .

 
Рис. 6.6. Структура нейронної мережі зустрічного поширення
 
 Навчання мережі зустрічного поширення.
Нормалізований вектор - вектор одиничної довжини.
Перед навчанням мережі попередньо проводять нормування векторів навчальної вибірки.
 
 
Якщо здійснити нормування, а так само після кожного процесу здійснити нормування кожного нейрона, то в якості близькості вхідних векторів і векторів нейронів можна розглядати скалярний добуток між ними,  
   — рядок матриці W.
 Найменшим буде відстань до того нейрона, у якого буде скалярний добуток  максимальний.
Алгоритм 
Вхідні дані: навчаюча вибірка  : 
 - початковий коефіцієнт швидкості навчання шару К.  
 - коефіцієнт швидкості навчання шару  Г.  
Вихід:  
Крок 0: Ваговим коефіцієнтам   присвоїти малі випадкові значення і провести одиничне нормування матриць  W,V по рядках,   t=1.
Крок 1: Для вектора x^t обчислити скалярні  добутки  
Крок 2: Вибрати нейрон k 1<= k <= n з найбільшим скалярним добутком  .
Крок 3: Установити вихід  , виходи всіх  інших нейронів шару Кохонена = 0  
Крок 4:  
Крок 5: Подати вихідний вектор шара Кохонена на шар Гросберга и скорегувати ваги за формулою:  
Крок 6: Зменшити значення  і  , та змінити  

 Контрольні питання.
1.Будова нейрона, призначення окремих його елементів.                   
2. Охарактеризуйте функції активації нейронів.
3. Наведіть класифікацію нейронних мереж.
4. Оцініть особливості окремих видів нейронних мереж.
5. Висвітліть структурну схему системи навчання нейтронної мережі.
6. Охарактеризуйте алгоритм навчання нейронної мережі з вчителем для одношарової нейронної мережі.
7. Поясніть алгоритм навчання нейронної мережі за  - правилом.
8. Охарактеризуйте багатошарову штучну нейронну мережу.
9. Поясніть алгоритм зворотнього поширення помилки.
10. Які є мережі зустрічного поширення?
11. Наведіть алгоритм роботи нейронної мережі зустрічного поширення.
12. В чому перевага нейронних мереж із самоорганізацією?

Тема 7.   Нечітка логіка в системах керування
   	Використання природної мови зі всім набором наявних в ньому засобів для виразу людських міркувань і прийняття рішень за допомогою якісних уявлень, понять і оцінок, дозволяє всестороньо описувати загальну смислову постановку задач прийняття рішень, що виникають в процесі функціонування підприємства. Ефективним засобом формалізації і представлення нечітких понять, категорій і знань, у тому числі лінгвістичних висловів є теорія нечіткої множини і заснована на ній нечітка логіка. Отримані в результаті інтерпретації цих описів в термінах нечітких множин логіко-лінгвістичні або нечіткі моделі є конструктивною основою для розробки методів і алгоритмів моделювання процесів в складних системах в умовах невизначеної і неповної  інформації. Перевагою нечіткої логіки є можливість використання експертних знань про вирішувані проблеми або структуру об'єкта у вигляді лінгвістичних висловлювань, які представляються нечіткою базою правил: „якщо <входи>, тоді <вихід>". 
 	  Нечітка логіка ближче по духу до людського мислення і природних мов, ніж формальна двозначна логіка. Нечітка логіка забезпечує ефективні засоби відображення невизначеностей і неточностей реального світу. Наявність математичних засобів відображення нечіткості первинної інформації дозволяє побудувати модель, адекватну реальності.
   В якості базового теоретичного матеріалу розглянемо основні поняття теорії нечітких множин і нечіткої логіки. Теорія множин являє собою потужний інструмент математики. Однак у її  основі лежить аксіома виключеного третього, стверджуюча, що елемент або належить множині або не належить, що часто робить цю теорію непридатною в реальних завданнях, у яких застосовуються нечіткі оцінки, такі як: «більший прибуток», «високий тиск», «помірна температура», «надійні інструменти», «безпечні умови» і т.п. На жаль, подібні висловлення не можуть бути адекватно формалізовані звичайними математичними методами.
Спроба розвитку формального апарата для залучення часткової належності в теорію множин була почата в середині 60-х років Заде. Він увів поняття нечіткої множини як збірки елементів, які можуть належати цій множині зі ступенем від 0 до 1. Причому 0 позначає абсолютну неналежність, а 1 - абсолютну належність множині). Це було зроблено шляхом застосування поняття функції належності, яке ставить у відповідність кожному елементу універсальної множини число з інтервалу [0,1], що позначає ступінь належності. Поняття функції належності є узагальненням поняття характеристичної функції чіткої множини, що оперує значеннями [0,1]. Тому основні властивості й операції над нечіткими множинами, уведені Заде і його численними послідовниками, є узагальненнями відповідних властивостей й операцій класичної теорії множин.
   З метою формалізації нечітких понять і відносин природної мови скористаємося визначенням нечіткої множини.
Визначення 1. Нечітка множина визначається математично як сукупність впорядкованих пар:
 
де елементи  x є X, а Х - універсальна множина нечіткої множини А, що являє собою всю предметну область визначення відповідних функцій належності  . При цьому функція належності відображає елементи  множини Х на множину чисел в інтервалі [0,1 ], тобто  : Х -> [0,1] - представляє собою деяку суб'єктивну міру належності елемента  x X до нечіткої множини А. Якщо універсальна множина  Х охоплює кінцеве число елементів  ,   ....  , то нечітку множину  А можна представити символічно у вигляді об'єднання:
 
причому, у виразі знак "+" не є операцією складання, а інтерпретується як сума множини  елементів ( ), які інакше означають присвоєння певним елементом   ступеню належності  .
   Поняття функції належності є основним формалізмом теорії нечітких множин, за допомогою якого експертні знання ("Якщо - Тоді") перетворюються на строгі математичні моделі.
   Функції  належності  характеризують суб'єктивну міру упевненості експерта в тому, що деяка величина належить певному нечіткому поняттю - терму, яким характеризується та або інша вхідна (вихідна) змінна. При цьому можна виділити три випадки:
•     , що означає повну належність елемента x до нечіткої множин А, тобто x   A  ;
•      означає відсутність якої-небудь належності х нечіткій множині  А;
•      означає часткову належність елемента x до нечіткої множина  А.
      Таблиця 4.1.
Типові види функцій, що використовується для задання функцій належності.
 


 
На рис 7.1  представлена графічна ілюстрація функції належності змінної У, що показує на прикладі “Ціну”, для трьох нечітких значень („низька”, „середня”, „висока”).
 

Рис.7.1.Функції належності нечітких множин „низька”  , „середня”  , „висока”    змінної  “Ціна”.
  	 Для задання функції належності використовуються типові види функцій, представлені в таблиці 7.1 (вибирається та функція, яка найкращим чином апроксимує експертні оцінки).



   	Визначення 2: Підмножина елементів S X, для яких   називається носієм (суппортом – анг. Support) нечіткої множини А і позначається наступним чином: Supp`A= .
Визначення 3: Нечіткою змінною називається набір   де   - найменування нечіткої змінної;  - область її визначення;  - нечітка множина на X, що описує обмеження на можливі значення нечіткої змінної  .
  	 Згідно з визначенням Л.Заде, „під лінгвістичною змінною розуміється така змінна, значеннями якої є слова і словосполучення на деякій природній або штучній мові". Формально лінгвістичну змінну можна визначити таким чином: 
 Визначення 4.    Лінгвістична змінна - це набір п'яти елементів:  <Х, Т(Х), U, G, М>,                 
де Х- ім'я змінної;   Т(Х) - множина термів, тобто множина  імен (позначень) лінгвістичних значень Х;  U - область міркувань (the universe of discourse);   G - правило (the grammer) генерації імен ;    M - множина  семантичних правил скріплення кожного Х з тим, що воно позначає. Наприклад, для опису вартості виробу в процесі прийняття рішень скористаємося такою лінгвістичною змінною: <Вартість,Т,[500, 1200],G,M> 
де Т={МАЛА, НЕВЕЛИКА, СЕРЕДНЯ, ВЕЛИКА}; G-процедура вибору елементів множини Т; М - процедура експертного опитування.
   Для розуміння основних логічних операцій над нечіткою множиною, що виконуються в процесі логічного нечіткого виведення введемо таке визначення.
   	Визначення 5: Трикутною Т-нормою називається функція двох змінних Т:  яка задовольняє таким умовам:
•    Функція Т є монотонною незростаючою для двох змінних :
 для  
•   Функція Т є обмеженою:
Т(а,0) = 0, Т(а, 1) = а, де а,b,с,d   [0,1];
•    Функція   Т   задовольняє   умові   асоціативності: Т(Т(а,b),с) = Т(а,Т(b,с));
•    Функція  Т  задовольняє  умові  комутативності: Т(а,b)=Т(b,а).
   Дію Т-норми на аргументах  а і  b позначаємо таким чином:             
 .
Частіше всього як функція Т використовуються такі вирази:
 
 (добуток a,b)
 
Якщо змінними а і b є функції належності нечіткої множини А і В, тоді можемо записати таку рівність:
 
   де Т - є однією з вище представлених функцій.
    Визначення 6:  Трикутною  S-нормою  називається  функція двох змінних S:
  якщо є      незростаючою і задовольняє таким умовам:
•    комутативності: S(а,b) = S(b,а).
•     асоціативності: S(S (а,b),с) - S(а,S(b,с));
•     обмеженості - S(l, 1) = 1; S(а,0) = а;  S(а, 1) =1; 
   Функція S називається також конормою або нормою дуальною відносно до Т-норми.
Дія S - норми на аргументах а і b позначаємо таким чином:
 
    Приклади S-норми:
S(а,b) = max(а,b);
S(а,b)=а + b-а * b;
S(а,b) =min(1,а+b) .
Якщо змінними а і b є  функції належності нечіткої множини А і В, тоді суму цієї множини (об'єднання) можемо записати таким чином:
 
  де S-норма є однією з вище представлених функцій. 
  	 Нечіткі відношення грають фундаментальну роль в теорії нечітких множин і логіки при моделюванні складних систем, оскільки із їх допомогою виконується операція нечіткого логічного виведенння. Подібно нечіткій множині, нечітке відношення можна задати за допомогою його функції належності:     
 
  де L - може бути множиною дійсних чисел, відрізком [0,1] дійсної прямої, множиною лінгвістичних змінних або повною дистрибутивною граткою. Тоді під нечітким відношенням R розуміється функція  що відображує  декартовий добуток множин   в  L.
   Визначення 7:  Нечітким відношенням R між множинами Х і Y називається функція
 
  де в загальному випадку передбачається, що L - це повна дистрибутивна гратка.
   Якщо нечіткі множини   і   , задані на деякій універсальній множині:   а    є складовими нечіткого правила „ЯКЩО Х, ТОДІ Y". Тоді нечітке відношення між множинами Х і Y представляють собою матрицю вигляду:
 
в якій елементи, розташовані на перетині i-того рядка і j-того стовпця визначаються таким чином:
 
Операція нечіткого логічного виведення має такий вигляд:
 
Такий запис інтерпретується таким чином:
ЯКЩО факт Х виходить з факту Y ,ТО факт Х' виходить з Y', 
де Х, Y, Х', Y' - нечіткі множини.
 При цьому Y’ визначаємо за формулою:
 
X,X’ U,Y,Y’ V
 	  Визначення 8:     Система нечіткого виведення представляє собою сукупність таких  елементів:
    блок введення  нечіткості (fuzzification);
    другий блок – це основа системи – база нечітких знань, що формується спеціалістами предметної області у вигляді сукупності нечітких предикатних правил;
    механізм логічних виводень рішень;
    блок приведення до чіткості (defuzzification).
   Функціональна структура системи нечіткого виведення наведена на рис.7.2, яка в літературі називається системою Мамдані-Заде.
В блоці введення нечіткості виконується перетворення множини вхідних даних  , в нечітку множину А, що характеризується функцією належності  .















Рис.7.2. Функціональна структура системи нечіткого виведення

 Одним із методів моделювання багатомірних залежностей в складних задачах прийняття рішень є їх опис нечіткими базами знань, що призначені для формалізації причинно-наслідкових  зв’язків між змінними “вхід-вихід”, які  характеризують ту чи іншу конкретну залежність.
  	 Нечітка база знань  представляє собою сукупність правил “ЯКЩО <входи> - ТОДІ <вихід>”, які відображають знання експерта і його розуміння причинно-наслідкових  зв’язків, що характерні для об’єкта або процесу, які моделюються.   
  	 Нечітка база знань являє собою опис цих  зв’язків на звичайній мові з використанням нечітких множин та лінгвістичних змінних.
   В блоці приведення до чіткості – дефазифікації формується  однозначне рішення  відносно  значення вихідної змінної  на підставі нечітких висновків, отриманих в результаті логічного висновку рішень. В блоці дефазифікації  формується нечітка множина в повністю детерміноване точкове рішення.
   Основою дій нечіткого логічного висновку є нечітке спільне правило “modus-ponens”, яке може бути визначено таким чином:
   	Визначення 9: Нечітке узагальнене правило “modus-ponens” визначає така схема висновку:
 
        де     і   , є нечіткими множинами, визначеними  на X,Y – які є непустими універсальними множинами, а x і y – лінгвістичні змінні. Тоді  висновок нечіткого правила може бути записаний за допомогою нечіткої імплікації     таким чином:
 

де  “ ”  означає операцію композиції.
   Як було вище зазначено, нечітка імплікація рівносильна деякому нечіткому відношенню    з функцією належності  . Тому функцію належності нечіткої множини В’ можемо знайти за такою формулою:
 
де   При цьому, в залежності від того яким чином реалізується Т-норма, формула може прийняти інший вигляд, тобто якщо Т-норма визначається як мінімум (min), тоді формула прийме такий вигляд:
 
або виконується операція множення:
 
   Крім представленого нечіткого правила висновку “modus-ponens” в нечіткій логіці використовується узагальнене нечітке правило “modus-tollens”.
 	  Визначення 10: Узагальнене нечітке правило “modus-tollens” визначає наступна схема висновку:
 
де   і   , є нечіткими множинами, визначеними на Х,У – які є непустими універсальними множинами, х і у – лінгвістичні змінні. Нечітка множина в схемі нечіткого висновку визначається в результаті композиції відношення:
 
при цьому
 
Якщо Т-норма є типу min, тоді попередня формула прийме такий вигляд
 
В даний час відомо багато різних методів нечіткої імплікації. Розглянемо найбільш відомі з них.
    Методи визначення функції належності нечіткої імплікації.
   Нечітка імплікація типу    представляє собою набір правил, що визначають спосіб розрахунку функції належності нечіткого відношення   тобто
 
на основі відомих функцій належності    і   нечіткої  множини   і  .
>     Нечітка імплікація Mamdani:
    

>     Нечітка імплікація Zadeh:
          
.
>     Нечітка імплікація Larsena:
                      

>      Нечітка імплікація Kleene-Dienesa:
     
>     Нечітка імплікація Lukasiewicza:
          

>     Нечітка імплікація Yager'а:
                     

>    Нечітка імплікація Willmott'а:
   
Методи приведення до чіткості
   Трансформація нечіткої множини в єдине точкове рішення може бути виконана декількома відомими способами.
> Метод центру тяжіння області ( Center of Area method = COА). Це найбільш широко використовуваний метод дефазифікації. Формула виглядає таким чином:
                                     
 
Спосіб визначення   показаний на рисунку 7.3.
 
Рис.7.3. Ілюстрація методу центра тяжіння області.
В дискретному випадку розрахунок проводиться за формулою:
                                 
>      Метод максимума критерію (max criterion method).
Суть цього методу полягає у виборі значення  , при якому нечітка множина   має максимальну ступінь належності:
                                   
>      Перший максимум (First-of-Maxima), Чітка величина висновку знаходиться як найменше значення, при якому досягається максимум кінцевої нечіткої множини:
                               
>      Метод середнього центру (Center Average Defuzzyfication) визначає значення   за такою формулою:
                                   

 де   є точкою, в якій функція належності   приймає максимальне значення
 
   Точка   називається центром нечіткої множини  . На рисунку показана суть цього методу для N=2.

 
Рис.7.4.Ілюстрація методу середнього центру
   >     Метод середнього значення максимуму (mean of maximum method=MOM)
 
На практиці частіше всього застосовуються методи середнього центру.
Алгоритми нечіткого логічного висновку.
   	Нечіткий логічний висновок пов’язаний з виконанням розрахунків на нечітких множинах, які визначають значення деяких лінгвістичних змінних, що описані в нечіткій базі знань. Ці розрахунки виконують згідно з правилами висновку і узагальненим нечітким правилом “modus ponens”.
   	Перше правило нечіткого логічного висновку було запропоновано L.Zadeh і носить назву композиційного правила висновку. В наш час використовують різні методи нечіткого висновку, які відрізняються, перш за все, використованим      методом      імплікації      і      композиції.
 Розглянемо найбільш розповсюджені модифікації алгоритму нечіткого виведення, вважаючи, що база знань складається з з двох нечітких правил вигляду:
       якщо х є   і у є  , тоді z є   ,
       якщо х є   і у є  , тоді z є   ,
 де х і у — вхідні змінні, z — змінна висновку,   — деякі задані функції належності.
   Чітке значення   необхідно визначити на основі наведеної інформації і чітких значень   і  .
 1)    Розглянемо найпопулярніший алгоритм Mamdani.
        Математично алгоритм Мамдані може бути описаний таким чином:
>   На етапі введення нечіткості знаходяться ступені істинності для передумов кожного правила:
 
>        В процесі логічного виведення знаходяться рівні «відсічення» для передумов кожного з правил (з використанням операції min):
 ,  де через “^” позначена операція     логічного мінімуму (min).      
Потім знаходяться «відсічені» функції належності:
      
Наступний етап - композиція (або інакше агрегація). Проводиться об'єднання знайдених усічених функцій з використанням операції max( позначається як «   »), що приводить до отримання нечіткої підмножини результату для змінної виходу із функцією належності:
 
 >       Приведення до чіткості виконується  методом центру тяжіння області.
2)   Алгоритм Tsukamoto
В цьому алгоритмі передбачається, що функції    є монотонними.
>        Введення нечіткості виконується аналогічно, як в алгоритмі Mamdani.
>        В процесі логічного виведення спочатку також знаходяться рівні «відсічення» для передумов кожного з правил, як і в алгоритмі Mamdani, тобто визначаються   і   , а потім розв’язанням рівнянь:
  і   
визначаються чіткі значення (  і   ) для кожного початкового правила.
>       В процесі дефазифікації визначається чітке значення змінної висновку (як зважене середнє   і   ):
 
або в загальному випадку для n правил згідно з дискретним варіантом методу центру тяжіння області (СОМ):
 


3)   Алгоритм Larsen'а
>       Введення нечіткості виконується також аналогічно, як в алгоритмі Mamdani.
>       Нечіткий висновок.  Спочатку,  аналогічно, як в алгоритмі Mamdani, знаходяться значення:   ,   , а потім  визначаються окремі   нечіткі підмножини:
    
>       В алгоритмі Larsen'a нечітка імплікація моделюється з  використанням оператора множення. Результуюча нечітка підмножина знаходиться за формулою:
 
або для загального випадку n  правил визначаємо за формулою:
 
>        приведення до чіткості проводиться з використанням одного з відомих  методів,  частіше за все аналогічно, як в раніше  розглянутих алгоритмах, використовується метод центру тяжіння області.
4)   Алгоритм Takagi та Sugeno
       Розглянемо спочатку  перший спрощений алгоритм, розроблений Takagi та Sugeno, який послужив їм за основу при розробці узагальненого алгоритму і моделі.
   Takagi та Sugeno  використовували набір правил в наступній формі (наведемо приклад двох правил):
  якщо х є   і у є   тоді  
  якщо х є   і у є   тоді  
Алгоритм можемо представити таким чином:
>   Введення нечіткості виконується також аналогічно, як у алгоритмі Mamdani. 
>      В процесі нечіткого логічного висновку  знаходяться
                та  індивідуальні виходи правил:
   і    
>      Визначається чітке значення змінної висновку за формулою:
  
Узагальнена модель нечіткого висновку Takagi-Sugeno набула велику  популярність завдяки представленню висновку у вигляді функціональної залежності, що дозволило значно спростити висновок, ліквідувавши необхідність дефазифікації. Загальна форма запису запису нечітких правил в моделі TS може бути представлена таким чином:
             
   
де   - чітка функція. В представленні висновку у вигляді функціональної залежності і полягає принципова відмінність системного нечіткого висновку від наведених раніше підходів. Частіше всього представлення цієї функції є  поліноміальною функцією декількох змінних, а на практиці – це поліном першого порядку:
 
в якому коефіцієнти    - це цифрові ваги, які підбираються в процесі навчання.
Якщо на вхід системи подається вектор  = ,тоді для визначення вихідного сигналу   для правила   необхідно розрахувати функції належності
 , а також ваги   кожного правила в системі таким чином:
 

     і величину                               
Вихідний сигнал системи нечіткого висновку Такагі-Сугено визначається як середньозважене значення:
 
Слід зазначити, що використовувані в моделі ваги   є нелінійними параметрами функції y і піддаються навчанню для досягнення  найкращої пристосованості моделі до заданих умов.
Теорія нечітких множин і заснована на ній нечітка логіка є в даний час найефективнішим засобом формалізації представлення нечітких понять, категорій знань, у тому числі лінгвістичних висловлювань.

СТВОРЕННЯ НЕЧІТКИХ МОДЕЛЕЙ ЛОГІЧНОГО ВИСНОВКУ
Задача-приклад № 1.
Розглядається задача управління змішувачем води при прийманні душу. Ця задача є однією з найпростіших, яка може бути розв'язана методами нечіткого моделювання. Для визначеності допустимо, що як алгоритм нечіткого виведення використовуватиметься алгоритм Мамдані.
Змістовна постановка задачі При прийманні душу на вхід змішувача подається холодна і гаряча вода по відповідних магістральних трубопроводах. Найкомфортніші умови для душу створюються за наявності на виході змішувача теплої води постійної температури. Оскільки під час прийманні душу може спостерігатися нерівномірна витрата води, температура води на виході змішувача коливатиметься, приводячи до необхідності ручної зміни подачі холодної або гарячої води. Задача полягає в тому, щоб зробити регулювання температури води автоматичної, забезпечуючи постійну температуру води на виході змішувача (рис.7.5).
 
Рис. 7.5. Ілюстрація моделі нечіткою управління змішувачем води при прийманні душу
Розв’язання: 
Досвід прийманні душу дозволяє сформулювати декілька еврістичних правил, які ми застосовуємо у разі регулювання температури води на виході змішувача:
1.	Якщо вода гаряча, то слід повернути вентиль крана гарячої води на великий кут вправо.
2.	Якщо вода не дуже гаряча, то слід повернути вентиль крана гарячої води на невеликий кут вправо.
3.	Якщо вода тепла, то залишити вентиль крана гарячої води без дії.
4.	Якщо вода прохолодна, то слід повернути вентиль крана гарячої води на невеликий кут вліво. 
5.	  Якщо вода холодна, то слід повернути вентиль крана гарячої води на великий кут вліво.
Ця інформація використовуватиметься при побудові бази правил системи нечіткого виведення, яка дозволяє реалізувати дану модель нечіткого управління. 
Побудова бази нечітких лінгвістичних правил. Для формування бази правил систем нечіткого виведення необхідно заздалегідь визначити вхідні і вихідні лінгвістичні змінні. Очевидно, як вхідну лінгвістичну змінну слід використовувати температуру води на виході змішувача або формально: (В1 - "температура води". Як вихідну лінгвістичну змінну використовуватимемо кут повороту вентиля крана гарячої води або формально: В2 - "кут повороту". В цьому випадку система нечіткого виведення містить 5 правил нечітких продукцій такого вигляду:
ПРАВИЛО 1: ЯКЩО "вода гаряча ," ТО " повернути вентиль крана гарячої води на великий кут вправо".
ПРАВИЛО 2: ЯКЩО "вода не дуже гаряча, "ТО " повернути вентиль крана гарячої води на невеликий кут вправо".	-І
ПРАВИЛО 3: ЯКЩО "вода тепла, " ТО "залишити кут повороту крана гарячої води без зміни".
ПРАВИЛО 4: ЯКЩО "вода прохолодна, "ТО " повернути вентиль крана гарячої води на невеликий кут вліво".
ПРАВИЛО 5: ЯКЩО "вода холодна," ТО " повернути вентиль крана гарячої води на великий кут вліво".
Фазифікація вхідних змінних. ЯК терм-множину першої лінгвістичної змінної використовуватимемо множину Т1 = {" гаряча", "не дуже гаряча", "тепла", "прохолодна", "холодна") з функціями належності, зображеними на рис. 7.6.
 
Рис. 7.6. Графіки функцій належностей для терму лінгвістичної змінної «Температура води»
Як терм-множину другої лінгвістичної змінної використовуватимемо множину Т2={"великий кут вправо", "невеликий кут вправо", "нуль "невеликий кут вліво", "великий кут вліво") з шматково-лінійними функціям, зображеними на рис. 7.7
При цьому температура води вимірюється в градусах Цельсія, а кут повороту - в кутових градусах. В останньому випадку поворот вправо означає позитивний напрям відліку, а поворот вліво - негативний.
 
Рис. 7.7. Графіки функцій належностей для терму лінгвістичної змінної «Кут повороту вентиля крана»
Використовуючи як алгоритм виведення алгоритм Мамдані, розглянемо приклад його виконання для випадку, коли поточна температура води на виході змішувача рівна 55 °С. В цьому випадку фазифікація вхідної лінгвістичної змінної приводить до значень ступенів істинності 0.5 для правил нечітких продукцій з номерами 2 і 3. Ці правила вважаються активними і використовуються в поточному процесі нечіткого виведення.
Наступним етапом нечіткого висновку є активізація висновків в нечітких правилах продукцій. Оскільки всі висновки правил 1-5 задані у формі нечітких лінгвістичних висловлювань першого виду, а вагові коефіцієнти правил за умовчанням рівні 1, то активізація правил 2 і 3 приводить до нечітких множин, функції належності яких зображені на рис. 2.6.
Акумуляція висновків нечітких правил продукцій з використанням операції max- диз’юнкції для правил 2 і 3 приводить в результаті до нечіткої множини, функція належності якої зображена на рис.7.8.
 
Рис. 7.8. Графіки функції належності для двох термів вихідний лінгвістичної змінної «Кут повороту вентиля крана»
 
Рис. 7.9. Графіки функції належності після акумуляції
Дефазифікація вихідної лінгвістичної змінної "Кут повороту вентиля крана" методом центру тяжіння для значень функції належності, зображеної на рис. 7.9, приводить до значення управляючої змінної, рівного повороту вентиля крана вправо на 16° (наближене значення). Це значення і є результатом рішення задачі нечіткого висновку дата поточного значення вхідної лінгвістичної змінної "Температура води".
Для реалізації цього алгоритму нечіткого управління необхідно організувати періодичне вимірювання температури води на виході змішувача в деякі дискретні моменти часу. При цьому, чим менше інтервал вимірювання цієї температури, тим вищою є точність регулювання температури води.
Що стосується реалізації власне процедури нечіткого управління, то для цієї мети необхідно використовувати відповідні програмні або апаратні засоби, спеціально призначені для виконання всіх етапів нечіткого висновку. Зокрема, для цієї мети можуть бути застосовані спеціальні програмовані нечіткі контролери, які мають можливість реалізовувати програму нечіткого висновку, записану, наприклад, на мові нечіткого управління або мови FCL
Задача № 3.
Нечітка модель управління кондиціонером повітря в приміщенні. Розглядається задача управління кондиціонером повітря в приміщенні. Ця задача ілюструє процес стабілізації температури повітря в приміщенні, в якому встановлений побутовий кондиціонер. Для визначеності також припустимо, що як алгоритм нечіткого висновку використовуватиметься алгоритм Майдані.
Змістовна постановка задачі. В приміщенні встановлений побутовий кондиціонер, який дозволяє охолоджувати або нагрівати повітря в цьому приміщенні. Найкомфортніші умови в приміщенні створюються при деякій стабільній температурі повітря. Оскільки температура навколишньою середовища зовні приміщення змінюється протягом доби і у значній мірі залежить від зовнішніх погодних умов, все це дестабілізує температуру повітря в приміщенні і приводить до необхідності ручного регулювання режиму роботи побутового кондиціонера. Задача полягає в тому, щоб зробити регулювання кондиціонера автоматичним, забезпечуючи постійну температуру повітря в приміщенні (рис. 7.10).

 
Рис. 7.10. Ілюстрація моделі нечіткого управління кондиціонером повітря в приміщені.
Досвід використання побутових кондиціонерів показує, що процес охолоджування або нагрівання повітря в приміщенні має деяку інерційність. А саме, після ввімкнення режиму "холод" відбувається нагнітання холодного повітря, у зв'язку з чим температура повітря в приміщенні поступово падає. При цьому у момент вимкнення цього режиму температура продовжує падати протягом невеликого, але кінцевого проміжку часу. Аналогічна картина спостерігається при ввімкненні і вимкненні режиму "тепло". Припустимо , що в даній моделі кондиціонера ввімкнення режиму "холод" здійснюється поворотом регулятора вліво, ввімкнення режиму "тепло" здійснюється поворотом регулятора вправо щодо деякої точки, в якій кондиціонер вимкнений.
Контрольні питання
1. Що таке нечітка та лінгвістична змінні?
 2. Як будуються функції належності?
 3. Які основні блоки структури системи нечіткого виводу?
 4. Які проводиться фазифікація та дефазифікація змінних?
 5. Алгоритми нечіткого логічного висновку.
 


Тема 8.   Основні функції інтелектуальних систем керування складними об’єктами.

Оперативне управління складними обєктами передбачає участь оперативно-диспетчерського персоналу, тобто системи управління є ергатичними системами (людино-машинні системи).Участь оператора у системі управління є особливо актуальною у випадку виникнення проблемних ситуацій.
	Проблемна ситуація – це ситуація, в якій виникає різке протиріччя між запланованим та реальним функціонуванням обєкта управління, а у оператора відсутня інформація про те, що потрібно зробити для ліквідації протиріччя.
	Під ситуацією ми розуміємо передісторію розвитку обєкта, його поточний стан (обстановка) й прогноз про майбутню поведінку обєкта.
	У випадку проблемної ситуації можливі 2 варіанти:
 1). Операторові взагалі невідомо, який спосіб дій вибирати, оскільки дана ситуація не зустрічалася в його досвіді й не передбачалася виробничими інструкціями. В цьому випадку оператор діє на основі аналогій. Аналогія – це судження про часткову схожість подій та обєктів.
2). В розпорядженні оператора є можливість використання певних засобів втручання в процес управління, комбінації яких дають можливість в певній мірі вирішити задачі, що виникли. В таких ситуаціях процес мислення оператора призводить до успішного вирішення задачі чи відкриття нового способу дій, чи до створення комбінацій відомих прийомів, які не використовувались раніше. Ця цілеспрямована діяльність оператора з метою усунення проблемних ситуацій може бути представлена у вигляді множини етапів та фаз управління, в результаті яких здійснюється досягнення загальної цілі управління шляхом забезпечення досягнення окремих підцілей.
	Процес вирішення задач оператором при оперативному диспетчерському управлінні називають – оперативним мисленням, яке є основним ланцюгом в контурі переробки інформації в системі управління.
	В процесі оперативного управління використовують такі функції:
1.	Планування
2.	Контроль
3.	Діагностика
4.	Розробка заходів по усуненню проблемних ситуацій.
Планування – це діяльність по створенню плану функціонування обєкта управління на певний відрізок часу.
Основою цієї діяльності оператора є загальний план, який складається на початку зміни на основі знань режиму роботи обєкта і врахування тих змінювань в обєкті, які повідомляються йому на початку зміни. Впродовж зміни оператор планує свою діяльність на 2-3 години на основі оцінки динамічного стану обєкта і співвідношення результатів цієї оцінки з інформацією про реальний хід процесу.
Контроль – це спеціальна діяльність оператора, яка направлена на забезпечення виконання виробничого плану із спостереженням за всією сукупністю параметрів, що характеризують функціонування обєкта управління.
	Змістом контролю є відображення в памяті людини різних динамічних характеристик обєкта управління, виявлення можливих проблемних ситуацій і встановлення успішності виконання плану.
	Діагностика – процес визначення проблемної ситуації, виявлення причин її виникнення та прогнозування її наслідків, які можуть виникнути при відповідній ситуації.
Модель мислення при оперативному управлінні
Діяльність людини-оператора в  системах управління   орієнтована такими типами функцій:
1. Інтелектуальні.
2. Вольові.
3.Ефекторні.
В інтелектуальних функціях виділяють:
-	Інстинктивні функції (засновані на генетичному несвідомому досвіді);
-	Інтуїтивні функції (на основі особистого неусвідомленого досвіду);
-	Свідомі функції (на основі соціального досвіду);
-	Еврістичні функції (на основі творчого досвіду).
У вольових функціях виділяють:
-	емоційновольові (імпульсні) функції;
-	стереотипновольові (звичайні) функції;
-	усвідомлювальновольові (на основі соціального критерію) функції.
В ефекторних функціях виділяють:
-	командні функції;
-	операційні (використання маніпуляторів);
-	силові функції (виконання фізичної дії).
Інтелектуальні функції оператора базуються на його оперативному мисленні, тобто на його здатності відобразити, встановити шляхом мислення проблемну ситуацію. Потрібно представити її у вигляді певних елементів, привести в дію образи цих елементів та на їх основі створити план майбутніх дій по управлінню.
Якщо ж дії по управлінню однозначно витікають із ситуації і необхідність таких дій жорстко визначена програмою незалежно від складності дій таку діяльність оператора відносять до реактивної. 
Різниця між реакціями і інтелектуальними процесами полягає у якості прийнятих рішень й основою прийнятих рішень в інтелектуальних діях оператора є його модель мислення.
Модель мислення має всю інформацію про дані, що характеризують ОУ, про функції, за допомогою яких перетворюються ці дані, а також інформацію про логічну послідовність здійснення процесів управління. Для цілеспрямованої обробки такої інформації модель мислення використовує індуктивні та дедуктивні механізми.
Індуктивні механізми мислення - це процеси навчання та адаптації. Інформацією для цих механізмів є знання про обєкт та область управління, які зафіксовані документально і можуть передаватися від людини до людини при навчанні.
Дедуктивні механізми мислення – це процеси аналізу та класифікації ситуацій, планування вибору та прийняття рішень, діагностика, тощо.
Інформацією для дедуктивного механізму мислення є відомості про стан обєкта управління, які отримує оператор від засобів представлення інформації.
Як оперативне управління не може існувати без обєкта і системи управління, так і оперативне мислення не може існувати без організації моторних дій шляхом реалізації ефекторних функцій на обєкті управління.
В даному випадку виникає замкнутий контур у якому один з основних ланцюгів є модель мислення оператора. Цей контур реалізовано за такою схемою.

  
Рис.8.1. Інтелектуальна діяльність оператора в управлінні складним обєктом.
Структура процесів оперативного мислення: 
1.	Логіко-часова послідовність регулюючих заходів.
2.	Перелік поточних регулюючих заходів.
3.	Способи усунення різних відхилень.
4.	Перелік моторних реакцій.
5.	Інформація про можливі в обєкті відмови.
6.	Процес планування.
7.	Процес вибору запасних варіантів заходів по усуненню проблемних ситуацій.
8.	Процес рішення задач по усуненню відхилень.
9.	Процес діагностики.
10.	Процес реалізації моторних реакцій.










Рис.8.2. Структура процесів оперативного мислення.
Етапи та фази прийняття рішень при управлінні складними обєктами і застосуванням інтелектуальних систем
Система управління в прийнятті якогось рішення здатна переходити з одного стану в інший, при цих переходах можливе розузгодження між дійсними та бажаними станами системи, який в оперативному мисленні трактується як проблема.
Серед важливих проблем цього роду можна виділити:
-	проблему аналізу стану управління;
-	проблему виробітку рішень по управлінню;
-	проблема прийняття рішень.
Кожна з цих проблем трактується як логічна послідовність етапів, що складаються з окремих фаз, тобто вирішення проблеми розглядається як процес логічних дій розгорнутих у часі. Розглянемо такі етапи:
1.	Етап оцінки стану управління складається з 3-ох фаз:
-	фаза аналізу стану системи;
-	фаза виявлення проблем;
-	фаза виявлення проблемних ситуацій.
На цьому етапі іде накопичення системою управління визначеного обєкта даних про стан системи та зовнішнього середовища, проводиться аналіз з метою виявлення можливих розузгоджень між бажаним та дійсним станом системи. У випадку відсутності таких розузгоджень вважається, що проблеми в управлінні не існує і відпадає норма виробітку і реалізації нових рішень по управлінню або прийняття її рішень, які визначені планом. 
У випадку виявлення розузгоджень проводиться аналіз та виявлення проблеми, а також визначення ситуацій,що відображають виявлену проблему.
2.	Визначення цілей та критеріїв ефективності.
Цей етап складається з 3-ох фаз:
-	фаза визначення критеріїв адекватності;
-	фаза визначення проблемних цілей;
-	фаза формування цільової проблемної ситуації.
У випадку виникнення проблемної ситуації необхідно здійснити уточнення цілей управління в залежності від ситуації, наприклад: встановити пріоритетність цілей, визначити схему згортки критеріїв, сформувати план вирішення проблемної ситуації, і т.п.
3.	Етап виробітку рішення складається з 2-ох фаз:
-	фаза актуалізації людини в системі управління;
-	фаза пошуку рішень.
На цьому етапі визначаються всі можливі способи й шляхи досягнення цілей управління, всі можливі переходи в бажаний стан для даної проблемної ситуації. Особливо важливо  в необхідній мірі  забезпечити повноту множини можливих рішень.
4.	Етап прийняття рішень складається з 3-ох фаз:
-	фаза синтезу рішень;
-	фаза визначення можливих результатів управління;
-	фаза вибору рішень.
Цей етап полягає у виборі із множини можливих рішень найкращого, у розумінні ефективності досягнення цілей, це рішення повинно бути єдиним.
5.	Етап реалізації рішень складається з 2-ох фаз:
-	фаза видачі виконавчих команд;
-	фаза слідкування за  виконанням  рішень.
Модельний базис прийняття рішень по управлінню
	В процесі управління складними обєктами на різних його етапах використовуються такі процедури, виконання яких дозволяє послідовно вирішити такі задачі:
-	визначення стану обєкта і середовища управління (задача спостереження станів);
-	віднесення кожного з станів до одного із заданих видів стану (задача класифікації станів);
-	постановка задачі пошуку рішень у відповідності з цілями в управлінні, які необхідно досягти у кожному із класів станів;
-	задача формування пошуку рішень;
-	вибір пошуку рішень (задача модельної класифікації);
-	пошук рішень для кожного із класів стану (задача пошуку рішень);
-	задачі визначення можливих результатів;
-	оцінка якості рішень при їх організації на обєкті управління;
-	задача обгрунтованості рішень;
-	звуження множини управляючих дій (задача синтезу рішень).
Визначення таких задач передбачає використання певного комплексу моделей, які є основною вищенаведених процедур.
Цей комплекс моделей складається із:


	М1 – комплекс моделей, які знаходяться в програмно-технічному комплексі у вигляді моделей знань, даних і дозволяють  автоматично виявити процедури вирішення вищенаведених задач;
М2 – модель мислення оператора в процесі оперативного управління;
І – інформаційна модель, що відображає стан об´єкта і середовища управління.
Моделі М1 та М2 використовуються для проведення деяких процедур, що дозволяють здійснювати та організовувати процес управління.
Ця послідовність, як правило, має певну структуру такого виду:
“ситуація – ціль – модель – рішення – визначення переважності - реалізація”.
Під ситуацією розуміємо – поточний стан системи, дані про передісторію розвитку об´єкта (ретроспектива), прогноз розвитку об´єкта і та інформація про можливий цільовий стан системи при даних умовах.Така структура забезпечує визначення властивостей ситуації S, цілей Ц, оціночних стандартів О, альтернатив пошуку рішень А. В склад цієї структури входять моделі ситуації Мs , простір стратегій вибору рішень GS (MS), які дають в рамках моделей MS варіанти вибору моделей прийняття рішень у відповідності з цілями управління. Основними процедурами в оперативно-диспетчерському управлінні із застосуванням інтелектуальних механізмів є:
1. Процедура ситуаційної класифікації: вона характеризується таким кортежем : 
φ1 = <S, J, KP, KS >

де S – деяка ситуація, яка задається на множині елементів І (інформаційна модель). До цих елементів можна віднести координати стану об´єкта, цільові координати з урахуванням прогнозу та ретроспектив.
J – множина експертних переваг для вибору правила класифікації, яка визначається за формулою: S * KS (декартовий добуток); KS – множина класів ситуації; Kр – множина алгоритмів класифікації.
		2. Процедура модельної класифікації. Дозволяє визначити ту множину моделей прийняття рішення, за якими можна отримати шляхом обчислення необхідне ефективне рішення. Характеризується таким кортежем:

φ2  = <S, KP, Ar , Мr >
Ar – множина алгоритмів прийняття рішень по управлінню;
Мr  – множина моделей,за якими приймається рішення.

		3. Процедура формування стратегій пошуку рішень. Дозволяє визначити множину локальних чи глобальних цілей управління, які необхідно досягти в даному класі ситуацій:
φ3 = <S, Кц,  Ц, Зк , С >
де Ц – множина цілей, як локальних так і глобальних із зазначенням їх пріоритетності для даного класу ситуацій; Кц  – множина критеріїв досягнення цілей, Зк -згортки критеріїв; С – множина стратегій пошуку цільових рішень.

		4. Процедура пошуку цільових рішень по управлінню: 
φ4 = <S, Мr,  RЦ, С >
де RЦ – множина цільових –управляючих рішень, що можуть бути знайдені у вибраній сукупності моделей пошуку (Мr) рішень, які відповідають  поточній ситуації Si, і належить до множини ситуацій S (Si Є  S) при використанні стратегії Сј Є С.
		5. Процедура визначення можливих результатів рішень:

φ5 = <S, RЦ,  Ц, КР, МД, ОД, RЦ1 >

 де МД – область рішень по управлінню, у відповідності із цілями Ц та критеріями КР для даного рівня прийняття рішеннь ОД  .  RЦ1 – множина управляючих рішень із множини ОД, які можуть бути рекомендовані для реалізації управляючих рішень в даній ситуації.

		6. Процедура синтезу рішень: 

φ5 = <S, RЦ1,  Ц, КР, МОЦ, ООУ, RЦ2 >

де МОЦ - моделі визначення оптимальної області прийняття управляючих рішень; ООУ – область оптимальних рішень по управлінню; RЦ2 – множина управляючих рішень, які задовольняють ООУ, і які можуть бути рекомендовано для реалізації.
 

Контрольні питання
1. Що таке проблемна ситуація? 
2. Які функції використовуються в процесі оперативного управління?
3. Що таке модель мислення при оперативному управління?
4. Які механізми задієні при оперативному управлінні?
5. Чим визначається структура процесів оперативного мислення?
6. Етапи та фази прийняття рішень при управлінні із застосуванням інтелектуальних механізмів.
7. В чому полягає модельний базис прийняття рішень по управлінню?

Тема 9. Прийняття рішень в інтелектуальних системах керування.

Характер пошуку необхідних знань в базі знань, спосіб організації виведення рішень визначається стратегією управління ІС.
	Стратегія управління являє собою засіб, що використовує судження і здійснює висновки про знання, які є в базі знань. Стратегії управління забезпечують управління ІС в рамках прийнятої для даної системи схеми механізму виведення.
	Існують такі механізми виведення:
-	за зразками;
-	на основі дошки оголошень;
-	методами перебору: ( пошук в глибину, пошук в ширину, на основі вартості дуг, пошук з поверненням (бектрекінг));
-	еврістичні методи.
Методи пошуку за зразками.
Зразки – це формати, що визначають умови активізації різних структурованих знань.
На кожній ітерації відбувається аналіз і співставлення поточної ситуації і зразків з метою знаходження блоків, для яких виконуються умови активізації для даної ситуації.
Процедури співставлення зі зразками і визначення правил, що відповідають поточному стану об´єкта визначені самою логікою роботи інтерпретатора правил. Весь процес реалізації стратегії виведення проходить через чотири основних стадії: вибір співставлення, розв´язання конфліктів та виконання. На стадії вибору вибираються модулі БЗ та дані з робочої пам´яті.
Пошук рішень неформалізованих задач (НФЗ) в просторі стану відображується за допомогою семантичного графа, названого деревом варіантів рішень.
  	Процедура пошуку рішення НФЗ в просторі станів може бути сформульована таким чином. Задана трійка (S0, F, S1), де S0 - множина початкових станів (умови задачі); F - множина операторів задачі, що перетворюють одні стани в інші; S1- множина кінцевих (цільових) станів (рішень задачі). В цій постановці вирішити НФЗ -значить визначити таку послідовність операторів, яка перетворить початкові стани в кінцеві. Процедуру розв'язання можна представити у виді графа G=(X,Y), де G = {x0, x1, …} -множина (в загальному випадку нескінченна) вершин графа, кожна з яких відображує один із станів; Y -множина дуг, інцидентних парі вершин (xi, xj);  xi,  xj  X.
  	Множина дуг, що витікають з вершини xі , відображує множину операторів, які можуть бути застосовані до стану, що відображається вершиною xі . В множині вершин Х виділяють підмножину вершин Х0   Х, відображувало множину початкових станів (S0), і підмножину вершин Х1   Х, що відображує множину кінцевих (цільових) станів (S1). Множина  Х1, може бути задана як явно, так і неявно, топто через властивості, якими повинні володіти цільові стани.
  	Очевидно, що рішеня НФЗ методом пошуку в просторі станів зводиться до процедури пошуку шляху L в графі G. Шлях з х0  Є Х0, до х1  Є Х1., називають вирішальним (цільовим). Часто зручно приписувати дугам графа певну вагу, яка рівна вартості застосування відповідних операторів. Для позначення ваги «с» дуги, направленої з xi в xj , використовують запис: з (xi, xj). Вартість шляху між двома вершинами визначається як сума вартостей всіх дуг даної колії. У ряді додатків виникає задача знаходження шляхів (шляху), мають мінімальну вартість, між будь-якими елементами з множини Х0 і будь-якими елементами з множини Х1. Відзначимо, що граф G може бути заданий як в явному вигляді (експлицітно), так і в неявному (імплицітно). Неявне завдання графа G полягає у визначенні множини Х0  і множини операторів, які, будучи застосовні до деякої вершини i рафа, породжують всі її вершини-нащадки.
 	 Отже, граф G відображував простір станів, тобто простір, в якому відбувається пошук рішення НФЗ. Побудова простору здійснюється за допомогою наступної операції. До деякої вершини з х0  Є Х0  застосовують всі можливі оператори, всі її вершини-нащадки, що породжують. Породження всіх вершин-нащадків для деякої вершини хі називають операцією розкриття вершин. Якщо отримана цільова вершина, то вона не розкривається. Операція побудови простору станів закінчується, коли всі нерозкриті вершини є цільовими, або термінальними (тобто вершинами, до яких не можна застосувати ніяких  операторів).   Оскільки   простір станів   може містити нескінченне число вершин, операцію породження простору станів oбмежують або часом, або об'ємом пам'ять ЕОМ.
  	Практично при розв'язанні НФЗ необхідно забезпечити повноту пошуку, тобто організувати пошук так, щоб всі цільові вершини були знайдені, якщо вони існують. Надійним способом забезпеченні повноти є повний впорядкований перебір всіх вершин графа. Для кожної операції впорядкованого перебору необхідно визначити порядок, в якому будуть перебиратися вершини графа. Звичайно виділяють два основні способи перебору вершин: пошук «в глибину» (або «одностороннім обходом») і пошук «в ширину» (або «полним (фронтом»).
  	При пошуку «в глибину» спочатку розкривається та вершина, яка була побудована самою останньою. Глибина вершини в графі визначається таким чином: 1) глибина вершини-кореня рівна нулю; 2) глибина проміжної вершини рівна одиниці плюс глибина найбільш близької вершини-предка. При практичній реалізації пошук «в глубину» в деякому напрямі завершується в наступних випадках: 1) досягши цільової вершини; 2) досягши термінальної вершини; 3) при побудові в ході пошуку вершини, глибина якої перевищує деяку граничну глибину.
  	При пошуку «в ширину» вершини розкриваються в тому ж порядку, в якому породжуються. Якщо  в просторі станів ввести оператори, що переводять стан Sі, в попередній стан Sі-1, то пошук можна здійснювати як у напрямі від початкового стану (від початкових даних) до цільового, так і у зворотному напрямі. Стратегію пошуку «від початкових даних до цілі» називають «прямим пошуком», а стратегію пошуку «від цілі до данних» - «зворотнім пошуком». Більш  того, можна організувати пошук в обох напрямах одночасно. Таку стратегію називають двонаправленою.
  На рис.9.1 для графа типу «АБО» приведений приклад пошуку рішення задачі способом «в глибину» (рис.9.1, а) і «в ширину» (рис.9.1, б). Вершини пронумеровані в тому порядку, в якому вони розкриваються; цільові вершини помічені заштрихованими квадратами, термінальні - білими квадратами. При використанні кожного із способів можуть бути знайдені всі рішення НФЗ. При переборі всього простору обидва способи будуть аналізувати однакове число вершин, проте спосіб пошуку «в ширину» буде вимагати істотно більше пам'яті, оскільки він ураховує всі шляху пошуку (а не один, як при пошуку «в глибину»).
  Для пошуку ріщень НФЗ на «ТА/АБО» графі, як і для пошуку в просторі станів, можна застосовувати пошук «в глибину» і пошук «в ширину» як в «прямому», так і в «зворотньому» напрямі.
На рис.6. 2. наведений приклад пошуку «в ширину» і «в глибину». Всі вершини пронумеровані в тому порядку, в якому вони розкриваються; кінцеві вершини позначені подвійними заштрихованими кружками, вирішувані вершини зачорнені, дуги вирішального графа виділенi подвійними лініями.
  	Пошук «в глубину» і «ширину» називають рутинним, або сліпим пошуком, оскільки при цьому порядок розкриття вершин передбачуваним і не залежить від розташування ланцюга. При збільшенні простору пошуку способи сліпого пошуку вимагають надмірних витрат часу ТА/АБО пам'яті ЕОМ.
 
 

Рис.9.1. Процедура пошуку на дереві варіантів рішень способом «в глибину» (а) і «в ширину» (б)

  	Для скорочення часу пошуку застосовують евристичні методи пошуку, тобто методи, що використовують деяку інформацію про предметну галузь для розгляду не всього простору пошуку, а таких раціональних шляхів в ньому, які з щонайбільшою вірогідністю приводять до цілі. Один із способів скорочення   перебору полягає у  виборі більш «ипформованого оператора, який не породжує так багато вершин, що не відносяться до розв'язання НФ3.

 
           

Рис.9.2. Процедура пошуку розв'язання неформалізованої задачі з використанням принципу декомпозиції задачі на підзадачі способом «в ширину» (а) і «в глибину» (б)

 	 Інший спосіб полягає в використанні еврістичної інформації для визначення на кожному кроці подальшого напрямку перебору. Для цього необхідно ввести міру «перспективності» вершини у вигляді деякої оцінночної функції. В деяких випадках вдається ввести таку оціночну функцію, що вона, скорочуючи перебір, не втрачає властивості повноти.  Як правило, оціночні функції намагаються кількісно оцінити відстань від поточної вершини до кінцевої. Із двух вершин при однаковій глибині «перспективніша» та, від якої менша відстань до цілі. Необхідно відмітити, що застосування оціночних функцій не завжди  підвищує ефективність процедури пошуку.
Існує два типових способи включення еврістичної інформації у пошукову структуру:
■ за   допомогою   еврістичної   функції,   яка   "визначає   вагу"   тверджень конкретної задачі і визначає їх відносну значущість;
■ безпосередньо розмістивши еврістичну інформацію у правила інтелектуальної системи.
Є декілька варіантів використання еврістичної функції.
Одна із стратегій полягає у тому, що за допомогою такої функції вибирається найкращий крок і перевіряються у той же спосіб (використовуючи функцію) всі його наслідки, перед тим як здійснити інші кроки. У випадку тупика потрібно повернутися до найближчого розгалуження та спробувати здійснити інший найкращий крок. Тобто спо-чатку перевіряються всі наслідки одного вибору на всю можливу гли¬бину, і тільки потім відбувається черговий вибір. Суттєвим недоліком такої стратегії є те, що для здійснення вибору використовується тільки локальна інформація.
Інший варіант еврістичного пошуку, що об'єднує у собі позитивні риси пошуку у глибину та ширину є пошук під назвою Кращий перший крок. На кожній стадії пошуку досліджується деяка кількість варіантів вибору, і оціночна функція обчислюється для їх кінцевого стану. У Кращому першому кроці пошук продовжується від досягнутого кінцевого стану, що має найкращу оціночну функцію уверх до цього місця. При такій стратегії часто відбуваються стрибки від кінця одного варіанту вибору до іншого, намагаючись завжди пра¬цювати з тим, що є найбільш перспективним. Цей метод досить ефек¬тивний, але тривалі обчислення і великий обсяг обліку (всі частинні варіанти вибору (шляхи) повинні постійно підтримуватися) приму¬шують часто використовувати більш просту процедуру, яка швидко перевіряє багато розв'язків. Ефективна стратегія пошуку жорстко за¬лежить від предметної області, ефективність евристичного пошуку ви¬значається оціночною функцією, що використовується.
Вивід в умовах невизначеності
Для багатьох реальних задач потрібно провести оцінку гіпотез, для яких інформація є неповною або недостатньою. Експертні систе¬ми, що призначені для розв'язування таких задач, повинні, незважаю¬чи на невизначеність, приймати необхідні рішення.
Міркування, що базуються на невизначеності, використовуються у всіх EC медичної діагностики і консультацій по способам лікування. Те ж саме маємо і у системах спостереження за наявності одночасно декількох конкуруючих гіпотез та їх постійної переоцінки при надхо¬дженні нових даних: у кінцевому підсумку визначається одна гіпотеза, яка дозволяє здійснити відповідний висновок. У системах розпізнання природної мови теж мають бути конкуруючі гіпотези, наприклад, про те, яке конкретне слово використовується у реченні.
Окрім того, багато програм, що використовують еврістики, теж повинні працювати в умовах невизначеності, так як евристика - на-ближений метод, що вказує напрям пошуку. Якщо існує тільки одна евристика, то проблем немає. А якщо два евристичних методи орієн¬тують програму у двох різних напрямках? Або якщо дві евристики вказують один і той же напрямок пошуку, чи має це викликати більшу довіру, ніж би була тільки одна із них?
Тому при виводі в умовах невизначеності природним є викорис¬тання понять теорії ймовірності: умовної ймовірності, правила Байєса, правила та/або, правила композиції, тощо.
  
Контрольні питання
1. Що таке стратегія управління? 
2.Які існують механізми виведення?
3. В чому полягає метод пошуку за зразками?
4. В чому полягає метод пошуку “в ширину”?
5. В чому полягає метод пошуку “в глибину”?
6. Еврістичні алгоритми пошуку рішень.

Тема 10. Задачі планування в  інтелектуальних системах керування

Не викликає сумніву необхідність застосування різних видів моделей на виробництві та в економіці. Особливо ефективним є застосування моделювання на ранніх етапах проектування систем, коли потрібно мінімізувати можливі помилки на наступних етапах виробництва. З ростом можливостей обчислювальної техніки  і жорсткістю вимог до точності математичних моделей, необхідністю враховувати все більшу і більшу кількість факторів, характерних для реальних систем, збільшується і складність використовуваних моделей, потрібних при вивченні даних систем. Традиційний підхід до ідентифікації таких моделей має на увазі наявність параметризованої математичної функції, яка не завжди ґрунтується на знанні про процеси, що протікають в об'єкті моделювання. Однак для широкого кола інженерних задач частина інформації про об'єкт моделювання може бути отримана тільки від людини. Такі знання часто не можуть бути виражені в термінах класичної математики, так як представляють вербальне судження про властивості об'єкта. Труднощі, з якими стикаються традиційні методи при синтезі моделей таких систем, породили інтерес до інтелектуальних методів моделювання. Останнім часом відбувається бурхливий розвиток нечіткого моделювання, що обумовлено здатністю апарату теорії нечітких множин інтегрувати в модель якісні знання людини у вигляді нечітких лінгвістичних правил. Однією з важливих проблем, яку необхідно вирішити в процесі синтезу нечіткої моделі, є ідентифікація параметрів функцій належності нечітких множин та нечітких лінгвістичних правил моделі. Рішення даного завдання ускладнюється високою розмірністю, неповнотою і неточністю експериментальних даних, а також необхідністю комбінації експериментальних і апріорних даних.
 . 	Ускладнення реально функціонуючих систем і підвищення вимог до вирішення завдань управління обумовлюють розвиток теорії математичного моделювання, в рамках якої використовуються формальні процедури, що враховують неоднорідність інформації, багатокритеріальність, динаміку показників якості та ефективності, а також фактори невизначеності, що має не тільки стохастичний характер, але і характер нечіткості. Вибір виду моделі складної системи і використовуваний в рамках математичного моделювання апарат значною мірою залежать саме від якості інформації та типу невизначеності. Методологія нечіткого моделювання, орієнтована на нечіткість інформації, її наближений характер, а також експертний спосіб формування, вже в достатній мірі зарекомендувала себе у всіляких додатках. Доцільність використання нечіткого підходу обумовлюється однієї з наступних ситуацій: або система настільки складна, що її математичну модель в традиційному розумінні побудувати неможливо, або модель є, але для її «обрахунку» потрібні значні ресурси. Нечіткі моделі, побудовані за принципом «сірого ящика», по суті, являють собою моделі реальних систем з певною множиною вхідних і вихідних змінних, для формалізації яких використовується лінгвістичний підхід, а залежність «виходу» від «входів» описується на якісному рівні в формі умовних висловлювань - продукційних правил. Такі моделі також називаються нечіткими системами (НС), а найпростіші з них реалізовані в пакетах MatLab і Fuzzy Tech. НС є універсальними аппроксіматорами і реалізуються як експертні системи (ЕС), а до їх основних компонентів відносяться база знань і механізм нечіткого логічного висновку. НС з прямим логічним висновком дозволяє за заданим значенням вхідних змінних визначити значення вихідної змінної, а система зі зворотним висновком вирішує зворотну задачу визначення значень вхідних змінних за заданим значенням вихідної. Відомо, що точність апроксимації на основі НС з прямим логічним висновком залежить від вибору функціонального уявлення нечітких логічних зв'язок, операцій агрегування і дефазифікації.  
Зауважимо, що моделювання складної системи в формі НС не вимагає знання структури системи. Однак в задачах, пов'язаних з оцінкою якості функціонування системи, що складається з ряду підсистем, або в задачі оцінювання ступеня досягнень цілей, які взаємодіють, наприклад, на основі дерева цілей, нечітка модель повинна враховувати структуру системи. В цьому випадку інструментом моделювання є апарат нечіткої логіки та, зокрема, одне з його основних понять - функція нечітких змінних.  
Таким чином,   нечітке моделювання складних систем дозволяє вирішувати найважливіші прикладні завдання (моделювання, управління, прогнозування, діагностики та ін.).
Нечітка система - це система, для опису якої використовується апарат теорії нечітких множин та нечітка логіка. Існують наступні способи такого опису:
- нечітка специфікація параметрів системи (функціонування системи може бути описано алгебраїчним або диференціальним рівнянням, в якому параметри є нечіткими числами);
- нечіткий (лінгвістичний) опис вхідних та вихідних змінних системи, що обумовлено неточною інформацією, одержуваної від ненадійних датчиків, або якісною інформацією, одержуваної від експерта;
- нечіткий опис системи у вигляді сукупності нечітких правил, що відображають особливості функціонування на якісному рівні.
Нечітка система може мати одночасно всі перераховані атрибути. Нечіткі системи використовуються для моделювання, аналізу даних, прогнозу або управління.
Нечіткі правила - це нечіткі продукційні правила, які при фіксованій цілі управління (наприклад, збереження значень керованого параметра в деякій області допустимих значень) описують його стратегії на якісному рівні. 
Розглянемо основні прийоми та засоби нечіткого моделювання систем.  
 Операції з нечіткою логікою у пакеті MATLAB дозволяє виконувати модуль Fuzzy Logic Toolbox. Він дозволяє створювати системи нечіткого логічного виведення і нечіткої класифікації в рамках середовища MatLab, з можливістю їхнього інтегрування в Simulink.
Fuzzy Logic Toolbox містить наступні категорії програмних інструментів: функції; інтерактивні модулі з графічним користувальницьким інтерфейсом (GUI); блоки для пакета Simulink; демонстраційні приклади.
Базовим поняттям Fuzzy Logic Toolbox є FIS-структура – система нечіткого виведення (Fuzzy Inference System). FIS-структура містить всі необхідні дані для реалізації функціонального відображення “входи-виходи” на основі нечіткого логічного виведення відповідно до схеми, приведеної на рисунку 10.1.


 
Рис. 10.1. FIS-структура – система нечіткого виведення (Fuzzy Inference System).

Система нечіткого логічного виведення представляється в робочій області MatLab у вигляді структури даних, зображеної на рис.12.2.
Існує два способи завантаження FIS у робочу область: зчитування з диска за допомогою функції readfis; передача з основного fis-редактора шляхом вибору в меню File підміню Export і команди To workspace.
Поля структури дані системи нечіткого логічного виведення призначені для збереження наступної інформації:
-     name – найменування системи нечіткого логічного виведення;
-     type – тип системи (припустимі значення 'Mamdani' та 'Sugeno');
-     andMethod – реалізація логічної операції "ТА" (запрограмовані реалізації: 'min' – мінімум і 'prod' – множення);
-     orMethod – реалізація логічної операції "АБО" (запрограмовані реалізації: 'max' – максимум і 'probor' – імовірнісне "АБО");
-     defuzzMethod – метод дефазифікації (запрограмовані методи для систем типу Мамдані: 'centroid' – центр ваги; 'bisector' – медіана; 'lom' – найбільший з максимумів; 'som' – найменший з максимумів; 'mom' – середнє з максимумів; запрограмовані методи для систем типу Сугено: 'wtaver' – зважене середнє і 'wtsum' – зважена сума);
-     impMethod – реалізація операції імплікації (запрограмовані реалізації: 'min' – мінімум і 'prod' – множення);
-     aggMethod – реалізація операції об'єднання функцій належності вихідної змінної (запрограмовані реалізації: 'max' – максимум; 'sum' – сума і'probor' – імовірнісне "АБО");
-     input – масив вхідних змінних;
-     input.name – найменування вхідної змінної;
-     input.range – діапазон зміни  вхідної змінної;
-     input.mf – масив функцій належності вхідної змінної;
-     input.mf.name – найменування функції належності вхідної змінної;
-     input.mf.type – модель функції належності вхідної змінної (запрограмовані моделі: dsigmf – функція належності у виді різниці між двома сигмоїдними функціями; gauss2mf – двостороння гаусівська функція належності; gaussmf – гаусівська функція належності; gbellmf – узагальнена дзвоноподібна функція належності; pimf – пі-подібна функція належності; psigmf – добуток двох сигмоїдних функцій належності; sigmf – сигмоїдна функція належності; smf – s-подібна функція належності; trapmf – трапецієподібна функція належності; trimf – трикутна функція належності; zmf – z-подібна функція належності);
-     input.mf.params – масив параметрів функції належності вхідної змінної;
-     output – масив вихідних змінних;
-     output.name – найменування вихідної змінної;
-     output.range – діапазон зміни вихідної змінної;
-     output.mf – масив функцій належності вихідної змінної;
-     output.mf.name – найменування функції належності вихідної змінної;
-     output.mf.type – модель функції належності вихідної змінної (запрограмовані моделі для системи типу Мамдані: dsigmf – функція належності у виді різниці між двома сигмоїдними функціями; gauss2mf – двостороння гаусівська функція належності; gaussmf – гаусівська функція приналежності;gbellmf – узагальнена колоколообразна функція належності; pimf – пі-подібна функція належності; psigmf – добуток двох сигмоїдних функцій належності; запрограмовані моделі для системи типу Сугено: constatnt – константа (функція належності у виді сінглтона); linear – лінійна комбінація вхідних змінних);
-     output.mf.params – масив параметрів функції належності вихідної змінної;
-     rule – масив правил нечіткої бази знань;
-     rule.antecedent – посилки правила (вказуються порядкові номери термів у порядку запису вхідних змінних. Число 0 указує на те, що значення відповідної вхідний змінної не впливає на істинність правила);
-     rule.consequent – висновок правила (вказуються порядкові номери термів у порядку запису вихідних змінних. Число 0 указує на те, що правило не поширюється на відповідну вихідну змінну);
-     rule.weight – вага правила. Задається числом з діапазону [0, 1];
-     rule.connection – логічне зв'язування змінних усередині правила: 1 – логічне "ТА"; 2 – логічне "АБО".
Для доступу до властивостей системи нечіткого логічного виведення досить вказати ім’я відповідного поля. Наприклад, команда FIS_NAME.rule(1).weight=0.5 встановлює вагу першого правила в 0.5, команда length(FIS_NAME.rule) визначає кількість правил у базі знань, а команда FIS_NAME.input(1).mf(1).name='низький' перейменовує перший терм першої вхідної змінної в “низький”.
 Алгоритми нечіткого виводу розрізняються головним чином видом використовуваних правил, логічних операцій і різновидом методу дефазифікації. Розроблені моделі нечіткого виведення Мамдані, Сугено, Ларсена, Цукамото. В загальному випадку логічний вивід здійснюється за чотири етапи: 
1. Нечіткість (фазифікація, fuzzification). Функції належності, визначені для вхідних змінних, застосовується до їх фактичних значень для визначення міри істинності кожної передумови кожного правила).
 2. Логічний вивід. Вичислене значення істинності для передумов кожного правила застосовується до висновків кожного правила. Це призводить до однієї нечіткої підмножини, яка буде призначена змінній виводу для кожного правила. В якості правил логічного виводу зазвичай використовуються операції min (мінімуму) або prod (множення). 
3. Композиція. Нечіткі підмножини, призначені для кожної змінної виводу (в усіх правилах), об'єднуються разом, щоб сформувати одну нечітку підмножину для кожної змінної виводу. При подібному об'єднанні зазвичай використовуються операції max (максимум) або sum (сума).
 4. Дефазифікація - приведення до чіткості (defuzzification). Перетворення нечіткого набору виводів в число. Процедура дефазифікації аналогічна знаходження характеристик положення (математичного очікування, моди, медіани) випадкових величин в теорії вірогідності. Простим способом виконання процедури дефазифікації являється вибір чіткого числа, відповідного максимуму функції належності. Проте придатність цього способу обмежується лише одноекстремальними функціями належності. Для дефазифікації багатоекстремальних функцій належності Fuzzy Logic Toolbox використовує п'ять вбудованих методів: centroid (координата - абсциса - центру тяжіння фігури під кривою), bisector (координата - абсциса – що поділяє площу фігури під кривою навпіл), mom (mean of the maximum - середина інтервалу максимальних значень ), lom (largest of maximum - верхня межа інтервалу максимальних значень) і som (smallest of maximum - нижня межа інтервалу максимальниз значень).
  У складі Matlab є п'ять основних засобів графічного інтерфейсу користувача (ГІК). які забезпечують доступ до інструментів нечіткої логіки (ІНЛ): редактори системи нечіткого виводу (СНВ), функції належності, правил виводу, а також засоби перегляду правил і поверхні виводу. Ці засоби пов'язані між собою динамічно і зроблені зміни в одному з них тягнуть зміни в інших. 

 
Рис.10.2. Система нечіткого логічного виведення в робочій області MatLab

Редактор СНВ (FIS-редактор) призначений для створення, збереження, завантаження і виведення у друк, систем нечіткого логічного виводу, а також для редагування наступних властивостей: тип системи; найменування системи; кількість вхідних і вихідних змінних; найменування вхідних і вихідних змінних; параметри нечіткого логічного виводу.
 	FIS-редактор містить 8 меню. Це три загальносистемних меню - File, Edit, View, і п'ять меню для вибору параметрів нечіткого логічного виводу – And Method, Or Method, Implication, Aggregation і Defuzzification.
 Меню File - це загальне меню для всіх GUI-модулів використовуваних із системами нечіткого логічного виводу. 
За допомогою команди New FIS... користувач має можливість створити нову систему нечіткого логічного виведення. При виборі цієї команди з'являться дві альтернативи: Mamdani і Sugeno, що визначають тип створюваної системи. 
Команда Add Variable... дозволяє додати в систему нечіткого логічного виведення ще одну змінну. При виборі цієї команди з'являться дві альтернативи Input і Output, що дозволяють додати вхідну і вихідну змінну, відповідно.
 Команда Remove Selected Variable видаляє поточну змінну із системи. Ознакою поточної змінної є червона окантовка її прямокутника. Призначення поточної змінної відбувається за допомогою  лівої кнопки миші по її прямокутнику. Видалити поточну змінну можна також за допомогою натискання Ctrl+X. 
Команда Membership Function... відкриває редактор функцій належності. Ця команда може бути також виконана натисканням Ctrl+2. 
  Команда Rules…відкриває редактор бази знань. Ця команда може бути також виконана натисканням Ctrl+3.
 Для того, щоб додати нову змінну, необхідно вибрати в меню Edit відповідний пункт (для вхідної змінної – Add input, для вихідної - Add output). Зміна найменування змінної відбувається по кроках: 
 Крок 1. Відзначається змінна, яку необхідно перейменувати.
  	 Крок 2. У полі редагування змінюється найменування змінної за умовчанням на ім'я, яке запропоноване користувачем.
 Збереження проектованої системи в робочий простір середовища Matlab здійснюється з допомогою пункту меню file - Save to workspace as. В цьому випадку дані зберігаються до закінчення сеансу роботи з Matlab. Для збереження даних на диску після закінчення сеансу роботи застосовується відповідний пункт того ж меню - Save to disk as. 
Редактор функцій належності (Membership Function Editor). Наступним кроком в побудові нечіткої моделі засобами ІНЛ є асоціювання набору функцій належності  з кожною вхідною і вихідною змінною. Ця операція виконується у редакторі функцій належності  трьома способами, активізувати які можна: 
1. вибором в меню View пункту Edit Membership Functions.. 
2. подвійним клацанням миші на зображенні відповідної змінної (вхідної або вихідної); 
3. набором в командному рядку оператора mfedit. 
За допомогою редактора функцій належності  можна відображувати і редагувати будь-які функції належності, що асоціюються (пов'язані) з усіма вхідними і вихідними змінними СНВ. Зв'язування функцій належності  з ім'ям змінної відбувається наступним чином: 
1. вибирається змінна по імені з набору графічних об'єктів вікна редактора функцій належності : 
2. вказується діапазон зміни значень для базової і видимий діапазон для поточних змінних: у меню Edit вибирається пункт AddMFs. У вікні, що з'явилося, вибирають вид функцій належності  і їх кількість. 
Редагують функції належності  поточної змінної двома способами: використовуючи графічне вікно функцій належності  або змінюючи характеристики функцій належності  (найменування, тип і числові параметри).
 Редактор функцій належності містить чотири меню - File, Edit, View, Type і чотири вікна введення інформації – Range, Display Range, Name і Params. Ці чотири вікна призначені для завдання діапазону зміни поточної змінної, діапазону виведення функцій належності, найменування поточного лінгвістичного терму і параметрів його функції належності, відповідно. Параметри функції належності можна підбирати й у графічному режимі, шляхом зміни форми функції належності за допомогою технології “Drug and drop”. Для цього необхідно позиціонувати курсор миші на знаку режиму “Drug and drop”, натиснути на ліву кнопку миші і не відпускаючи її змінювати форму функції належності. Параметри функції належності будуть перераховуватися автоматично. Таким чином, при побудові СНВ необхідно за допомогою редактора функцій належності  визначити відповідні функції для кожної з вхідних і вихідних змінних. 
Редактор правил виводу (Rule Editor). Після того, як вказано кількість вхідних і вихідних змінних, визначені їх найменування та побудовані відповідні функції належності, в СНВ необхідно включити правила виводу. Для цього в меню View вибирається пункт Edit Rules.. або в командному рядку Matlab набирається команда ruleedit.
  Засіб перегляду правил виводу використовується в цілях діагностики і може показувати, наприклад, активність правил або форму впливу окремих функцій належності  на результат нечіткого виводу. Ґрунтуючись на описах вхідних і вихідних змінних, визначених в редакторі функцій належності, редактор правил виводу формує структуру правил автоматично. Від користувача вимагається лише зв'язати значення вхідних і вихідних змінних, вибираючи із списку функцій належності  заданих раніше та визначити логічні зв'язки між ними. Також допускається використання логічного заперечення (НЕ) і зміна ваг правил в діапазоні від 0 до 1. Правила виводу можуть відображуватися у вікні в різних форматах, які визначаються шляхом вибору відповідного пункту підменю Format меню Options. За умовчанням використовується розширений формат відображення правил виводу (verbose form) : 
if (input_lis[not]mf_1j1,) ... 
(input_i is [not]mf_ij1)... 
(input_n is [not]mf_njn)then 
(output_1 is[notJmf_n+ jn+1)... 
(output_k is[not]mf_ k+ njk + n) ... 
(output_m i s [ n o t ) m f _ m +njm + n ) ( w ),
 де i - номер вхідної змінної;
 j - номер ФП i -ої змінної;
 k - номер вихідної змінної; 
n - кількість вхідних змінних;
 m - кількість вихідних змінних; 
w - вага правила.
 Після визначення правил виводу в однойменному редакторі можна стверджувати, що СНВ повністю створена.
 	У зв‘язку з поширенням модельного підходу при дослідженні систем апарат мереж Петрі (PN) все частіше використовується при моделюванні паралельних, асинхронних, розподілених, недетермінованих та інших типів систем. Моделювання це не тільки конструювання об‘єкта, а й метод його пізнання, тому важливо при підборі засобів моделювання враховувати дану важливу компоненту. Саме для цього при розв‘язанні прикладних задач мережі Петрі надають можливість побудови структури моделі, відображення основних характеристик, імітації функціонування моделі та перевірки моделі на критичні властивості. Наочність подання та імітування роботи моделі, аналітичний опис та визначені критичні властивості дозволяють значно ефективніше проводити аналіз побудованих моделей . Різноманітність задач, для моделювання яких застосовуються мережі Петрі, викликала розробку численних інтерпретацій та модифікацій даних мереж. Більше чотирьох десятиліть при моделюванні апаратних пристроїв у прикладних дослідженнях та техніці, процесів життєдіяльності у біології та медицині, інформаційних та управляючих потоків у програмних системах та багато інших, класи мереж Петрі набули характерних властивостей для відображення реальних процесів у спеціалізованих системах. Модельовані системи та процеси, що в них відбуваються, характеризуються різною складністю та потребують специфічних форм відображення властивостей, внаслідок чого приводять до побудови моделей специфічних за своєю структурою і рівнем деталізації. При аналізі прикладних моделей класична теорія мереж Петрі не завжди дає відповіді на всі питання, які цікавлять розробника, що викликає необхідність створення багатьох видів мереж Петрі. Створені види мереж можна згрупувати у класи – інтерпретації та підкласи – модифікації, які відображають особливості побудови та дослідження моделей, що є корисним при обранні апарату реалізації конкретної моделі.
На сьогоднішній день сформовані загальні структурні і функціональні елементи інтерпретацій мереж Петрі (PN), чітко визначені правила побудови і відпрацювання цих інтерпретацій. Інтерпретацією мережі Петрі називається визначений набір понять і правил, в основі яких лежить принцип побудови розмічених графів, що складаються з двох типів вершин – вершин місць T = {ti} та вершин переходів P = {pε} – з‘єднаних між собою направленими дугами K = {kq} за певними функціональними правилами S. У загальному випадку мережі Петрі PN = (P, T, K, S) мають структурні (P, T, K) та функціональні (S) елементи.
Актуальним є розроблення методів дослідження функціонування систем керування технологічними процесами в умовах невизначеності з використанням мереж Петрі . При цьому необхідно врахувати такі фактори: наявність великої кількості підсистем зі складними взаємними зв'язками; асинхронність функціонування елементів системи; нечіткий характер поводження окремих підсистем, змінних і їхніх характеристик. Перспективним засобом моделювання невизначеності поводження систем стало подальше розширення мереж Петрі, засноване на теорії нечітких множин. Прийнято кілька підходів. По-перше, необхідно враховувати невизначеність у кількості міток у позиціях мережі. Другий підхід – використовувати систему продукційного нечіткого висновку при спрацьовуванні переходів, а також нечіткість матриці динаміки спрацьовування й тривалості циклів nj,k  спрацьовування переходів у часових мереж Петрі. В процесі моделювання за допомогою  мереж Петрі інколи доводиться описувати стан, настання якого не прогнозоване. У класичних мереж Петрі  спрацьовування переходу залежить від того, чи вірна умова чи ні. Але інколи необхідна мережа Петрі, здатна працювати з невизначеними величинами («малий», «великий», …), – нечітка мережа Петрі. Нижче розглянуті структури мереж Петрі із невизначеністю і схема породження конкретних підкласів нечітких мереж Петрі, що використовують поняття математичної структури просторів з нечіткою мірою. Додаткове включення в схему породження класів математичних структур  мереж Петрі  із невизначеністю концепції нечіткої міри дозволяє істотно збагатити одержувані при цьому моделі нечітких мереж Петрі, збільшити їхні моделюючі можливості й підвищити адекватність при вирішенні практичних завдань. В основу систематизації класів нечітких мереж Петрі із невизначеністю покладена концепція породження конкретних математичних структур детермінованих  мереж Петрі  шляхом введення в їхні компоненти різних видів невизначеності. Для ілюстрації цієї ідеї розглянемо схему породження різних класів нечітких мереж Петрі із невизначеністю, утворених з базової математичної структури класу часових мереж Петрі.    При вивченні підкласів нечітких мереж Петрі  основна увага приділяється не стільки теоретичному аналізу відзначених властивостей нечітких мереж Петрі, скільки аналізу конкретних нечітких моделей, побудованих на їхній основі. Нижче розглядаються деякі конкретні особливості побудови нечітких моделей на основі підкласів нечітких мереж Петрі  і інтерпретація їхніх властивостей з урахуванням специфіки тієї або іншої проблемної області. Використання нечітких мереж Петрі для подання правил нечітких продукцій. При розв’язанні прикладних завдань нечіткого моделювання використовуються модифіковані нечіткі мережі Петрі. Одним з найбільш відомих додатків нечітких мереж Петрі є їхнє використання для наочного подання правил нечітких продукцій і виконання на цій основі нечітких висновків. У цьому випадку використовується наступна інтерпретація позицій і переходів нечіткої мережі Петрі. Правило нечіткої продукції вигляду «ПРАВИЛО i: ЯКЩО A, ТO B» представляється як деякий перехід, при цьому умові A цього правила відповідає вхідна позиція рi  цього переходу vi , а висновку –вихідна позиція pk цього переходу vj. Якщо умова правила нечіткої продукції складається з декількох підумов, з'єднаних операцією нечіткої кон’юнкції, то всі ці підумови представляються як вхідні позиції відповідного переходу. Якщо висновок правила нечіткої продукції складається з декількох підзаключень, з'єднаних операцією нечіткої кон’юнкції β=β1Λβ2...…Λβ1, то всі ці підзаключення також представляються як вихідні позиції відповідного переходу. Більш складний випадок відповідає диз'юнкції підумов і підзаключень.
Коротко розглянемо окремі результати в області теорії і практики застосування нечітких мереж Петрі.   Ці розробки орієнтовані на вирішення актуальних проблем дослідження нечітких правил в базах знань. Запропоновано підходи до побудови моделей на основі нечіткої логіки та мереж Петрі. Робота являє деякі можливі шляхи побудови нечітких моделей. Дослідження носять більш загальний і глибокий характер, але присвячені переважно спеціальним механізмам функціонування моделей виробничих систем. Нечіткі мережі Петрі можуть бути представлені таким чином:
 ,
де  - кінцева множина нечітких позицій   , яким ставиться у відповідність функції належності  , k - деяка змінна, що визначає  значення функції    - кінцева множина нечітких переходів  , яким ставиться у відповідність функції належності   , k - деяка змінна, що визначає  значення функції      функція інцидентностей -
 ;
вхідна   і вихідна  функції інцидентностей.
Маркування позицій при цьому визначається функцією -  .
Особливістю запропонованої структури є можливість подання нечітких процесів і динаміки їх взаємодії. Недоліком як цієї, так і ряду інших більш пізніх розробок є те, що не враховується множини параметрів, показників і характеристик, без яких важко уявити реальні процеси практичних реалізацій. Крім того обмежена можливість завдання показників нечіткості маркування і компонент функції інцидентності, що істотно обмежує можливості дослідника. Існуючі підходи на основі предикатних мереж Петрі в більшій мірі орієнтовані на управління модифікацією структури мережі і в меншій мірі на врахування хоча б обмеженого числа можливих характеристик, параметрів, показників модельованих областей, що, очевидно, не вирішує практичних завдань аналізу реальних процесів.
З метою скорочення розмірності моделі і розширення можливостей моделювання процесів і систем  запропоновані розширення і шляхи вирішення завдань моделювання на основі розфарбованих мереж Петрі. Відомі також роботи групи дослідників під керівництвом В. Фенглера, зокрема, з розробки і дослідження розфарбованих мереж Петрі та їх розширень в задачах автоматизації проектів створення систем. На їхню думку застосування розфарбованих мереж Петрі і розфарбованих нечітких мереж Петрі покращує якість і гнучкість аналізу об'єктів дослідження. Структура  мереж Петрі по суті доповнюється функцією кольору наступним чином:
 ,
де   - функція кольору;   -  умова спрацьовування переходу з урахуванням функції кольору;   - ємкість міток в позиціях.
Значний інтерес до розширень мереж Петрі та їх розвитку виник останнім часом внаслідок впровадження в практику систем, представлених в нечіткому просторі станів з використанням баз знань і машин логічного висновку. Зокрема, значна увага приділяється проблемам дослідження нечітких процесів в аспекті поведінкових властивостей нечітких мереж Петрі. Нечітка мережа Петрі визначена на основі використання значень локальної функції належності позицій і переходів, також обмежень на її значення. Розширенням цієї моделі можна вважати мережу, яка ставить у відповідність маркера значення функції належності, що дозволяє здійснювати, власне обмежений нечіткий логічний висновок.
Окремі розробки носять спеціалізований характер і орієнтовані на моделювання процедур і особливостей окремих пристроїв типу процесорів. Наприклад,  запропонована нечітка мережа Петрі, яка визначена  як мережа високого рівня. Особливістю цієї моделі є те, що вона по суті є розфарбованої мережею Петрі, в якій мітка позиції визначена значенням функції приладдя, для позицій   , переходів   визначені функції належності   , а для вхідних і вихідних інцидентностей переходу визначені нечіткі мітки, відповідно  ,  , які і визначають тип нечітких вхідного і вихідного об'єктів, а також і матрицю відношень   у рішенні   на основі прямого логічного висновку

 
Очевидно, що аналіз поведінкових властивостей моделей, що відображають взаємодіючі динамічні нечіткі процеси, багато в чому є визначальним в практичних реалізаціях. Відомі дослідження, присвячені вирішенню та аналізу поведінкових властивостей фрагментів баз знань з використанням нечітких мереж Петрі. Зокрема були розглянуті можливості виявлення властивостей конфліктності, наявності помилок, надмірності в базах знань.
У зв'язку з цим представляється необхідним створення нових класів розширених інтерпретованих нечітких мереж Петрі та розширених інтерпретованих розфарбованих нечітких мереж Петрі вільних від зазначених вище недоліків. Ці структури повинні характеризуватися:
- можливістю створення нечітких мережевих моделей, що володіють природною інтерпретацією, простотою опису та моделювання взаємодіючих нечітких динамічних процесів, представлених на множині відношень "умова-дія" з урахуванням множини реальних параметрів, характеристик, показників і обмежень предметної області;
- формальним поданням критеріїв вирішення прикладних і теоретичних завдань;
- адаптацією до класів задач і предметної області;
- можливістю вирішення комплексу поставлених завдань як єдиної проблеми створення моделей, критеріїв, методів, інтелектуальних технологій і ефективних інструментальних засобів з використанням сучасних інформаційних технологій і запропонованих формальних критеріїв.
Під когнітивним (від лат. cognition - знання, пізнання) підходом до вивчення процесів, явищ, об'єктів в будь-якій предметній області розуміється така методологія дослідження, коли основна увага акцентується на процесах уявлення, зберігання, обробки та інтерпретації знань. Останні безпосередньо пов'язані з процесами пізнання, пояснення і розуміння, характерними для інтелектуальних систем взагалі і для людини зокрема. Наука, що вивчає можливості і закономірності передачі інформації про ці процеси комп'ютера, називається інженерією знань, або когнітологією.
Когнітивний підхід ефективний при вивченні складних об'єктів і систем, для яких характерні:
наявність великої кількості взаємопов'язаних підсистем різної фізичної природи;
відсутність достатньої кількісної інформації про поведінку системи і що відбуваються в ній зміни, а також фактори, що діють на систему і її елементи, що змушує переходити до якісного аналізу протікаючих в ній процесів;
висока динамічність і невизначеність характеру поведінки системи і її довкілля;
істотна нелінійність характеристик елементів системи, що також ускладнює прогнозування її поведінки.
Зазначені властивості систем дозволяють говорити про них як про поганоструктурованих системах. Внаслідок швидкої зміни ситуацій, управління такими системами при дії великого числа зовнішніх і внутрішніх факторів представляється украй скрутним, тому що воно пов'язане з необхідністю оперативного прийняття управлінських рішень в умовах невизначеності, дефіциту ресурсів і виникнення можливих нештатних ситуацій.
Основні завдання, що виникають при управлінні складною системою в конкретній ситуації (під ситуацією тут і далі розуміється стан системи, її середовища і цілі управління в даний момент часу), включають в себе наступне коло питань:
які керуючі фактори є найбільш ефективними і в якому поєднанні вони повинні брати участь в управлінні;
до якої точки системи, коли, якої величини, форми і знака повинні бути додані управляючі дії;
яка інформація, в якому вигляді і в якій кількості потрібно для прийняття управлінського рішення;
які фактори сприяють, а які заважають ефективному управлінню;
як здійснити реконфігурацію (реструктуризацію) системи з метою її адаптації до нових умов функціонування.
Звичайно, ці питання не охоплюють всіх проблем, які необхідно вирішувати при управлінні складними системами. Разом з тим ці та багато інших завдань можуть бути успішно вирішені шляхом використання когнітивного (пізнавального) моделювання, яке дозволяє виявити можливі варіанти розвитку ситуацій і якісно оцінити досяжність поставленої мети в цих ситуаціях.
В основі когнітивного моделювання складних систем використовується поняття когнітивної карти (або карти пізнання), під якою розуміється математична модель системи (об'єкта, проблеми), представлена у вигляді орієнтованого зваженого графа і дозволяє описувати суб'єктивне сприйняття цієї системи (об'єкта, проблеми) людиною або групою людей. Когнітивна карта призначена для виявлення структури причинних зв'язків між елементами системи, складного об'єкта, з складовими проблеми і т.п. і оцінки наслідків, що відбуваються під впливом дій на ці елементи або зміни характеру зв'язків.
Когнітивна карта - це знаковий орієнтований граф (орграф), вузли якого представляють собою концепти, що відображають деякі атрибути, фактори, стани системи (наприклад, політична нестабільність в суспільстві і т.п.), а дуги - причинні (або каузальні) зв'язку між ними.
Існують два типи зв'язків між концептами:
а) прямий (або позитивний) зв'язок між концептами   і  : збільшення змінної стану  , яка описує концепт   призводить до збільшення змінної стану  , яка описує концепт  ; і навпаки - зменшення   призводить до зменшення  ;
б) зворотній (або негативний) зв'язок між концептами   і  : збільшення змінної   призводить до зменшення змінної  ; і навпаки - зменшення   призводить до збільшення  .
На рис. 10.3 наведено приклад когнітивної карти, що містить 5 концептів  ,  , ...,  , пов'язаних між собою як позитивними, так і негативними зв'язками.
 
Рис. 10.3. Приклад когнітивної карти
Як видно з рисунка, існують 3 шляхи, що ведуть з початкової вершини графа (концепт  ) в кінцеву вершину (концепт  ):
( , , , ); ( , , , );( , , ).
Всі три шляхи є позитивними, так як добуток знаків всіх зв'язків, що входять в кожен з цих шляхів, позитивний. Оскільки загальний ефект від дії концепту   на концепт   тут знаходиться шляхом підсумовування ефектів по 3-м зазначених шляхах, то знак цього загального ефекту ( ) також є позитивним.
Крім знакових когнітивних карт, ваги зв'язків в яких приймають значення   = + 1 або   = -1, Аксельродом було запропонованотакож зважені і функціональні когнітивні карти. На відміну від знакових, зважені когнітивні карти (weightedcognitivemaps) описують не тільки напрям зміни змінних стану, а й «силу» враховуваних причинно-наслідкових зв'язків. Для цього кожному зв'язку   приписується вага, який приймає позитивне ( > 0) або негативне ( <0) значення (число), що характеризує кількісний вплив відповідної змінної   на змінну  . У тих випадку, коли ваги всіх зв'язків між концептами задані у вигляді деяких функцій, наприклад,  , говорять про функціональні когнітивні карти (functionalcognitivemaps).
Подальший розвиток ідей адаптації нечітких когнітивних карт (НКК) пов'язано з розробкою динамічних моделей складних об'єктів на основі нейро-нечітких когнітивних карт. Даний напрямок успішно розвивається в останні роки зусиллями грецьких вчених П. Грумпоса і X. Стіліоса. Як основа пропонованого підходу використовується твердження про те, що стан концепту   залежить не тільки від стану інших концептів   ( ) і зв'язків між ними, а й від попереднього стану даного концепту, тобто нейрон, відповідний i-му вузлу НКК, описується рівнянням
 ,                                                      (10.1)
Де   та   - значення змінної   на  -му та  -му кроці відповідно, ( =1, 2, …);   - ваги зв’язків між концептами   та  ;   - нелінійна функція активації, яка приймає значення в інтервалі від [0, 1].
Відповідно до сучасної термінологією, нейрон, що описується за допомогою рівняння (1), відноситься до класу динамічних нейронів, а нечітка когнітивна карта, складена з n таких нейронів, являє собою динамічну нейронну мережу. Як випливає з рівняння (1), отримана НКК має ефект пам'яті, внаслідок чого на кожному кроці моделювання досягається лише незначна зміна її стану.
Методика когнітивного моделювання складних об'єктів (ситуацій) включає в себе наступні етапи:
1) аналіз знань про досліджуваний об'єкт і його зовнішнього середовища: виявлення параметрів, що характеризують стан об'єкта; виявлення параметрів, що характеризують стан зовнішнього середовища; виявлення параметрів об'єктів, стан яких змінюється від впливу досліджуваного об'єкта;
2) побудова нечіткої когнітивної карти (НКК): визначення переліку базових чинників (концептів); виявлення та обґрунтування взаємозв'язків між концептами; побудова графової моделі;
3) структурний аналіз і оцінка адекватності НКК;
4) аналіз можливих сценаріїв розвитку ситуації.
Реалізація зазначеної процедури дозволяє істотно поглибити початкові уявлення про досліджуваний складний об'єкт, сформувати певний наочний «образ» його поведінки в мінливому зовнішньому середовищі, прорахувати наслідки від прийняття тих чи інших управлінських рішень, що є передумовою до побудови ефективної керуючої системи.
Прийняття рішень з управління на основі нечітких когнітивних карт.
Як вже зазначалося, побудова когнітивних моделей (зокрема, НКК) дозволяє не тільки наочно представити процеси, що протікають в складній динамічній системі, а й запропонувати раціональні механізми управління цими процесами. Оскільки аналізовані завдання управління відносяться до поганоструктурованим (тобто містять невизначеність в самому формулюванні вихідних даних, обмежень і цілі), їх рішення вимагає залучення додаткової інформації у формі експертних знань про предметну область, що дозволяє в значній мірі «зняти» цю невизначеність.
Введемо такі визначення. Під метою управління, як і раніше, будемо розуміти приведення об'єкта управління (системи) в бажаний стан в умовах дії зовнішніх і внутрішніх факторів, що є збуреннями, і які характеризують стан середовища, або отримання деякого бажаного результату діяльності. Варіант рішення (або просто рішення) - це можливий спосіб досягнення поставлених цілей. Варіанти повинні бути взаємовиключними, або альтернативними, тому варіант рішення інакше називається альтернативою. Реалізація кожної альтернативи призводить до настання деяких наслідків (результатів), оцінка яких здійснюється за одним або кількома критеріями (показниками), що однозначно характеризують властивості альтернатив. У загальній постановці, завдання прийняття рішень полягає у виборі кращої (найкращої) альтернативи відповідно до власних уподобань особи, що приймає рішення (ОПР).
Загальна модель циклу прийняття рішень з управління в проблемних (критичних, небезпечних) ситуаціях може бути представлена у вигляді просторової багатовимірної структури знань:
S'= {S, M, A, E, D, X, G},                                                                        (10.2)
де S’ - ситуація, що виникає в результаті прийнятого рішення; S - вихідна проблемна ситуація (ПС); М- множина моделей розвитку ПС; А - множина альтернатив розвитку ПС; Е - множина критеріїв оцінки ефективності рішень; D - множина рішень; X – множини станів об'єкта; G - мета управління об'єктом (рис. 10.4).
З метою підвищення оперативності та ефективності прийняття рішень з управління складними динамічними об'єктами в останні роки все ширше використовуються інтелектуальні системи підтримки прийняття рішень (ІСППР, IntelligentDecisionSupportSystems). Типова структура такої системи задовольняє наступним вимогам :
1) аналізуючи дані про конкретну ПС, знання і моделі, ІСППР повинна надати ОПР актуальну інформацію, що дозволяє обґрунтувати вибір альтернативи і дати необхідні пояснення;
2) у складі ІСППР повинна бути база даних опису ПС і база знань про процеси управління в ПС;
3) ІСППР повинна містити засоби дедуктивного логічного виведення (для формування рекомендацій в реальному часі) і індукції висновку (на стадії інтелектуального аналізу даних), а також засоби, що імітують міркування за аналогією, для пошуку прецедентів ПС;
4) ІСППР повинна розуміти висловлювання користувача на природній проблемно-орієнтованій мові;
5) важливою функцією ІСППР є здатність автоматичного виявлення суперечностей між знаннями, які існують в базі знань, і новими, що надходять від експертів або від програм автоматизованого вилучення знань з даних;
6) час формування рекомендації ІСППР має знаходитись в межах резерву часу для даного типу складного динамічного об'єкта для відповідного класу ПС.

 
Рис. 10.4. Модель прийняття рішень в проблемних ситуаціях
Функції когнітивного моделювання на етапі прийняття управлінських рішень полягають в наступному:
створюється когнітивна модель керованого об'єкта (системи); на основі цієї моделі (з допомогою алгоритмів навчання та адаптації) будується імітаційна модель об'єкта управління;
будується множина правил (продукцій ЯКЩО-ТО) з управління об'єктом на основі сценарного підходу (методів ситуаційного управління);
здійснюється вибір підходящої (найкращої) альтернативи і оцінка ефективності обраного способу управління з використанням когнітивної (імітаційної) моделі системи.
В основі сценарного підходу використовується поняття сценарію. Під сценарієм розуміється деяка послідовність дій, яка може привести до вирішення проблемної ситуації. Можливі три різних напрямки моделювання сценаріїв:
1) прогноз розвитку ситуації без будь-якого додаткового впливу на процеси в ситуації (ситуація розвивається сама по собі);
2) прогноз розвитку ситуації з обраним комплексом заходів (управлінь) (пряма задача);
3) синтез комплексу заходів для досягнення бажаної зміни ситуації управління (зворотна задача).
Кожне з цих трьох напрямків включає в себе кілька взаємопов’язаних етапів.
Під цільовими (базисними) факторами тут розуміються чинники, що характеризують суть проблеми. Керуючі чинники - це чинники, які є потенційно можливими важелями впливу на ситуацію, впливу на цільові фактори. Спостережувані чинники (індикатори) - відображають і пояснюють розвиток процесів в проблемної ситуації і їх вплив на обстановку в цілому.
Вибір можливих альтернатив, тобто комплексу заходів, що впливають на розвиток проблемної ситуації, зводиться до виконання наступних дій з використанням НКК:
включення в НКК додаткових концептів (керуючих факторів), що надають, на думку експерта, позитивний вплив на зміну ситуації;
включення в НКК додаткових зв'язків (позитивних або негативних), які передбачають введення нових (раніше не існували) каналів впливу одних концептів на інші;зміна знака або сили існували зв'язків між концептами НКК.
Сучасні виробничі процеси характеризуються такими «незручними» з точки зору автоматизації управління якістю, як складність, а інколи і практична неможливість отримання досить точного математичного опису; багатозв’язність; багаторежимність; нелінійна динаміка; відсутність формалізованих підходів в питаннях вибору необхідних законів управління (особливо в нештатних ситуаціях); опора в «останній інстанції» на досвід і знання висококваліфікованих фахівців. З огляду на, що нечіткі когнітивні карти поєднують в собі переваги нечіткої логіки (вони не вимагають знання точних математичних моделей, базуються на емпірично отриманих правилах ЯКЩО - ТО, добре працюють з поганоформалізованими об'єктами), а також мають відомі переваги нейронних мереж (нелінійність опису, можливості навчання і самонавчання, спрямованість на отримання оптимальних законів керування), можна стверджувати, що НКК є практично ідеальним інструментом для моделювання та управління складними виробничими процесами. 
Задача – приклад № 1. Розглянемо задачу управління хіміко-технологічним   об'єктом, який  являє собою резервуар, де в результаті змішування 2-х рідин А і В різного складу відбувається хімічна реакція і утворюється новий продукт - рідина З із заданим хімічним складом, що надходить на наступну фазу виробничого циклу (рис.10.5).
 
Рис. 10.5. Схема об’єкта управління
Управління подачею 2-х компонент - рідин А і В - проводиться за допомогою вентилів V1 і V2. Вентиль VЗ регулює вихід кінцевого продукту С, якість якого оцінюється за величиною щільності рідини р. Для вимірювання цього показника використовується спеціальний датчик - манометр, поміщений всередину резервуара. Якщо значення щільності рідини C знаходиться в заданому діапазоні [ ,  ], то вважається, що кінцевий продукт має заданою якістю. Крім того, з технологічних міркувань, рівень рідини Н в резервуарі повинен бути не нижче деякого мінімально допустимого рівня   і не повинен перевищувати встановленої верхньої межі  . Таким чином, мета управління полягає в тому, щоб забезпечити перебування керованих змінних   і Н в інтервалах.
 ,                                                                (10.3)
В прикладі:  =0.74,  = 0.80,  = 0.68,  = 0.70.
Розв’язання:
Розглянемо основні етапи вирішення даного завдання за допомогою НКК
1. Вибір множини концептів. Для того щоб побудувати НКК, яка буде використовуватися для моделювання та управління розглянутим об'єктом, необхідно, в першу чергу, визначити  концепти. В даному випадку число концептів НКК, що відповідають основним цільовим факторам завдання, можна прийняти рівним п'яти (табл.10.1).
Таблиця 10. 1
Позначення
 
Найменування концепту
 
Змінна стану концепту  

1	2	3
 
 
Резервуар
Вентиль V1	Рівень рідини в резервуарі  -  
Відкриття вентиля  -  (закритий, частково відкритий, відкритий)
 

 

 
Вентиль V2

Вентиль V3

Густина рідини	Відкриття вентиля  -  (закритий, частково відкритий, відкритий)

Відкриття вентиля  -  (закритий, частково відкритий, відкритий)

Величина густини рідини в резервуарі  -  


Зауважимо, що при подальшому розгляді деякі концепти НКК можна виключити, або навпаки, додати нові концепти, що враховують додаткові цільові фактори.
Передбачається, що всі змінні стану  , (i = 1, 2, .., 5) являються безрозмірними величинами, що набувають значення в інтервалі [0, 1] або [-1, 1]. У першому випадку подібне масштабування, тобто перехід від вихідних (розмірних) змінних стану , (і= 1,2, ..., 5) до безрозмірним  , здійснюється за формулою
                                                                            (10.4)    
у другому випадку - за формулою                                                           
                                                                  10.5)
де   і   - мінімальне і максимальне значення змінної  відповідно.
2. Визначення зв'язків між концептами. Очевидно, що максимально можлива кількість зв'язків в НКК дорівнює  . Насправді, вибір найбільш істотних («значущих») зв'язків, оцінка їх знака і сили (ваги) є прерогативою експерта або групи експертів. При цьому на будь-якому етапі дослідження можна додати або виключити якісь зв'язки, якщо це покращує опис системи, що є одним з цінних властивостей НКК. При визначенні ваг зв'язків можуть використовуватися як їх точкові оцінки (числа з інтервалу 
[-1, 1]), так і терми (значення лінгвістичної змінної), задані відповідними функціями належності.
У разі, якщо для побудови НКК залучається група експертів, кожен з них будує свою індивідуальну НКК зі своїм набором зв’язків між концептами. Кожен експерт описує при цьому кожний із зв'язків НКК за допомогою нечіткого правила “ЯКЩО-ТО”, в лівій і правій частині якого використовуються терми відповідних лінгвістичних змінних (станів концептів). Агрегування отриманих НКК в єдину («групову») НКК здійснюється за правилом
                                                                                                (10.6)
де   - шукана групова НКК;  - індивідуальна НКК і-го експерта;   - коефіцієнт значущості і-го експерта, що характеризує його компетенцію і досвід в даній галузі; М - число експертів. Перехід від сумарної лінгвістичної ваги зв'язку до числа, який лежить в інтервалі [-1, 1], проводиться за допомогою одного з методів дефазифікації, наприклад, методом центру тяжіння.
У конкретному прикладі за результатами опитування трьох експертів (М=3) була побудована НКК, зображена на рис. 10.6.
Чисельні значення ваг  , зазначені на цій схемі та отримані шляхом усереднення експертних оцінок по (10.6), утворюють матрицю початкових ваг НКК
 
 
Рис.10.6. Нечітка когнітивна карта хіміко-технологічного процесу
Зауважимо, що розглянута НКК відображає як прямі зв'язки ,  ,  , що визначають вплив керуючих факторів С2, С3, С4 на цільової фактор С1 (рівень рідини Х1), а через нього - на цільової фактор С5, так і зворотні зв'язки , ,  ,  ,  які визначають алгоритм відкриття/закриття вентилів при збільшенні або зменшенні рівня і густини рідини в резервуарі.
3. Розв’язок  системи рівнянь і навчання НКК. Будемо вважати, що стан кожного концепту Сі, описується різницевим рівнянням 1-го порядку
                            (10.7)
де   - значення змінної стану   в момент часу  ;  і   - значення змінних стану   та   в момент  відповідно;   - вага зв'язку між концептами  та  ;   - сигмоїдна функція або функція гіперболічного тангенса, яка переводить значення вхідного аргументу в інтервал [0, 1] або [-1,1].
Коефіцієнти   та   характеризують внесок відповідних компонент в обчислення нового значення змінної стану  . На практиці приймають: ,  , причому на початковому етапі навчання НКК коефіцієнт   вибирають близьким до одиниці, а коефіцієнт   - близьким до нуля. Відношення   характеризує інерційність концепту  : чим більше величина  , тим вище питома вага в  попереднього значення власної змінної стану   і тим повільніша реакція концепту   на зміну змінних стану інших концептів , (j=1, 2, …, 5;  ).
Як видно з рівняння (10.7), поведінка кожного концепту  , - описується в даному випадку моделлю динамічного нейрона, ваги якого (як і ваги інших концептів - нейронів) повинні підлаштовуватися за допомогою спеціального алгоритму навчання в процесі вирішення поставленого завдання. Як алгоритм налаштувань ваг НКК можна використовувати узагальнений алгоритм навчання Хебба (generalized Hebbian algorithm, GHA), відповідно до якого навчання НКК здійснюється без вказівок вчителя, а ітерації ваг   на t-м такті обчислюються за формулою:
                                                   (10.8)
Тут   і   - значення ваги   в момент часу t і (t- 1) відповідно;  - параметр, що визначає швидкість процесу навчання (експериментально отримане значення   = 0,01).
Метою навчання при цьому є досягнення максимуму цільової функції   , де   - вектор вихідних параметрів (індикаторів) НКК, при виконанні обмеження  = 1. Як критерій зупину процедури навчання приймається умова
                                                                                    (10.9)
де  , (і=1, 2) - компоненти вектора вихідних параметрів у;  - задана мала величина (в розглянутому прикладі   = 0,002).
Процедура настройки ваг НКК, відповідно до алгоритму навчання Хебба, полягає в наступному:
1) вводяться початкові значення змінних стану  , (i = 1,2, ..., 5) і початкові значення ваг зв'язків   (i, j = 1,2,..., 5), що утворюють матрицю  ;
2) до завершення процедури обчислень, тобто до виконання критерію зупинки (10):
а) обчислити змінні стану  , (i = 1,2, ..., 5) по (10.7);
б) обчислити нові значення ваг зв'язків   по (10.8);
в) обчислити цільову функцію J і приріст  , (і=1, 2); перевірити виконання критерію зупинки (10);
г) якщо критерій (10) виконується і цільова функція J досягає максимуму, завершити процедуру, в іншому випадку - повернення до п. 2, а.
4. Моделювання процесів управління. На першому етапі моделювання ваги всіх зв'язків НКК (див. рис. 10.6) фіксувалися, приймаючи значення, зазначені в матриці. В якості вихідних значень змінних стану  (і = 1,2,..., 5) були прийняті компоненти вектора   = (0.1 0.45 0.37 0.04 0.01)Т, отримані шляхом опитування експертів. Далі, використовуючи рівняння (10..7), обчислювалися значення змінних стану концептів С1,..., С5. Коефіцієнти   і   приймалися рівними 1.0 і 0.9 відповідно; функція активації f - гіперболічний тангенс. Результати обчислення для 5-ти ітерацій наведені в табл..10.2.

Таблиця 10.2
Крок
t	Резервуар
(Х1)	Густина
(Х5)	Вентиль V1
(Х2)	Вентиль V2
 (Х3)	Вентиль V3
 (Х4)
0	0.10	0.01	0.45	0.37	0.04
1	0.57	0.51	0.49	0.49	0.50
2	0.49	0.54	0.52	0.46	0.54
3	0.48	0.54	0.53	0.47	0.54
4	0.48	0.54	0.53	0.47	0.54
5	0.48	0.54	0.53	0.47	0.54

Як видно, вже після 3-х ітерацій встановлюється рівноважний стан НКК, визначається вектором змінних Хуст = (0.48 0.53 0.47 0.54 0.54)Т. Разом з тим компоненти вектора вихідних параметрів у = (Х1, Х5)Т в даному випадку не потрапили в задані інтервали: ,  . Причиною цього може бути, перш за все, приблизний характер завдання експертами ваг зв'язків НКК (навіть в разі декількох експериментів ця проблема залишається), а також некерована збіжність до небажаних стійких станів.
Виходом із ситуації є використання процедур навчання НКК, зокрема, за допомогою розглянутого вище узагальненого алгоритму навчання Хебба. З метою оцінки ефективності цього алгоритму були проведені наступні обчислювальні експерименти.
Для тих же початкових умов, що і в попередньому випадку, тобто для   = (0.1 0.45 0.37 0.04 0.01)Т, проводилися обчислення змінних стану концептів Хі, (і= 1, 2,..., 5) по (10.7), використовуючи на кожному кроці алгоритм настройки ваг (10.8). Як видно з рис. 10.7, рівноважний стан НКК, досягається вже після закінчення 5-ти тактів. Сталі значення змінних стану НКК тут визначаються вектором Хуст = (0.48 0.53 0.47 0.54 0.54)Т, компоненти якого Х1= Н і Х5 =   задовольняють поставленим вимогам.
Матриця ваг зв'язків НКК після закінчення процесу навчання при цьому отримує вигляд:
                (10.10)
 
Рис. 10.7. Графіки перехідних процесів в НКК
Нові ваги зв'язків описують нові залежності між концептами НКК. По суті, отримана нова модель об'єкта управління. Зауважимо, що в порівнянні з матрицею нульові елементи збереглися тільки на діагоналі матриці W, інші елементи матриці зазнали істотних змін.
Повторення процесу моделювання з використанням інших початкових умов   = (0.1 0.45 0.37 0.04 0.01)Ті матриці ваг (10.8) дає в підсумку той же результат, що і вище, тобто вектор змінних стану приймає значення Хуст = (0.692 0.738 0.676 0.747 0.743)Т. Багаторазове зміна початкових умов при використанні матриці ваг (10.8) приводить до того ж кінцевого результату. Це дозволяє стверджувати, що отримана НКК з матрицею зв'язків (10.10) забезпечує вирішення поставленого завдання управління.
5. Розширення алгоритмів управління з використанням НКК.
У більш загальному плані, крім забезпечення заданої якості продукції, що випускається, до реальних виробничих процесів пред'являються також вимоги надійності та ефективності управління. Для даного об'єкту подібні вимоги можна реалізувати за допомогою трьохрівневої інтелектуальної системи управління, структурна схема якої наведена на рис.10.8.
Передбачається, що на нижньому (виконавчому) рівні цієї системи використовуються найпростіші локальні регулятори, керуючі відкриттям вентилів V1, V2 та V3 по командам вищого рівня. Наступний рівень (рівень координації) реалізується на базі описаної вище НКК, за допомогою якої здійснюється вибір оптимальних керуючих впливів, що забезпечують заданий режим функціонування керованого процесу. І нарешті, на верхній рівень (рівень планування) покладаються завдання моніторингу технічного стану системи, діагностики виникають відмов, прийняття рішень і їх виконання (тобто формування керуючих сигналів на рівень координації). Ці завдання також вирішуються за допомогою супервізора - НКК, причому кожної з перерахованих завдань повинна відповідати своя НКК (свій модуль рівня планування).

 
Рис. 10.8. Структурна схема інтелектуальної системи управління
На рис. 10.9 показана можлива схема побудови НКК, призначеної для вирішення завдання діагностики відмов в системі управління хіміко-технологічним процесом. Дана схема враховує результати опитування експертів про можливі типи відмов, їх наслідки, частоті прояви і вплив на режим роботи об'єкта. Склад концептів цієї НКК: С1 - переповнення рівня рідини в резервуарі; С2 - протікання вентиля; С3 - неповне закриття вентиля V1; С4 - неповне закриття вентиля V2; С5 - неповне закриття вентиля V3; С6 - неможливість закриття вентиля V1; С7 - неможливість закриття вентиля V2; С8 - неможливість закриття вентиля V3; С9 - неможливість відкриття вентиля V1; С10 - неможливість відкриття вентиля V2; С11 - неможливість відкриття вентиля V3.
 
Рис. 10.9. Нечітка когнітивна карта діагностики відмов
Аналогічно можуть бути побудовані інші НКК, взаємодіючі між собою, а також з НКК нижчого рівня, при навчанні та функціонуванні яких використовується інформація, отримана шляхом спостереження за реальними процесами. Передача і перетворення інформації з нижніх рівнів на верхні, і навпаки, здійснюється за допомогою спеціальних інтерфейсів (див. рис. 6).

Контрольні питання.

 1.В яких умовах застосовують нечітке моделювання?
 2.  Що характеризує FIS-структуру у пакеті MATLAB?
 3. Як формуються нечіткі правила у FIS-редакторі?
 4. Як проводиться фазифікація змінних  у FIS-редакторі?
 5. Охарактеризуйте методи дефазифікації результатів    нечіткого висновку у модулі Fuzzy Logic Toolbox.   .
 6. В чому полягає редагування функцій належності у FIS-редакторі?
 7. Які особливості застосування нечітких мереж Петрі в задачах керування?
 8. В чому полягає когнітивний підхід в задачах дослідження складних систем?
9.  Поясніть поняття когнітивної карти.
10. В чому полягає методика когнітивного моделювання складних об'єктів (ситуацій)?
11. Як здійснюється прийняття рішень з управління на основі нечітких когнітивних карт?
12. Охарактеризуйте напрямки моделювання сценаріїв.
13. Переваги організації управління складними об’єктами за допомогою нечітких когнітивних карт.

Тема 11.   Моделі та бази знань і даних в інтелектуальних системах керування
Проблема подання знань
Ключове місце в інтелектуальних системах-проблема подання знань. Системи, які будуються на результатах, отриманих в області штучного інтелекту, часто називають системами, заснованими на знаннях, підкреслюючи цим їхню принципову відмінність від раніше створених систем. Знання являють собою сукупність відомостей (від індивідуума, суспільства або від  інтелектуальних систем) про світ (конкретної предметної області, сукупності об'єктів або об'єкта), що включає в себе: інформацію про властивості об'єктів, закономірності процесів і явищ, правила використання цієї інформації для прийняття рішень.
Спочатку засоби обчислювальної техніки були орієнтовані на обробку даних. Це було зв'язано як з рівнем розвитку техніки й програмного забезпечення, так і зі специфікою розв'язуваних завдань. Подальше ускладнення розв'язуваних завдань, їхня інтелектуалізація, розвиток обчислювальної техніки ставлять завдання створення систем обробки знань.          
Подання знань - це вираження на деякій формальній мові, названій мовою подання знань, властивостей різних об'єктів і закономірностей, важливих для рішення прикладних завдань і організації взаємодії користувача з ЕОМ. Це можуть бути об'єкти й закономірності предметної області, обчислювального середовища і т.п. Той факт, що мова, на якій записуються знання, є формальною, забезпечує однозначність інтерпретації записаного . 
 	 Сукупність знань, що зберігаються в обчислювальній системі й необхідних для рішення комплексу прикладних програм кінцевим користувачем, називається системою знань. Відомості про те, якими знаннями володіє система, можуть знадобитися користувачеві (і він повинен мати можливість їх одержати), однак у першу чергу організовані знання необхідні обчислювальній системі для того, щоб підтримувати процес взаємодії з користувачем і вирішувати необхідні завдання. Іншими словами, знання забезпечують функціонування системи. В інтелектуальних системах знання зберігаються в спеціальному програмному або програмно  - апаратному блоці, названому базою знань (БЗ).
Обчислювальна система використає систему знань, виконуючи над нею різноманітні дії (операції), такі, як пошук необхідних відомостей, їхня модифікація, інтерпретація знань, виведення з наявних знань нових і т.п. Алгоритми виконання цих операцій істотно залежать від особливостей мови подання знань і від того, яким чином система знань представляється в обчислювальній системі.
Оскільки система знань цінна не сама по собі, а саме можливостями її використання, оскільки використати цю систему можна лише виконуючи над нею ті або інші операції й оскільки алгоритмізація цих операцій визначається мовою подання знань, будь-який сучасний метод подання знань являє собою сукупність взаємозалежних засобів формального опису знань і маніпулювання цими знаннями.
Декларативні й процедурні  методи подання знань
Методи подання знань можна умовно розділити на декларативні й процедурні.
Декларативні методи подання знань у моделях ґрунтуються на припущенні, що проблема подання якоїсь предметної області вирішується незалежно від того, як ці знання потім будуть використані. Тому модель як би складається із двох частин: статичних описових структур знань і механізму висновку, що оперує цими структурами й практично незалежного від їхнього змістовного наповнення. При цьому в якомусь ступені виявляються роздільними синтаксичні й семантичні аспекти знання, що є певною перевагою зазначених форм подання через можливість досягнення їхньої певної універсальності.У декларативних методах моделі знань не отримуються в явному вигляді опису  виконуваних процедур. Ці моделі являють собою звичайно множину тверджень. Предметна область представляється у вигляді синтаксичного опису її стану (по можливості повного). Висновок рішень ґрунтується в основному на процедурах пошуку в просторі станів.
У процедурному поданні знання отримуються в процедурах - невеликих програмах, які визначають, як виконувати специфічні дії (як вести себе в специфічних ситуаціях). При цьому можна не описувати всі можливі стани середовища або об'єкта для реалізації висновку. Досить зберігати деякі початкові стани й процедури, що генерують необхідні описи ситуацій і дій.  При процедурному поданні знань семантика безпосередньо закладена в опис елементів бази знань, за рахунок чого підвищується ефективність пошуку рішень. Загальні знання й правила висновку представлені у вигляді спеціальних цілеспрямованих процедур, що активізуються в міру потреби.
 Процедури можуть активізувати одна одну, їхнє виконання може перериватися, а потім відновлятися. Можливе використання процедур— «демонів», що активізуються при виконанні операцій введення, зміни або видалення даних. Засобами підвищення ефективності генерації висновку в процедурних моделях є додавання в систему знань про застосування,  тобто  знання про те, яким чином використати накопичені знання для рішення конкретного завдання. Ці знання, як правило, теж представляються в процедурній формі. Головна перевага процедурних моделей подання знань полягає в більшій ефективності механізмів висновку за рахунок введення додаткових знань про застосування. Інша важлива перевага полягає у їх виразності. Процедурні системи здатні змоделювати практично будь-яку модель подання знань. Виразність процедурних систем проявляється в розширеній системі висновків, реалізованих у них. Більшість розширених форм висновків може бути охарактеризовано поняттям «припущення  відсутності» і зводиться до схеми:
«Якщо А (попередня умова) істинно й немає доказів проти В, то запропонувати В». Подібні правила виявляються корисними в основному у двох випадках :
1) Неповнота знань. Якщо в системі подання окремі факти не представлені або не виведені, правила висновку дозволяють гіпотетично визнавати їх вірними за умови, що в системі немає або в ній не виведені докази протилежного.
2) Висновок в умовах обмеженості ресурсів. Через обмеженість ресурсів процеси висновку не можуть завершитися, а повинні бути залишені для одержання результату. У цьому випадку правила визначають подальший розвиток системи.
Досвід застосування інтелектуальних систем показав, що використання тільки процедурного підходу не є достатнім для побудови більших і складних баз знань. Більша й складна база знань, реалізована за допомогою процедурних методів, так само складна для розуміння, як і велика програмна система в традиційній технології рішення завдань на ЕОМ. В зв'язку із цим чисто процедурі методи подання знань застосовуються рідко. У той же час елементи процедурного підходу успішно використовуються в декларативних методах, і звичайно, процедурні методи подання знань розглядаються з позиції розширення можливостей декларативних. У групі декларативних методів подання знань виділяються логічні і засновані на апараті семантичних мереж.
   	Найважливішою проблемою розробки інтелектуальних систем, тобто систем заснованих на знаннях, є вибір моделей представлення знань. При цьому спосіб формального виразу знань про предметну область в комп'ютерній формі, що інтерпретується, називаємо представленням знань, а відповідні формалізми, що забезпечують указане представлення - моделями представлення знань.
  	 Моделі представлення знань можна умовно розділити на два класи: декларативні і процедурні. В декларативних моделях знання представляються у вигляді описів об'єктів і відносин між об'єктами без вказівки в явному вигляді, як ці знання обробляти. Ці моделі передбачають відокремлення декларацій інформаційних структур від механізму виведення, що оперує цими структурами. В процедурних моделях знання представляються процедурами (алгоритмами), що описують інформаційні елементи і одночасно визначають способи іхньої обробки.
Моделі представлення знань - це одне з найважливіших напрямків досліджень в області штучного інтелекту. 
На сьогоднішній день розроблено вже достатня кількість моделей. Кожна з них має свої плюси і мінуси, і тому для кожного конкретного завдання необхідно вибрати саме свою модель. Від цього буде залежить не стільки ефективність виконання поставленого завдання, скільки можливість її рішення взагалі.
Відзначимо, що моделі подання знань відносяться до прагматичного напрямку досліджень в області штучного інтелекту. Цей напрямок ґрунтується на припущенні про те, що розумова діяльність людини - «чорний ящик». При такому підході не ставиться питання про адекватність використовуваних в комп'ютері моделей уявлення знань тим моделям, якими користується в аналогічних ситуаціях людина, а розглядається лише кінцевий результат вирішення конкретних завдань.
В даний час розроблено безліч моделей уявлення знань. Маючи узагальнені назви, вони розрізняються по ідеям, які лежать в їх основі, з точки зору математичної обґрунтованості. Типи моделей показані на рис. 11.1.
Перший підхід, званий емпіричним, заснований на вивченні принципів організації людської пам'яті і моделюванні механізмів вирішення завдань людиною. На основі цього підходу в даний час розроблені і отримали найбільшу популярність наступні моделі:
•	продукційні моделі - модель заснована на правилах, дозволяє уявити знання у вигляді пропозицій типу: «ЯКЩО умова, ТО дія». Продукційна модель має такий недолік, що при накопиченні досить великої кількості (близько декількох сотень) продукцій, вони починають суперечити один одній;
•	мережеві моделі (або семантичні мережі) - в інженерії знань під нею мається на увазі граф, що відображає зміст цілісного образу. Вузли графа відповідають поняттям і об'єктів, а дуги - відносинам між об'єктами. Володіє тим недоліком, що однозначного визначення семантичної мережі в даний час відсутня;
•	фреймова модель - ґрунтується на такому понятті як фрейм (англ. frame - рамка, каркас). Фрейм - структура даних для представлення деякого концептуального об'єкта. Інформація, що відноситься до кадру, міститься в складових його слотах. Слоти можуть бути термінальними або бути самі фреймами, таким чином утворюючи цілу ієрархічну мережу.
 
Рис.11. 1. Типи моделей представлення знань
Умовно до групи емпіричного підходу можна включити нейронні мережі та генетичні алгоритми, які стосуються біонічному (ця інформація базується на припущенні про те, що якщо в штучної системі відтворити структури і процеси людського мозку, то і результати вирішення завдань такою системою будуть подібні результатами, що отримуються людиною) напрямку штучного інтелекту. Особливістю моделей цього типу є широке використання евристик, що в кожному випадку потребує доведення правильності одержуваних рішень.
Другий підхід можна визначити як теоретично обґрунтований, що гарантує правильність рішень. Він в основному представлений моделями, заснованими на формальній логіці (обчислення висловлювань, числення предикатів), формальних граматиках, комбінаторними моделями, зокрема моделями кінцевих проектних геометрій, теорії графів, тензорними і алгебраїчними моделями. В рамках цього підходу до теперішнього часу вдавалося вирішувати тільки порівняно прості завдання з вузькою предметної області.
На практиці частіше всього використовується комбінація декларативних і процедурних моделей представлення знань. Найпоширенішими є такі моделі:
•     логічні моделі
•     продукційні моделі
•     сіткові моделі
•     фреймові моделі.
  	 

Контрольні питання.
1.	Які існують моделі представлення знань?
2.	Дайте характеристику емпіричних моделей знань.
3.	Дайте характеристику теоретичих моделей знань.
4.	Назвіть найбільш поширені моделі знанб.
5.	Переваги та недоліки розглянутих моделей знань.

Тема 12.  Методи вилучення знань
 
Надбання знань - це процес передачі знань і досвіду за рішенням певного класу задач від джерела інформації (яким може бути експерт, довідково-нормативні відомості, набір даних і ін.) в базу знань інтелектуальної системи. В даний час існують інтелектуальні системи,які використовують практично всі перераховані джерела, але абсолютна більшість баз знань грунтується на досвіді експертів.      Процес структуризації знань (тобто представлення їх у вигляді,прийнятному для завантаження в базу знань інтелектуальних систем) експерта і передачі результатів цього процесу в базу знань інтелектуальні системи в більшості випадків досить складний, тому на практиці із експертом працює посередник, званий інженером знань або аналітиком. Добре знаючи вимоги інтелектуальних систем до організації знань, він отримує відомості від експерта і відповідно до визначених) правилами завантажує їх в базу знань інтелектуальної системи . Фактично інженер знань служить інтерфейсом (каналом зв'язку) в ланцюжку експерт - база знань інтелектуальної системи. Це позбавляє  експерта від вивчення  досить складних правил і мов структуризації знань.
Знання для завантаження в базу знань інтелектуальних систем можуть отримуватися декількома способами:
1)  інженер знань одержує знання експерта в процесі інтенсивного інтерв'ю і механічно переносить їх в базу знань;
2) інженер знань сам стає експертом, покладаючись на власний аналіз фраз експерта, виконуваний їм в процесі спілкування з експертом. Він, кодує знання експерта на вибраній їм мові опису;
3) експерт самостійно завантажує базу знань інтелектуальної системи за допомогою спеціальної програми, в якійсь мірі виконуючої функції інженера знань;
4) спеціальна програма аналізує джерело знань (наприклад, базу даних) і сама перетворить їх у форму, придатну для зберігання в базі знань інтелектуальної системи ;
5)  спеціальна програма, здатна сприймати і аналізувати текстове джерело (наприклад, книгу), структурує отриману інформацію і розміщує її в базу знань інтелектуальної системи .
В світовій практиці широко використовуються всі п'ять способів, проте четвертий і п'ятий вимагають наявність спеціальної дорогої апаратури
Штучний інтелект є науковим напрямком, завдання якого пов'язані з розробкою методів моделювання окремих функцій інтелекту людини за допомогою програмно-апаратних засобів ЕОМ. Слово «інтелект» вживається в різних сенсах і, хоча кожен з його власників має різну суб'єктну думку, що слід розуміти під людським інтелектом, можна стверджувати, що одним з головних його проявів є здатність адекватно реагувати на будь-яку, особливо нову, ситуацію шляхом коригування поведінки на основі наявного досвіду. Однак реалізація цього за допомогою наявних стандартних обчислювальних методів проблематична або неможлива в принципі. Причина цього - властивий ЕОМ алгоритмічний, строго детермінований підхід до обробки інформації, часто обмежує її використання на рівні потужного калькулятора з багатими можливостями візуалізації інформації при вирішенні задач кількісного характеру.
 	Другий напрямок в інформаційному підході до штучного інтелекту утворює його фундамент, саме тут створюється теорія даного наукового напрямку, вирішуються основні проблеми, пов'язані з центральним об'єктом вивчення штучного інтелекту - знаннями.
Будь-яка предметна область діяльності може бути описана у вигляді деякої сукупності відомостей про структуру цієї області, основних її характеристиках, процесах,
протікають в ній, а також про способи вирішення, що виникають в ній завдань. Усі ці відомості утворюють знання про предметну область.  	
Джерелами знань можуть бути документи, статті, книги, фотографії, кінозйомка і багато іншого. З цих джерел треба витягти   знання, цей процесс може виявитися досить важким, бо треба заздалегідь оцінити важливість і потрібність тих чи інших знань для роботи інтелектуальної системи. Фахівці, які займаються усіма питаннями, пов'язаними зі знаннями, тепер називаються інженерами по знаннях або інженерами знань. Ця нова професія породжена розвитком штучного інтелекту. Значна частина професійного досвіду залишається поза цими джерелами, в головах у професіоналів, які не можуть словесно їх висловити. Такі знання часто називають професійним умінням або інтуїцією. Для того, щоб придбати такі знання, потрібні спеціальні прийоми і методи. Вони використовуються в інструментальних системах по придбанню знань. Отримані від експертів знання потрібно оцінити з точки зору їх відповідності раніше накопичених знань і формалізувати їх для введення в пам'ять інтелектуальної системи. Крім того, знання, отримані від різних експертів, треба ще узгодити між собою. Нерідкі випадки, коли ці знання виявляються зовні несумісними і навіть суперечливими. Інженер по знаннях повинен шляхом опитування експертів усунути ці протиріччя.
Дані, інформація, знання. Дані являють собою інформацію, що розглядається в чисто синтаксичному аспекті, тобто безвідносно до її змісту і використання, тобто семантиці і телеології (зазвичай на будь-якому носії або в каналі передачі).
Інформація - це дані, проінтерпретовані з використанням тезауруса, тобто осмислені дані, що розглядаються в єдності синтаксичного і семантичного аспектів.
Знання - є система інформації, що забезпечує збільшення ймовірності досягнення будь-якої мети, тобто по суті знання - це "Ноу-хау" або технології.
 Стратегії отримання знань
Існує кілька стратегій отримання знань. Найбільш поширені:
• придбання;
• витяг (вилучення);
• формування.
Під придбанням знань розуміється спосіб автоматизованого побудови бази знань за допомогою діалогу експерта і спеціальної програми (при цьому структура знань заздалегідь закладається в програму). Ця стратегія потребує суттєвого попереднього опрацювання предметної області. Системи набуття знань дійсно добувають готові фрагменти знань відповідно із структурами, закладеними розробниками систем. Більшість цих інструментальних засобів спеціально орієнтовані на конкретні експертні системи з жорстко окресленої предметної областю та моделлю представлення знань, тобто не є універсальними.
Термін вилучення знань стосується безпосереднього живого контакту інженера по знаннях і джерела знань. Автори схильні використовувати цей термін як більш ємний і більш точно виражає сенс процедури перенесення компетентності експерта через інженера по знаннях в базу знань експертної системи.
Термін формування знань традиційно закріпився за надзвичайно перспективною областю інженерії знань, яка займається розробкою моделей, методів і алгоритмів аналізу даних для отримання знань і навчання. Ця область включає індуктивні моделі формування гіпотез на основі навчальних вибірок, навчання за аналогією і інші методи.
 Методи вилучення знань
 Класифікація методів вилучення знань
Вилучення знань - то процедура взаємодії експерта з джерелом знань, в результаті якої стають явними процес міркувань фахівців при прийнятті рішення і структура їх уявлень про предметну область.
Викладемо класифікацію методів вилучення знань (рис.2.1), яка може допомогти, в залежності від конкретного завдання і ситуації, вибрати конкретний метод.
 
 

Рис.12.1. Класифікація методів вилучення знань.

Основний принцип поділу пов'язаний з джерелом знань. Комунікативні методи охоплюють всі види контактів з живим джерелом знань - фахівцями та експертами, а текстологічні стосуються методів вилучення знань з документів (методик, посібників, керівництв) і спеціальної літератури (статей, монографій, підручників). Зазвичай аналітик комбінує різні методи.
Комунікативні методи, в свою чергу, можна розділити на дві групи.
Пасивні методи мають на увазі, що провідна роль у процедурі вилучення передається експерту, а аналітик тільки веде протокол міркування експерта під час його реальної роботи по прийняттю рішень або записує те, що експерт вважає за потрібне самостійно розповісти в формі лекції.
В активних методах, навпаки, ініціатива переходить до аналітику, який активно контактує з експертом - в іграх, діалогах, бесідах "за круглим столом" і т. п.
Слід підкреслити, що і активні, і пасивні методи можуть чергуватися навіть в рамках одного сеансу вилучення знань. Наприклад, якщо аналітик сором'язливий і не має достатнього досвіду, то спочатку він може використовувати пасивні методи, а поступово, ближче знайомлячись з експертом, захоплювати ініціативу і переходити в "наступ".
Пасивні методи на перший погляд прості, але насправді вимагають від аналітика вміння чітко аналізувати "потік свідомості" експерта і виявляти в ньому значущі фрагменти знань. Відсутність зворотного зв'язку (пасивність аналітика) значно послаблює ефективність цих методів, чим і пояснюється те, що зазвичай вони грають допоміжну роль. Пасивні методи мають на увазі, що провідна роль у процедурі вилучення знань як би передається експерту, а інженер по знаннях тільки веде протокол міркування експерта під час його реальної роботи по прийняттю рішень або записує те, що експерт вважає за потрібне самостійно розповісти в формі лекції. В активних методах, навпаки, ініціатива повністю в руках інженера по знаннях, який активно контактує з експертом різними способами - в іграх, діалогах, бесідах за "круглим столом" і т.п.
Активні методи можна розділити на дві групи в залежності від числа експертів-фахівців. Якщо експертів більше одного, то доцільно, крім серії індивідуальних контактів з кожним, застосовувати і методи групової роботи. Такі групові методи зазвичай активізують мислення учасників дискусій і дозволяють виявляти досить нетривіальні аспекти їх знань. У свою чергу, індивідуальні методи на сьогоднішній день залишаються провідними, оскільки настільки делікатна процедура, як "відбирання знань", не терпить зайвих свідків.
Про вибір методу.
На вибір методу впливають три чинники: особистісні особливості аналітика та експерта і характеристика предметної області.
Одна з можливих класифікацій людей за психологічними характеристиками виділяє три їх типи:
• мислитель (пізнавальний тип);
• співрозмовник (емоційно-комунікативний тип);
• практик (практичний тип).
Мислителі орієнтовані на інтелектуальну роботу, навчання, теоретичні узагальнення і володіють аналітичним здібностями. Співрозмовники - це товариські, відкриті люди, готові до співпраці. Практики вважають за краще дію розмов, добре реалізують задуми інших, спрямовані на результативність роботи. Відповідно до цієї класифікації практикуючий аналітик може підібрати для себе найбільш підходящі методи.
Для характеристики  знань можна запропонувати таку класифікацію:
• добредокументовані;
• средньодокументовані;
• слабкодокументовані.
Ця класифікація пов'язана зі співвідношенням двох видів знань Z1 і Z2, де Z1 - це експертне "особисте" знання, a Z2 - матеріалізоване в документах "загальне" знання в даній конкретній області.
  Крім цього,  процеси, що характеризують діяльність підприємства, можна розділити за критерієм структурованості знань. Під структурованістю будемо розуміти ступінь виявлення основних закономірностей і принципів, що діють у даній галузі.
За ступенем структурованості знань предметні області можуть бути:
• добреструктурованими - з чіткими визначеннями, усталеною технологією і термінологією;
• середньоструктурованимі - з визначеної термінологією, що розвивається технологією, явними взаємозв'язками між процесами;
• слабкоструктурованими - з розмитими визначеннями, часто мінливої структурою, прихованими взаємозв'язками, з великою кількістю "білих плям".
Наведені класифікації методів і предметних областей допоможуть розробникам інтелектуальних систем, чітко визначивши свою предметну область, співвіднести її з запропонованими типами і намітити відповідний метод або групу методів вилучення знань.  
 Так само досить широко в даний час використовуються ігрові методи в соціології, економіці, менеджменті, педагогіці, для підготовки керівників і політиків. Гра - це особлива форма діяльності і творчості, де людина розкріпачується і відчуває себе вільніше, ніж у звичайній трудової діяльності.
Розглянемо докладніше всі виділені групи методів і особливості їх застосування на практиці
 Пасивні методи.
Назва "пасивні" не повинно викликати ілюзій, оскільки цей термін використовується як противагу до "активних" методів. В реальності ж пасивні методи вимагають від інженера по знаннях неменшої віддачі, ніж такі активні методи, як гра і діалог. Відповідно до класифікації наведеної на рисунку до цієї групи належать:
• спостереження;
• аналіз протоколів "думок вголос";
• лекції.
Порівняльна характеристика пасивних методів вилучення знань представлена в таблиці 2.
Спостереження.
У процесі спостережень інженер по знаннях знаходиться безпосередньо поряд з експертом під час його професійної діяльності або імітації цієї діяльності; При підготовці до сеансу вилучення експерту необхідно пояснити мету спостережень і попросити максимально коментувати свої дії. Під час сеансу аналітик записує всі дії експерта, його репліки і пояснення. Може бути зроблений і відеозапис в реальному масштабі часу. Неодмінна умова цього методу - невтручання аналітика в роботу експерта хоча б на перших порах.Існують два різновиди проведення спостережень: спостереження за реальним процесом; спостереження за імітацією процесу. Зазвичай використовують обидва різновиди.
Сеанси спостережень можуть зажадати від інженера по знаннях:
• оволодіння технікою стенографії для фіксації дій експерта в реальному масштабі часу;
• ознайомлення з методиками хронометрування для чіткого структурування виробничого процесу в часі,
• розвитку навичок "читання по очах", спостережливості до жестів, міміки та інших невербальних компонентів спілкування;
• серйозного попереднього знайомства з предметною областю, так як через відсутність "зворотного зв'язку" іноді багато чого незрозуміло в діях експертів. Протоколи спостережень після сеансів в ході домашньої роботи ретельно розшифровуються, а потім обговорюються з експертом. Таким чином, спостереження - один з найбільш поширених методів вилучення знань на початкових етапах розробки. Зазвичай він застосовується не самостійно, а в сукупності з іншими методами.
Табл. 12.1
Характеристика пасивних методів вилучення знань
Переваги	Метод	Недоліки	Бажані 
якості
експерта	Вимоги
до
аналітика	Характеристики предметної області
Відсутність суб’єктивного впливу аналітика.
Наближення аналітика до процесу	Спостереження	Відсутність зворотнього зв’язку
Фрагментар-ність	"Мислитель"/ "практик"	"Мислитель"	Слабко- і середньо-структуровані; 
слабко-  і середньо-документовані
Видимість структур знань
Свобода самовиразу для спеціаліста	"Думки вголос"	Відсутність зворотнього зв’язку
Зашумленість   зайвою інформацією	" Співрозмовник "/ "мислитель"	"Мислитель"/ " Співрозмовник "	Слабко- і середньо-структуровані; 
слабко-  і середньо-документовані
Висока концентрація знань 
 Відсутність суб’єктивного впливу аналітика.
	Лекції	Мало хороших лекторів

Слабкий  зворотній зв’язок	"Мислитель" з лекторськими здібностями	"Мислитель"	Слабко- і середньо-структуровані; 
слабко-  і середньо-документовані




 Аналіз протоколів "думок вголос"
Протоколювання "думок вголос" відрізняється від спостережень тим, що експерта просять не просто прокоментувати свої дії і рішення, але і пояснити, як це рішення було знайдено, тобто продемонструвати весь ланцюжок своїх міркувань. Під час міркування експерта всі його слова записуються інженером по знаннях: при цьому корисно відзначати навіть паузи і вигуки. Питання про використання для цієї мети магнітофонів і диктофонів є дискусійним, оскільки магнітофон іноді діє на експерта паралізуючим чином, руйнуючи атмосферу довіри, яка може і повинна виникати при безпосередньому спілкуванні.
Основною трудністю при протоколюванні "думок вголос" є принципова складність для будь-якої людини пояснити, як він думає. При цьому існують експериментальні психологічні докази, що люди не завжди в змозі достовірно описати розумові процеси. Крім того, частина знань, що зберігаються в невербальній формі (наприклад, різні процедурні знання типу "як зав'язувати шнурки"), взагалі слабо корелюють з їх словесним описом.
 	Розшифровка отриманих протоколів проводиться інженером по знаннях самостійно з корекціями на наступних сеансах вилучення знань. Вдало проведене протоколювання "думок вголос" є одним з найбільш ефективних методів вилучення, оскільки в ньому експерт може проявити себе максимально яскраво, він нічим не скутий, він як би вільно ширяє в потоці своїх умовиводів і міркувань. Для великого числа експертів це найприємніший і утішний спосіб здобування знань
Лекції
Лекція - дуже старий спосіб передачі знань. Лекторске мистецтво здавна високо цінувалося в усіх областях. Але нас зараз цікавить не стільки здатність до підготовки і читання лекцій, скільки здатність цю лекцію слухати, конспектувати і засвоювати. Якщо експерт має досвід викладача, то можна скористатися таким концентрованим фрагментом знань, як лекція.
У лекції експерту надано багато ступенів свободи для самовираження; однак, аналітик повинен сформулювати експерту тему і завдання лекції. Наприклад, тема циклу лекцій може звучати як "Укладення контракту - підготовка документації", тема конкретної лекції "Підготовка угоди про наміри", завдання - передати знання з переддоговірної діяльності. При такій постановці досвідчений лектор може заздалегідь структурувати свої знання і хід міркувань. Від аналітика в цій ситуації потрібно лише грамотно законспектувати лекцію і в кінці її задати необхідні питання.
 	Мистецтво ведення конспекту полягає в "завадостійкості": записувати головне, опускати другорядне, виділяти фрагменти знань (параграфи, підпунктів), записувати тільки осмислені пропозиції, вміти узагальнювати.
Хороше запитання по ходу лекції допомагає і лектору, і слухачеві. Серйозні і глибокі питання можуть істотно підняти авторитет аналітика в очах експерта.
Досвідчений лектор знає, що питання можна умовно розбити на три групи:
• розумні питання, що поглиблюють лекцію;
• дурні питання або питання не по суті;
• питання "на засипку", або провокаційні.
Якщо аналітик задає питання другого типу, то можливі дві реакції. Важливий експерт-фахівець буде розмовляти з таким аналітиком, як з дитиною, який зараз нічого не розуміє і все одно вже не зрозуміє. Зарозумілий експерт просто вийде з контакту, не бажаючи втрачати час. Якщо ж аналітик захоче продемонструвати свою ерудицію питаннями третього типу, то нічого, крім роздратування і відчуження, він, мабуть, у відповідь не отримає.
Тривалість лекції рекомендується стандартна - від 40 до 50 хв і через 5-10 хв - ще стільки ж.
Метод вилучення знань у формі лекцій, як і всі пасивні методи, використовують на початку розробки як ефективний спосіб швидкого занурення аналітика в предметну область.
Активні методи
Відповідно до класифікації, наведеної на малюнку, до цієї групи належать
• Активні індивідуальні методи
• Активні групові методи
 Активні індивідуальні методи
Активні індивідуальні методи здобування знань на сьогоднішній день-найпоширеніші. В тій чи іншій мірі до них вдаються при розробці практично будь-який експертної системи.
До основних активних методів можна віднести:
• анкетування;
• інтерв'ю;
• вільний діалог;
• ігри з експертом.
У цих методах активну функцію виконує інженер по знаннях, який пише сценарій і режисирує сеанси вилучення знань. Ігри з експертом суттєво відрізняються від інших методів.  
Для зручності порівняння активних індивідуальних методів вилучення знань їхні переваги й недоліки зведені в таблицю 3. Слід ще раз підкреслити, що при виборі методу для конкретної ситуації він повинен підходити як ключ до замка. І тільки після успішних процедур отримання даних і знань можна переходити до моделювання та автоматизації.
Анкетування
Анкетування - найбільш жорсткий метод, тобто найбільш стандартизований. Інженер по знаннях заздалегідь складає перелік питань або анкету, розмножує її і використовує для опитування декількох експертів. Це основна перевага анкетування.
Сама процедура може проводитися двома способами:
• аналітик вголос задає питання, і сам заповнює анкету за відповідями експерта;
• експерт самостійно заповнює анкету після попереднього інструктування.
 	Вибір способу залежить від конкретних умов (наприклад, від оформлення анкети, її зрозумілості, готовності фахівців компанії). Другий спосіб нам здається кращим, так як експерт не обмежений часом на обдумування відповідей.
Запитальник (анкета) заслуговує на особливу увагу. Існує кілька загальних рекомендацій при складанні анкет, найбільший досвід роботи з якими накопичений в соціології і психології. Ось кілька рекомендацій, які досить універсальні, тобто залежать від предметної області.
Табл.12.2
Характеристика активних індивідуальних методів вилучення знань

Метод	Переваги	Недоліки
Анкетування	Можливість стандартизованого опитування декількох  спеціалістів
Не вимагає напруження від аналітика під час процедури анкетувания
	Вимагає досвіу складання анкет
 Відсутність зворотнього зв’язку.
Питання анкети можуть бути неправильно  зрозумілі спеціалістами 

Інтерв’ю	Наявність зворотнього зв’язку.
(можливість уточнень і вирішення протиріч )	Вимагає значного часу на підготовку питань інтерв’ю
Вільний діалог	Гнучкість
Сильний зворотній зв'язок.
Можливість змінювання  сценарію и форми сеансу.	Вимагає від аналітика високої напруги
Відсутність формальних методик проведення
Труднощі протоколювання результатів


Анкета не повинна бути монотонною і одноманітною, тобто викликати нудьгу або втому. Це досягається варіаціями форми питань, зміною тематики, вставкою питань-жартів і ігрових питань.
Анкету слід пристосовувати до мови фахівців підприємства.
Питання впливають один на одного, тому їх послідовність повинна бути строго продуманої.
Бажано прагнути до оптимальної надмірності. Відомо, що в анкеті завжди багато зайвих питань; частина з них необхідна - це так звані контрольні питання, а інша частина повинна бути мінімізована.
Анкеті необхідні «хороші манери», тобто її мова повинна бути ясною, зрозумілою, гранично ввічливою.
 	Інтерв'ю.
Під інтерв'ю розуміємо специфічну форму спілкування інженера по знаннях і експерта, в якій інженер по знаннях задає експерту серію заздалегідь підготовлених питань з метою отримання знань про предметну область. Найбільший досвід в проведенні інтерв'ю накопичений також в журналістиці та соціології.
Інтерв'ю дуже близько до анкетування, коли аналітик сам заповнює анкету, заносячи туди відповіді експерта. Основна відмінність в тому, що інтерв'ю дозволяє аналітику опускати ряд питань в залежності від ситуації, вставляти нові питання в анкету, змінювати темп, урізноманітнити ситуацію спілкування. Крім того, у аналітика з'являється можливість "взяти в полон" експерта своєю чарівністю, зацікавити його самою процедурою і тим самим збільшити ефективність сеансу вилучення.
 	Зазначимо три основні характеристики питань, які впливають на якість інтерв'ю:
• стиль питання (зрозумілість, лаконічність, термінологія);
• порядок питань (логічна послідовність і немонотонність);
• доречність питань (етика, ввічливість).
Питання в інтерв'ю - це не просто засіб спілкування, а й спосіб передачі думок і позиції аналітика. Звідси необхідність фіксувати в протоколах не тільки відповіді, а й питання, попередньо відпрацювавши їх форму і зміст.
Очевидно, що будь-яке питання має сенс тільки в контексті. Тому питання може готувати інженер по знаннях, вже опанувавши ключовим набором знань.
Питання для експерта мають діагностичне значення - кілька відверто "дурних" питань повністю розчарують експерта і відіб'ють у нього бажання до подальшої співпраці.
Вільний діалог
Вільний діалог - це метод вилучення знань у формі бесіди аналітика і фахівця підприємства, в якій немає жорсткого регламентованого плану і запитальника. Це визначення не означає, що до вільного діалогу не треба готуватися. Навпаки, зовні вільна і легка форма вимагає серйозної професійної та психологічної підготовки. Підготовка займає різний час в залежності від ступеня професіоналізму аналітика, але в будь-якому випадку вона необхідна, так як дещо зменшує ймовірність самого нераціонального методу  проб і помилок.
Кваліфікована підготовка до діалогу допомагає аналітику стати справжнім драматургом, тобто запланувати толерантне вилучення знань: приємне враження на початку бесіди з переходом до професійного контакту через пробудження інтересу і завоювання довіри експерта. Для підтримки бажання фахівця продовжувати бесіду корисні бувають  підбадьорюючі співрозмовника фрази-вставки: «Я Вас розумію ...», «... це дуже цікаво» і т. п. Так, в одному з досліджень по техніці ведення професійних журналістських діалогів експериментально доведено, що схвальне і заохочувальну «хмикання» інтерв'юера збільшує довжину відповідей респондента  Щоб розговорити співрозмовника, можна спочатку розповісти про себе, про свою роботу і т.д.
 У вільному діалозі важливо вибрати правильний темп або ритм бесіди: без великих пауз, так як фахівець може відволіктися, але і без «гонки», інакше обидва учасники швидко втомлюються і наростає напруженість; крім того, деякі люди говорять і думають повільно. Уміння чергувати різні темпи, напругу і розрядку в бесіді істотно впливає на результат.
Підготовка до діалогу, так само, як і до інших активних методів вилучення знань, включає складання плану проведення сеансу, в якому необхідно передбачити наступні стадії.
Початок бесіди (знайомство, створення у фахівця підприємства «образу» аналітика, пояснення цілей і завдань роботи).
Діалог з вилучення знань.
Заключна стадія (подяку за витрачений час, підведення підсумків, домовленість про подальші зустрічах).
 Активні групові методи
До груповим методам вилучення знань відносяться:
• рольові ігри;
• дискусії за круглим столом за участю кількох експертів;
• мозковий штурм.
Основна перевага групових методів - це можливість одночасного поглинання знань від декількох експертів, взаємодія яких вносить елемент принципової новизни від накладення різних поглядів і позицій.
Метод круглого столу
Метод круглого столу (термін запозичений з журналістики) передбачає обговорення будь-якої проблеми з обраної предметної області, в якому беруть участь з рівними правами кілька експертів. Зазвичай спочатку учасники висловлюються в певному порядку, а потім переходять до живої вільної дискусії. Число учасників дискусії коливається від трьох до п'яти-семи. Існує і специфіка, пов'язана з поведінкою людини в групі.
По-перше, від інженера по знаннях підготовка круглого столу зажадає додаткових зусиль, як організаційних (місце, час, обстановка, мінеральна вода, чай, кворум і т.д.), так і психологічних (вміння вставляти доречні репліки, почуття гумору, пам'ять на імена та по батькові, здатність гасити конфліктні ситуації і т.д.).
По-друге, більшість учасників будуть говорити під впливом "ефекту фасаду" зовсім не те, що вони сказали б в іншій обстановці, тобто бажання справити враження на інших експертів буде істотно "підсвічувати" їх висловлювання.
Завдання дискусії - колективно, з різних точок зору, під різними кутами досліджувати спірні гіпотези предметної області. Зазвичай емпіричні області багаті таким дискусійним матеріалом. Для гостроти на круглий стіл запрошують представників різних наукових напрямків і різних поколінь, це також зменшує небезпеку отримання односторонніх знань.
Кілька практичних порад щодо процедурних питань круглого столу перед початком дискусії ведучому слід:
• переконатися, що все правильно розуміють завдання (тобто відбувається сеанс вилучення знань);
• встановити регламент і чітко сформулювати тему.
По ходу дискусії простежити, щоб занадто емоційні й балакучі експерти не підмінили тему і критика позицій один одного була обґрунтованою.
Мозковий штурм
Мозковий штурм або мозкова атака - один з найбільш поширених методів розкріпачення і активізації творчого мислення. Вперше цей метод був використаний в США як спосіб отримання нових ідей в умовах заборони критики. Помічено, що боязнь критики заважає творчому мисленню, тому основна ідея штурму - це відділення процедури генерування ідей в замкнутій групі фахівців від процесу аналізу і оцінки висловлених ідей.
Як правило, штурм триває близько 40 хв. Учасникам (до 10 осіб) пропонується висловлювати будь-які ідеї (жартівливі, фантастичні, помилкові) на задану тему (критика заборонена). Зазвичай висловлюється більш 50 ідей. Регламент до двох хвилин на виступ. Найцікавіший момент штурму - це наступ піка (ажіотажу), коли ідеї починають "фонтанувати", тобто. відбувається мимовільна (несвідома) генерація гіпотез учасниками. При подальшому аналізі всього лише 10 - 15% ідей виявляються розумними, але серед них бувають вельми оригінальні. Оцінює результати зазвичай група експертів, не брала участь в генерації.
Ведучий мозкового штурму - інженер по знаннях - повинен вільно володіти аудиторією, підібрати активну групу експертів - "генераторів", які не затискати погані ідеї - вони можуть служити каталізатором хороших. Мистецтво ведучого - це мистецтво задавати питання аудиторії, "підігріваючи" генерацію. Питання служать "гачком", яким витягуються ідеї. Питання також можуть зупиняти багатослівних експертів і служити способом розвитку ідей інших.
Основний девіз штурму - "чим більше ідей, тим краще". Фіксація сеансу - традиційна (протокол або магнітофон).
 	Експертні рольові ігри
Грою називають такий вид діяльності, який відображає (відтворює) інші її види. Поняття експертної гри, або гри з експертами, з метою отримання знань сходить до трьох джерел - це поняття ділової гри, широко використовується при підготовці фахівців і моделюванні, і поняття діагностичної гри, а також комп'ютерні ігри, все частіше застосовуються в навчанні.
Під діловою грою найчастіше розуміють експеримент, де учасникам пропонується виробнича ситуація, а вони на основі свого життєвого досвіду, загальних і спеціальних знань і уявлень приймають рішення. Рішення аналізуються, і розкриваються закономірності мислення учасників експерименту. Саме ця аналізує частина ділової гри корисна для отримання знань. І якщо учасниками такої гри стають експерти, то гра з ділової перетворюється в експертну. З трьох основних типів ділових ігор (навчальних, планово-виробничих і дослідницьких) до експертних найближче дослідні, які використовуються для аналізу систем, перевірки правил прийняття рішень.

 

Рис 12.2. Класифікація експертних ігор

Діагностична гра - це та ж ділова гра, але застосовується конкретно для діагностики методів прийняття рішення в медицині (діагностика методів діагностики). Ці ігри виникли при дослідженні способів передачі досвіду від кваліфікованих лікарів новачкам. У нашому розумінні діагностична гра - це гра, безумовно, експертна без будь-яких застережень, тільки з жорстко закріпленою предметною областю - медициною.
Відповідно до введеної класифікації розділимо експертні гри на (рис.2):
• індивідуальні;
• групові.
А так же передбачають використання спеціального обладнання та застосування комп'ютерної техніки.
Плідність моделювання реальних ситуацій в іграх підтверджується сьогодні практично у всіх областях науки і техніки. Вони розвивають логічне мислення, здатності швидко приймати рішення, викликають інтерес у експертів.
Індивідуальні гри з експертом
В цьому випадку з експертом грає інженер по знаннях, який бере на себе яку-небудь роль в ситуації, що моделюється. Наприклад, гра "Вчитель і учень", в якій інженер по знаннях бере на себе роль учня і на очах експерта виконує його роботу, а експерт поправляє помилки "учня". Ця гра - зручний спосіб розговорити сором'язливого експерта.
В іншій грі інженер по знаннях бере на себе роль лікаря, який добре знає хворого, а експерт - роль консультанта. Консультант задає питання, робить прогноз про доцільність застосування того чи іншого виду лікування. Така гра "двох лікарів" дозволила, наприклад, виявити, що експерту знадобилося всього 30 питань для успішного прогнозу, в той час як первинний запитальник, складений медиками для цієї ж мети, містив 170.
Основні поради інженеру по знаннях з проведення індивідуальних ігор:
• грайте сміливіше, придумуйте гри самі; не нав'язуйте гру експерту, якщо він не розташований; в грі "не тисніть" на експерта;
• не забувайте мети гри; грайте весело, непересічно; не забувайте про час і про те, що гра втомлює для експерта.
Рольові ігри в групі
Групові ігри передбачають участь в грі кількох експертів. До такої гри зазвичай заздалегідь складається сценарій, розподіляються ролі, до кожної ролі готується портрет-опис і розробляється система оцінювання гравців.
Існує кілька способів проведення рольових ігор. В одних іграх гравці придумують собі нові імена і грають під ними; в інших - гравці переходять на "ти"; по-третє ролі вибирають гравці, по-четверте ролі витягають за жеребом. Роль - це комплекс зразків поведінки. Роль пов'язана з іншими ролями. "Короля грає свита". Оскільки в нашому випадку режисером і сценаристом є інженер по знаннях, то йому і надається повна свобода у виборі форми проведення гри.
Створення ігрової обстановки зажадає чимало фантазії і творчої вигадки від інженера по знаннях. Рольова гра, як правило, вимагає деяких найпростіших заготовок (наприклад, табличок "Директор", "Бухгалтерія", "Плановий відділ", спеціально надрукованих інструкцій з правилами гри). Але головне, звичайно, щоб експерти в грі дійсно "заграли", розкріпачилися і "розкрили свої карти".
Ігри з тренажерами
Ігри з тренажерами в значній мірі ближче немає ігор, а до імітаційних вправ у ситуації, наближеної до дійсності.
Наявність тренажера дозволяє відтворити майже виробничу ситуацію і поспостерігати за експертом. Тренажери широко застосовують для навчання (наприклад, льотчиків або операторів атомних станцій). Очевидно, що застосування тренажерів для вилучення знань дозволить зафіксувати фрагменти "летючих" знань, що виникають під час і на місці реальних ситуацій і випадають з пам'яті при виході за межі ситуації.
Комп'ютерні експертні гри
Ідея використовувати комп'ютери в ділових іграх відома давно. Але тільки коли комп'ютерні ігри взяли в полон практично всіх користувачів персональних ЕОМ від малого до великого, стала очевидною особлива привабливість ігор такого роду. Комп'ютерні ігри зазвичай поділяють на:
• позиційні ігри (шахи, шашки, го);
• динамічні ігри (пов'язані зі швидкістю реакції - стрілянина по рухомій мішені);
• видовищні або діалогові фільми, де користувач може впливати на сюжет;
• навчальні, в яких користувач, граючи, освоює якісь навички або дізнається щось нове для себе.
Очевидно, що експертні гри повинні поєднувати елементи перерахованих вище класів.
 	Текстологічні методи
Група текстологічних методів об'єднує методи здобування знань, засновані на вивченні спеціальних текстів з підручників, монографій, статей, методик та інших носіїв професійних знань.
Завдання вилучення знань з текстів можна сформулювати як задачу розуміння і виділення сенсу тексту. Сам текст на природній мові є лише провідником сенсу, а задум і знання автора лежать у вторинній структурі (смисловій структурі або макроструктуру тексту), що настроюється над природним текстом
При цьому можна виділити дві такі смислові структури: M1 сенс, який намагався закласти автор, це його модель світу, і М2 сенс, який осягає читач, в даному випадку інженер по знаннях в процесі інтерпретації I. При цьому Т - це словесне вбрання М1, тобто результат вербалізації V.
Складність процесу полягає у принциповій неможливості збігу знань, що утворюють М1 і M2, через те, що М1 утворюється за рахунок сукупності уявлень, потреб, інтересів і досвіду автора, лише мала частина яких знаходить відображення в тексті Т. Відповідно і М2 утворюється в процесі інтерпретації тексту Т за рахунок залучення всієї сукупності наукового і людського багажу читача.
Постає завдання з'ясувати, за рахунок чого можна досягти максимальної адекватності М1 і М2, пам'ятаючи про те, що розуміння завжди відносно. Розглянемо докладніше, які джерела живлять модель М1 і створюють текст Т. Як правило присутні два компоненти будь-якого наукового тексту. Це первинний матеріал спостережень і система наукових понять в момент створення тексту. На додаток до цього, на наш погляд, крім об'єктивних даних експериментів і спостережень, в тексті обов'язково присутні суб'єктивні погляди автора, результат його особистого досвіду, а також деякі "загальні місця", або "вода". Крім того, будь-який науковий текст містить запозичення з інших джерел (статей, монографій) і.т.д.
Під час вилучення знань аналітику, інтерпретує текст, доводиться вирішувати задачу декомпозиції цього тексту на перераховані вище компоненти для виділення істинно значущих для реалізації бази знань фрагментів. Складність інтерпретації наукових і спеціальних текстів полягає ще і в тому, що будь-який текст набуває сенсу тільки в контексті, де під контекстом розуміється оточення, в яке "занурений" текст.
Основними моментами розуміння тексту є:
• висування попередньої гіпотези про сенс всього тексту (передбачення);
• визначення значення незрозумілих слів (тобто спеціальної термінології);
• виникнення загальної гіпотези про зміст тексту (про знання);
• уточнення значення термінів і інтерпретація окремих фрагментів тексту під впливом загальної гіпотези (від цілого до частин);
• формування деякої смислової структури тексту за рахунок встановлення внутрішніх зв'язків між окремими важливими (ключовими) словами і фрагментами, а також за рахунок утворення абстрактних понять, узагальнюючих конкретні фрагменти знань;
• коригування загальної гіпотези щодо містяться в тексті фрагментів знань (від частин до цілого);
• прийняття основної гіпотези, тобто формування М2.
Слід зазначити наявність як дедуктивної (від цілого до частин), так і індуктивного (від частин до цілого) складової процесу розуміння.
Центральними моментами процесу I є кроки формування смислової структури або виділення "опорних", або ключових, слів, а також заключне охоплення "смислових віх" в єдину семантичну структуру. В якості ключового слова може служити будь-яка частина мови (іменник, прикметник, дієслово і т.д.) або їх поєднання. Існує гіпотеза лінгвостатістікі про те, що найбільш вживані слова є найбільш важливими з точки зору змісту тексту, тобто відображають його тематичну структуру.
Підготовкою до прочитання спеціальних текстів є вибір спільно з експертами деякого "базового" списку використаних джерел, який поступово введе аналітика в предметну область. У цьому списку можуть бути підручники для початківців, глави і фрагменти з монографій, популярні видання. Тільки після ознайомлення з "базовим" списком доцільно приступати до читання спеціальних текстів.
Найбільш простим методом є аналіз підручників, в яких логіка викладу зазвичай відповідає логіці предмета, і тому макроструктура такого тексту буде, напевно, більш значима, ніж структура тексту який-небудь спеціальної статті. Аналіз методик утруднений якраз стислістю викладу і практичною відсутністю коментарів, тобто фонових знань, що полегшують розуміння для неспеціалістів. Тому можна рекомендувати для практичної роботи комбінацію перерахованих методів.
На закінчення запропонуємо одну з можливих практичних методик аналізу текстів з метою вилучення і структурування знань.
• Складання "базового" списку літератури для ознайомлення з предметною областю і читання за списком.
• Вибір тексту для здобуття знань.
• Перше знайомство з текстом (побіжне прочитання). Для визначення значення незнайомих слів - консультації з фахівцями або залучення довідкової літератури.
• Формування першої гіпотези про структуру тексту.
• Уважне прочитання тексту з виписуванням ключових слів і виразів, тобто виділення "смислових віх" (компресія тексту).
• Визначення зв'язків між ключовими словами, розробка макроструктури тексту в формі графа або "стисненого" тексту (реферату).
• Формування поля знань на підставі структури тексту.
Підготовка до проведення експертизи
Для проведення якісної експертизи, необхідно враховувати всі аспекти спілкування з експертом ( рис.12.3).
 
Рис. 12.3. Методи підготовки до проведення експертизи

Роль питань в інтерв'ю
Є три основні характеристики питань, які впливають на якість інтерв'ю. це:
мова питання (зрозумілість, лаконічність, термінологія);
порядок питань (логічна послідовність і немонотонність);
доречність питань (етика, ввічливість).
Питання в інтерв'ю - це не просто засіб спілкування, а й спосіб передачі думок і позиції аналітика. Звідси необхідність в протоколах фіксувати не тільки відповіді, а й питання, попередньо ретельно відпрацьовуючи їх форму і зміст.
Очевидно, що будь-яке питання має сенс тільки в контексті. Тому питання може готувати тільки аналітик, вже опанувала специфікою роботи компанії.
Питання мають для фахівців компанії діагностичне значення - кілька відверто дурних питань можуть повністю розчарувати фахівця і відбити в нього бажання до подальшої співпраці.  
Види питань
 Всі питальні речення можна розбити на два типи.
Питання з невизначеністю, що відносяться до всього пропозицією (наприклад: «Дійсно Ви зіткнулися з труднощами при впровадженні« 1С »?).
Питання з неповною інформацією (наприклад: «За яких умов« 1С »Вас не влаштовує?»), Часто починаються зі слів «хто», що »,« де »,« коли »і т.д.
Відкрите питання називає тему або предмет, залишаючи експертам повну свободу в тому, що стосується форми та змісту відповіді ( «Як Ви боретеся зі зривами графіка поставок?»).
У закритому питанні фахівець підприємства вибирає відповідь з набору запропонованих. Наприклад: «Вкажіть, будь ласка, що Ви робите при зриві графіка поставок: а) караю винних, б) підключаю додаткові ресурси, в) звертаюся до партнерів, г) доповідаю начальству». Закриті питання легше обробляти при подальшому аналізі, але вони більш небезпечні, так як «закривають» хід міркувань фахівця і «програмують» його відповідь в певному напрямку. При складанні сценарію інтерв'ю корисно чергувати відкриті і закриті питання, особливо ретельно продумуючи закриті, оскільки для їх складання потрібна певна ерудиція в предметної області.
Особисте питання стосується безпосередньо індивідуального досвіду фахівця ( «Скажіть, будь ласка, Іван Данилович, у Вашій практиці як Ви визначаєте собівартість продукту?»). Особисті питання зазвичай активізують мислення фахівця, «грають» на його самолюбство; вони завжди прикрашають інтерв'ю.
Ніяке питання спрямоване на виявлення найбільш поширених і загальноприйнятих закономірностей предметної області ( «Що впливає на собівартість?»).
При складанні питань слід враховувати, що мовні здібності фахівця, як правило, обмежені і внаслідок скутості, замкнутості або боязкості він може не відразу висловити свою думку і надати знання, які від нього потрібні (навіть якщо припустити, що він їх чітко для себе формулює) . Тому часто при «скутості» співробітників компанії аналітик використовує не прямі запитання, які безпосередньо вказують на предмет або тему ( «Чи застосовуєте Ви методи мережевого планування?»), А непрямі, які лише неявно вказують на цікавий для предмет ( «А що Ви думаєте про доцільності застосування ... »). Іноді доводиться ставити кілька десятків непрямих питань замість одного прямого.
Вербальні питання - це традиційні усні запитання. Питання з використанням наочного матеріалу урізноманітнюють інтерв'ю і знижують стомлюваність інтерв'юйованого. У таких питаннях використовують фотографії, малюнки і картки. Наприклад, фахівцеві пропонуються кольорові картонні картки, на яких виписані документи, з якими він працює. Потім аналітик просить розкласти ці картки в порядку убування значущості.
Розподіл питань по функції на основні, зондувальні, контрольні пов'язано з тим, що часто основні питання інтерв'ю, спрямовані на виявлення знань, не спрацьовують, фахівець з якихось ознаках йде в бік від питання, відповідає нечітко. Тоді аналітик використовує зондувальні питання, які направляють міркування фахівця в потрібну сторону. Наприклад, якщо не спрацював основне питання "Хто має право підпису договору?", Аналітик починає ставити зондувальні питання: «Чи завжди процес оформлення договору візує директор? А якщо його немає? » і т.п.
Контрольні питання застосовують для перевірки достовірності та об'єктивності інформації, отриманої в інтерв'ю раніше ( «Скажи Контрольні питання застосовують для перевірки достовірності та об'єктивності інформації, отриманої в інтерв'ю раніше ( «Скажіть, будь ласка, а Ваші філії також вважають собівартість?»). Контрольні питання повинні бути складені хитро, щоб не образити працівників компанії недовірою (для цього використовують повторення питань в іншій формі, уточнення, посилання на інші джерела).
І, нарешті, про нейтральних і навідних питаннях. В принципі інтерв'юеру рекомендують бути неупередженим, отже, і питання його повинні носити нейтральний характер, тобто не повинні вказувати на відношення інтерв'юера до даної теми. Навідні запитання, навпаки, змушують респондента (в даному випадку фахівця підприємства) прислухатися або навіть прийняти до уваги позицію інтерв'юера. Наприклад, нейтральний питання може звучати так: «Які фактори Ви враховуєте при нарахуванні премії співробітникам?». Пряме запитання в тій же ситуації: «Чи не правда, дуже важко оцінити особисті якості співробітників при преміюванні?».
Крім перерахованих вище, корисно розрізняти і включати в інтерв'ю наступні питання:контактні (ламають лід між аналітиком і фахівцем підприємства); буферні (для розмежування окремих тем інтерв'ю); пожвавлюють пам'ять фахівців (для реконструкції окремих випадків з практики);провокують (для отримання спонтанних, непідготовлених відповідей).
Таким чином, ми розглянули різні методи здобування знань, які із застосуванням різних способів подання можна буде використовувати в середовищі інтелектуальних систем.
Контрольні питання
1.  Що таке дані, інформація, знання?
2.  Дайте характеристику стратегій отримання знань	
3. Проведіть класифікацію методів вилучення знань.
     4. Здійсніть характеристику пасивних та активних методів вилучення
           знань.
     5. Дайте оцінку груповим методам вилучення знань.
     6. Які бувають текстологічні методи вилучення знань?

Тема 13.  Формальні логічні моделі представлення знань
В основі моделей такого типу лежить поняття формальної системи, що задається четвіркою виду М =   T, F, A, R  . Множина T є множиною базових елементів різної природи. Важливо, що для множини T існує деякий спосіб визначення належності й неналежності довільного елементі до цієї множини. Процедуру такої перевірки позначимо П(Т). Множина  F є множиною  синтаксичних правил. З їхньою допомогою з елементів Т утворять синтаксично правильні сукупності. Декларується існування процедури П(F), за допомогою якої за кінцеве число кроків можна одержати відповідь на питання,  чи є" сукупність Х синтаксично правильною".                      
У множині синтаксично правильних сукупностей виділяється деяка підмножина А. Елементи А називаються аксіомами. Як і для інших складових формальної системи, повинна існувати процедура П(А), за допомогою якої можна для будь-якої синтаксично правильної сукупності одержати відповідь на питання про належність її до множини  А.
Множина R є множиною правил висновку. Застосовуючи їх до елементів А, можна одержати нові синтаксично правильні сукупності, до яких можна знову застосовувати правила висновку з R. Так формується множина  виведених у даній формальній системі сукупностей. Якщо є процедура П(R),   за допомогою якої можна визначити для будь-якої синтаксично правильної сукупності чи є вона виведеною, то відповідна формальна система називається розв'язаною. Це показує, що саме правила висновку є найбільш складною складовою формальної системи.
Для знань, що входять у базу знань, можна вважати, що множину А утворять всі інформаційні одиниці, які уведені в базу знань ззовні, а за допомогою правил висновку з них виводяться нові довільні знання. Інакше кажучи, формальна система являє собою генератор породження нових знань, що утворять множину виведених у даній системі знань. Це властивість логічних моделей робить їх притягальними для використання в базах знань. Вона дозволяє зберігати в базі знань лише ті знання, які утворять множину  А, а всі інші знання одержувати з них за правилами висновку.
Поняття нечіткої логіки і нечітких систем. Системи штучного інтелекту, засновані на використанні математичного апарату нечіткої логіки (Л. Заде, 1981), є найбільш простими представниками систем штучного інтелекту. Дані системи прийнято називати також терміном «нечіткі» системи. Зазвичай вони використовуються для вироблення (автоматично) командних або керуючих впливів на керовані об'єкти, що не належать до категорії об'єктів відповідального призначення. Характерною (відмінною) особливістю нечітких систем (в порівнянні з іншими класами інтелектуальних систем) є використання правил логічного висновку, «закладених» у них людиною. Дані правила відносяться до найпростіших продукційних правил, використовуваних в експертних системах (ще більш просунутий клас інтелектуальних систем) і мають вигляд: ЯКЩО (словесна запис умови), ТО (словесна запис дії).
Так нечіткі інтелектуальні системи можна використовувати:
а) в об'єктах побутової техніки: пральних машинах, мікрохвильових печах, холодильниках і т.д.
б) в промислових і господарських об'єктах: системах управління паровими і водяними котлами, будівельними кранами, пристроями транспортування вантажів і т.д.
в) в комп'ютерних іграх для формування інтелекту комп'ютера та ін.
         Нечіткі алгоритми. Поняття нечіткого алгоритму, вперше введене Л. Заде, є важливим інструментом для наближеного аналізу складних систем і процесів прийняття рішення. Під нечітким алгоритмом розуміється впорядкована множина нечітких інструкцій (правил), в формулюванні яких містяться нечіткі вказівки (терми).
Наприклад, нечіткі алгоритми можуть включати в себе інструкції типу:
а) x = дуже мале
б) x приблизно дорівнює 5
в) злегка збільшити
г) якщо x - в інтервалі [4.9, 5.4]
д) ЯКЩО x -мала, ТО y - велике, ІНАКШЕ - y - невелике.
Використані тут терми «дуже мале», «приблизно дорівнює», «злегка збільшити», «вибрати в інтервалі» і т.п. відображають неточність представлення вихідних даних і невизначеність, притаманну самому процесу прийняття рішення.
Дві останні інструкції (г і д) представляють собою (або нечіткі висловлювання), побудовані за схемою логічної імплікації ЯКЩО - ТО, де умова ЯКЩО відповідає прийняттю лінгвістичної змінної x деякого значення А, а висновок (дія) ТО означає необхідність вибору значення В для лінгвістичної змінної y
 
 Зазначені правила набули широкого поширення в техніці. Механізм побудови правил прийняття рішень в конкретному завданні виглядить при цьому наступним чином. На основі заданої мети (рис. 13.1) за допомогою механізму спрощення, що дозволяє виділити найбільш істотні і відсікти другорядні чинники, визначаються початковий стан системи, бажаний кінцевий стан і правила дії, що призводять систему в бажаний кінцевий стан.
Набір таких правил, які забезпечують отримання «хорошого» (як правило), наближеного вирішення поставленого завдання, реалізується за допомогою механізму виведення.
 









Рис.13.1. Механізм побудови правил прийняття рішень в конкретному завданні
  Розглянемо особливості виконання нечітких правил на наступному прикладі.
 Припустимо, що необхідно регулювати відкриття охолоджуючого вентиля   в залежності від виміряного значення температури Твх.
 Скористаємося для цих цілей двома правилами, записаними в лінгвістичної формі 1-е з яких має наступний вигляд:
Правило 1. ЯКЩО температура = низька, ТО охолоджуючий вентиль напіввідкритий.
Будемо вважати, що нечіткі підмножини А1 (температура = низька) і В1 (вентиль = напіввідкритий) визначаються функціями належності, наведеними на рис.13.2.
 
 
Рис.13.2.Функції належності нечіткі підмножин А1 (температура = низька) і В1 (вентиль = напіввідкритий)
 Якщо виміряне значення температури Твх дорівнює, наприклад, 18оС, то ступінь належності цього значення підмножині А1. Вважаючи, що менше значення ступеня виконання умови ЯКЩО має супроводжуватися зменшенням значення функції належності виведення ТО обмежимо можливі значення функції   на рівні 0.2, тобто отримаємо
 
(Відповідна функція виділена в правій половині рис. 2)
Сформулюємо 2-е лінгвістичне правило в такий спосіб:
Правило 2. ЯКЩО температура = середня, ТО охолоджуючий вентиль = майже відкрито.
Функції належності   і   де А2 і В2 позначають відповідно нечіткі підмножини, що містяться в умови і виведення правила 2, показані на рис. 13.3.
Ступінь належності виміряного значення Твх = 18оС підмножині А2 тут вже дорівнює 0.5.	

 
 
Рис.13. 3. Функції належності нечіткі підмножин А2 (температура = середня) і В2 (вентиль = майже відкрито)

Дотримуючись того ж прийому, для функції належності   отримуємо:
 
 .
 Зауважимо, що наведені вище правила 1 і 2 діють спільно і пов'язані один з одним за допомогою союзу АБО, тобто можна записати.
 Правило 1. ЯКЩО температура = низька, ТО охолоджуючий вентиль = напіввідкритий
АБО
Правило 2. ЯКЩО температура = середня, ТО охолоджуючий вентиль = напіввідкритий.
Результуюча функція належності
    знаходиться за формулою 
  
Графік отриманої функції належності представлений на рис.13.4. 
 
 
Рис.13. 4. Графік отриманої результуюча функції належності за правилами 1 і 2
Основні етапи побудови систем інтелектуального управління на основі нечіткої логіки:
6.	Визначення входів і виходів системи, що створюється.
7.	Визначення для кожного входу і виходу функції належності.
8.	Розробка бази правил для нечіткої системи.
9.	Вибір і реалізація алгоритму нечіткого висновку.
10.	Аналіз результатів роботи системи, що створена.
Загальний логічний висновок виконується за наступною схемою (рис. 13.5).
 
Рис. 13. 5. Загальна схема логічного висновку.
Розглянемо цю схему більш докладно.
Нечіткість (введення нечіткості, фазифікація).
Функції належності, що визначені для вхідних змінних, застосовуються до їх фактичних значень для визначення ступеня істинності кожної передумови кожного правила.
Логічний висновок.
Обчислене значення істинності для передумов кожного правила застосовується до висновків кожного правила. Це призводить до однієї нечіткої підмножини, яка буде призначена кожній змінній виводу для кожного правила. В якості правил логічного висновку зазвичай використовуються тільки операції min (мінімум) або prod (множення). У логічному висновку prod функція належності відсікається по висоті, що відповідає обчисленому ступеню істинності передумови правила (нечітка логіка "ТА"). У логічному висновку prod функція належності виведення масштабується за допомогою обчислень ступеня істинності передумови правила.
Композиція.
Нечіткі підмножини, що призначені для кожної змінної виводу (у всіх правилах) об’єднуються разом, щоб сформувати одну нечітку підмножину для кожної змінної виводу. При подібному об’єднанні зазвичай використовується операції  max (максимум) або sum (сума). При композиції max комбінований висновок нечіткої підмножини будується як поточковий максимум по всім нечіткім підмножинам (нечітка логіка "АБО"). При композиції sum комбінований висновок нечіткої підмножини будується як поточкова сума за всіма нечіткими підмножинами, призначеними змінними виводу правилами логічного висновку.
Приведення до чіткості (дефазифікація).
Це додатковий етап, який корисно використовувати, коли необхідно перетворити нечіткий набір висновків у чітке число.
Методи нечіткого логічного виведення займають дуже важливе місце в теорії та практиці штучного інтелекту, оскільки вони дозволяють формалізувати міркування, в яких присутні недостатньо визначені поняття.
Розглянемо приклад. Нехай є знання експерта про те, що, якщо рівень води високий, то необхідно відкрити клапан. Це правило може бути записано у вигляді такої продукції продукційної системи:

Якщо РІВЕНЬ ВИСОКИЙ, то ВІДКРИТИ КЛАПАН.

Що повинна порекомендувати експертна система, якщо рівень води ДОВОЛІ ВИСОКИЙ? Людина зразу робить висновок, що клапан потрібно ЗЛЕГКА ВІДКРИТИ. Але як до такого висновку може прийти інтелектуальна система?
Для формалізації вирішення цієї задачі необхідно зробити такі основні кроки:
	визначити експертним нечіткі множини, які відповідають поняттям РІВЕНЬ ВИСОКИЙ та ВІДКРИТИ КЛАПАН;
	визначити експертним шляхом нечітку множину, яка відповідає поняттю РІВЕНЬ ДОВОЛІ ВИСОКИЙ;
	визначити порогове значення a, яке дорівнює максимальному значенню перетину множин ВИСОКИЙ і ДОВОЛІ ВИСОКИЙ;
	визначити нечітку множину, яка відповідає поняттю ЗЛЕГКА ВІДКРИТИ КЛАПАН; функція належності цієї множини визначається як зріз функції, що відповідає поняттю ВІДКРИТИ КЛАПАН на рівні a;
	провести дефазифікацію, тобто за функцією належності,  за аналітичним виглядом функції ЗЛЕГКА ВІДКРИТИ КЛАПАН обчислити конкретне значення кута, на який слід відкрити клапан; це значення визначається як центр тяжіння, або середнє значення функції.
Розглянемо алгоритми реалізації схеми логічного висновку, що наведена на рис. 13.5. Алгоритми нечіткого виведення розрізняються головним чином видом використовуваних правил, логічних операцій і різновидом методу дефазифікації. Розроблено моделі нечіткого висновку Мамдані, Сугено, Ларсена, Цукамото.
Алгоритм Мамдані (Mamdani)
Даний алгоритм математично може бути описаний наступним чином (рис.13.6):
6.	Нечіткість: знаходяться ступені істинності для передумов кожного правила: A1(x0), A2(x0), B1(y0), B2(y0).
7.	Нечіткий висновок: знаходяться рівні «відсікання» для передумов кожного з правил (з використанням операції min):
 
8.	де через «Λ», як і раніше, позначена операція логічного мінімуму (min), потім знаходяться відсічені функції належності:
 
9.	Композиція: з використанням операції max (що позначається як «V») виконується об'єднання знайдених усічених функцій, що приводить до одержання підсумкової нечіткої підмножини для змінної виходу з функцією належностіі:
 
10.	Нарешті, приведення до чіткості (для знаходження z0) проводиться, наприклад, центроїдним методом (як центр ваги для кривої μΣ(z)):
 
 
Рис.13.6.  Алгоритм Мамдані
Алгоритм Сугено (Sugeno)
Сугено (Sugeno) і Такагі (Takagi) використали набір правил в наступній формі (як і раніше, приводимо приклад двох правил):
П1: якщо x є A1 та y є B1 , тоді z1=a1x+b1y,
П2: якщо x є A2 та y є B2 , тоді z2=a2x+b2y.
Представлення алгоритму (рис.7):
4.	Перший етап – як в алгоритмі Мамдані.
5.	На другому етапі знаходяться  та індивідуальні виходи правил:
 
6.	На третьому етапі визначається чітке значення змінної виводу:
 
Наведене представлення відноситься до алгоритму Сугено 1-го порядку.
Якщо правила записані в формі:
П1: якщо x є A1 та y є B1 , тоді z1=с1,
П2: якщо x є A2 та y є B2 , тоді z2=с2,
то говорять, що заданий алгоритм Сугено 0-го порядку.
 
Рис.13.7.  Алгоритм Сугено
Алгоритм Tsukamoto
Вихідні дані і база знань такі ж, як і в алгоритмі Mamdani, але передбачається, що функції С1 (z), С2 (z) є монотонними.
Етапи нечіткого виведення (рис.8).:
1. Фазифікації: знаходяться ступеня істинності для передумов кожного правила: A1 (x0), A2 (x0), B1 (y0), B2 (y0).
2. Висновок: Знаходяться рівні відсікання для передумов кожного з правил з використанням операції мінімум:
 
 
де   - операція логічного мінімуму.
Потім знаходяться чіткі значення z1 і z2 з рівнянь
 
3. Визначається чітке значення змінної виводу, як зважене середнє z1 і z2:
 
 
У загальному випадку чітке значення  z0 визначається за формулою методу центру ваги.
 
Рис. 13.8. Алгоритм Tsukamoto
Алгоритм Larsen (рис. 13.9)
Вид бази знань збігається з видом бази знань для алгоритму Mamdani.
1. Нечіткість: знаходяться ступеня істинності для передумов кожного правила:
A1 (x0), A2 (x0), B1 (y0), B2 (y0).
2. Висновок: знаходяться рівні відсікання для передумов кожного з правил з
використанням операції мінімум:
 
 
де   - операція логічного мінімуму.
В алгоритмі Larsen нечітке підмножина змінної виводу для
кожного правила знаходиться з використанням оператора множення за формулою
 
 
3. Композиція: з використанням операції максимум (позначається як « »)
виробляється об'єднання знайдених приватних нечітких підмножин.
Знаходиться підсумкове нечітке підмножина для змінної виходу з
функцією належності:
 
 
(В загальному випадку    
 
4. Приведення до чіткості також проводиться методом центра ваги.
 
Рис. 13.9. Алгоритм Larsen
Контрольні питання
1.	Охарактеризуйте поняття нечіткої логіки і нечітких систем.
2.	Як формуються правила в нечіткій логіці?
3.	Які основні етапи побудови систем інтелектуального управління на основі нечіткої логіки?
4.	Особливості алгоритму Мамдані.
5.	Особливості алгоритму Сугено.
6.	Особливості алгоритму Tsukamoto.
7.	Особливості алгоритму Ларсена.
8.	Які існують методи дефазифікації?
9.	Області застосування нечіткої логіки.
10.	Відмінні риси fuzzy-систем в порівнянні з іншими системами прийняття рішень.
11.	В яких областях рекомендується використання апарату нечіткої логіки?

Тема 14.  Продукційні моделі представлення знань
„Продукція” або "правило-продукція" являє собою пару "причина-наслідок". У найпростіших випадках продукція схожа на відому логічну зв'язку "імплікація" ("якщо - то") Продукції, таким чином, являють собою правила, які іноді називають "евристиками" Ці правила закодо¬вані у вигляді тверджень типу "ЯКЩО (виконується конкретна умова), ТОДІ  (зро¬би ВІДПОВІДНИЙ ВИСНОВОК або виконай конкретну дію)"
Правила такого виду дозволяють різко скоротити число варіантів можливого пошуку, що має неабияке значення навіть для суперЕОМ.
Математично правило продукції можна подати формулою
Р1А, Р2А, Р3А,...,Р1А  –> А,
де Р, (і=1,2,3,...,п) - умови застосування, А - висновок, який у загальному випадку трактується як дія (що суттєво відрізняє такі продукції від імплікацій).
Продукція - це пропозиція-образ виду «Якщо, то», за яким здійснюється пошук в базі знань.
В продукції виділяють ліву частину (починається з «якщо» і закінчується перед «то») і праву (починається після «то»). ліва частина продукції - антецедент - умова виконання правої частина продукції. Права частина - консеквент - дія, що виконується в разі знаходження елементів, що задовольняють лівої частини. Дія може бути проміжним і виступати потім в якості консеквента або цільовим, завершальним процедуру виведення.
Антецедент формується з фактів, вхідних даних задачі і логічних зв'язків (та, або, ні). Консеквент може представляти із себе дію зі зміни фактів, даних, рекомендацію, рішення задачі. Крім цього, будь-яка продукція має ім'я і пріоритет, який визначає послідовність перевірки продукцій машиною виведення.
Продукції відображають причинно-наслідкові зв'язки, які дозволяють людині приймати рішення, базуючись на знаннях і припущеннях про те, що є і що буде, якщо щось зробити.
Задача-приклад № 1.
Побудувати продукційну модель подання знань в предметній області «Ресторан» (відвідування ресторану).
Опис процесу рішення. Для побудови продукційної моделі представлення знань необхідно виконати наступні кроки:
1) Визначити цільові дії завдання (що є рішеннями).
2) Визначити проміжні дії або ланцюжок дій, між початковим станом і кінцевим (між тим, що є, і цільовою  дією).
3) Випередити умови для кожної дії, при якому його доцільно і можливо виконати. визначити порядок виконання дій.
4) Додати конкретики при необхідності, виходячи з поставленого завдання.
5) Перетворити отриманий порядок дій і відповідні їм умови в продукції.
6) Для перевірки правильності побудови продукцій записати ланцюжок продукцій, явно простеживши зв'язку між ними.
Цей набір кроків передбачає рух при побудові продукційної моделі від результату до початкового стану, але, можливо, і рух від початкового стану до результату (кроки 1 і 2).
Розв’язання:
1) Обов'язкова дія, яке виконується в ресторанах - споживання їжі і її оплата. Значить, є вже два цільових дії «З'їсти їжу» і «Оплатити», які взаємопов'язані і слідують один за одним.
2) Перш ніж що-небудь з'їсти в ресторані, туди потрібно прийти, дочекатися офіціанта і зробити замовлення. Крім того, потрібно вибрати, в який саме ресторан піти. Значить, ланцюжок проміжних дій: «вибір ресторану і шлях туди», «зробити замовлення офіціантові».
3) Перш ніж йти в ресторан, необхідно переконатися, що є необхідна сума грошей. Вибір ресторану може обумовлюватися багатьма причинами, виберемо територіальна ознака - до якого ближче того і йдемо. У різних ресторанах працюють різні люди,тому в залежності від вибору ресторану, офіціанти будуть різні. Крім того, різні ресторани спеціалізуються на різних кухнях, тому замовлені страви будуть у різних ресторанах відрізнятися .Значить спочатку йдуть дії, що дозволяють вибрати ресторан, потім характеризують ресторани, а вже після замовлення, їжа, і оплата замовлення.
4) Нехай в задачі будуть розглядатися два ресторани: «Смачна їжа» і «Смакота». Перший - паб і замовлення приносять швидше, ніж у другому, Другий - піцерія. У першому працює офіціант Сергій, а у другому офіціантка Марина. Петро - це клієнт.
5) Вищеописане можна перетворити в наступні пропозиції типу"Якщо-То":
• Якщо суб'єкт хоче їсти і у суб'єкта є достатня сума грошей, то суб'єкт може піти в ресторан.
• Якщо суб'єкт ближче до ресторану «Смачна їжа», ніж до ресторану «Смакота» і суб'єкт може піти в ресторан, то суб'єкт йде в ресторан «Смачна їжа».
• Якщо суб'єкт ближче до ресторану «Смакота», ніж до ресторану «Смачна їжа» і суб'єкт може піти в ресторан, то суб'єкт йде в ресторан«Смакота».
• Якщо суб'єкт йде в ресторан «Смакота» і в ресторані «Смакота» працює офіціант Марина, то у суб'єкта приймає замовлення Марина.
• Якщо суб'єкт йде в ресторан «Смачна їжа» і в ресторані «Смачна їжа»працює офіціант Сергій, то у суб'єкта приймає замовлення Сергій.
• Якщо суб'єкт вибрав страви і у суб'єкта приймає замовлення Марина, то замовлення принесуть через 20 хв.
• Якщо суб'єкт вибрав страви і у суб'єкта приймає замовлення Сергій, то замовлення принесуть через 10 хв.
• Якщо замовлення принесуть через 20 хв. або замовлення принесуть через 10 хв., то суб'єкт може їсти.
• Якщо суб'єкт може їсти, то після їжі суб'єкт повинен оплатити замовлення.
Введемо позначення для фактів (Ф), дій (Д) і продукцій (П), тоді:
Суб'єкт = Петро;
Ф1 = суб'єкт хоче їсти;
Ф2 = у суб'єкта є достатня сума грошей;
Ф3 = суб'єкт ближче до ресторану «Смачна їжа», ніж до «Смакота»;
Ф4 = в ресторані «Смакота» працює офіціант Марина;
Ф5 = в ресторані «Смачна їжа» працює офіціант Сергій;
Ф6 = суб'єкт вибрав страви;
Д1 = суб'єкт може піти в ресторан;
Д2 = суб'єкт йде в ресторан «Смачна їжа»;
Д3 = суб'єкт йде в ресторан «Смакота»;
Д4 = у суб'єкта приймає замовлення Марина;
Д5 = у суб'єкта приймає замовлення Сергій;
Д6 = замовлення принесуть через 20 хв.
Д7 = замовлення принесуть через 10 хв.
Д8 = після їжі суб'єкт повинен оплатити замовлення.
Для продукцій встановимо пріоритет (в дужках перед коми, ніж вище пріоритет, ніж раніше перевіряється правило).
П1 (4, Ф1 і Ф2) = Д1;
 
Рис.14.2. Схема продукцій предметної області «Ресторан»
П2 (5, Ф3 і Д1) = Д2;
П3 (4 було Ф3 і Д1) = Д3;
П4 (3, Д3 і Ф4) = Д4;
П5 (3, Д2 і Ф5) = Д5;
П6 (2, Д4) = Д6;
П7 (2, Д5) = Д7;
П8 (1, Д6 або Д7) = Д8;
6) Для відображення взаємозв'язку продукцій побудуємо граф (рис.14.1).

Контрольні питання
1.Наведіть класифікацію моделей представлення знань.
2. . Особливості моделей знань на продукційних правидах.
3. Наведіть приклади моделей знань на продукційних правидах.
 4. Як здійснюється вибір правил?




Тема 15.  Представлення знань з використання семантичних мереж
У самому загальному випадку семантична мережа являє собою інформаційну модель предметної області (сукупність фактів і тверджень із БД) і має вигляд графа, вершини якого відповідають об'єктам (поняттям) предметної області, а дуги - відносинам між ними . У семантичній мережі виражено, насамперед, інтенсіональне знання про проблемне оточення. У ній з'єднане як синтаксичне (структурне), так і семантичне (стосовне до даної предметної області) знання, що дозволяє досить легко його обновляти у відносно однорідних структур.
Важливою рисою семантичних мереж є можливість представляти знання більше природним і структурованим чином, чим це робиться в інших формалізмах (наприклад, у продукційних системах і т.п.).
Семантична мережа - це система знань, що має певний зміст у вигляді цілісного образа мережі, вузли якої відповідають поняттям й об'єктам, а дуги - відносинам між об'єктами.
Отже, усілякі мережі можна розглядати як мережі, що входять до складу семантичної мережі.  
Сама о собі семантична мережа є моделлю пам'яті й не розкриває, яким способом здійснюється представлення знань. Тому  семантичні мережі повинні розглядатися як метод подання знань із можливостями структурування цих знань, процедурами їх використання й механізмом висновку.
В ієрархічній структурі понять існують відносини, принаймні, двох типів:
-	 відношення включення або збігу (IS- A);
-	 відношення «ціле - частина» (PART- OF).
Відношення включення або збіги. Для цих відносин характерним є те, що екземпляри понять нижнього рівня містять всі атрибути понять верхнього рівня. Ця властивість називається спадкуванням атрибутів між рівнями ієрархії IS- A.
Відношення «ціле - частина» можна ілюструвати реченням
«ніс» PART- OF«тіла»,
 яке характеризує те, що екземпляри поняття «ніс» є частиною будь-якого екземпляра поняття «тіло».
Найбільше часто використовується графічне представлення семантичних мереж у вигляді діаграми. Таке речення
«усі ластівки - птахи»
можна представити графом, що містить дві вершини з відовіднимипоняттями і дугу, що вказує відношення між ними (рис.15.1).
 
Рис. 15.1. Семантична мережа 1
Якщо ластівка має конкретне ім'я, наприклад, Ласта, то семантична мережа може бути поширена (рис. 15.2).
 
Рис. 15.2. Семантична мережа 2
Поряд з тим, що за допомогою даної мережі описані два факти
«Ласта - ластівка»
«ластівка - птах»
з її можна вивести, використовуючи відношення спадкування, факт
«Ласта - птах»
Цей факт показує, що спосіб подання семантичною мережею дозволяє легко робити висновки завдяки ієрархії спадкування.
Семантичними мережами можна також представляти знання, що стосуються атрибутів об'єкта. Наприклад, факт «Птахи мають крила» можна відобразити у вигляді рис. 15.3.
 
Рис. 15.3. Семантична мережа 3
Це означає, що, використовуючи відносини «IS- A» й «PART- OF» можна вивести факт «Ласта має крила».
Вершини в семантичній мережі звичайно показують об'єкт проблемної області, концепт, ситуацію й т.п., а дуги - це відносини між ними. При розширенні семантичної мережі в ній виникають додаткові відносини. Наприклад, якщо розглянуту мережу доповнити фактами «Ласта володіє гніздом» й «Ласта володіє гніздом з весни по осінь», то отримаємо семантичну мережу, зображену на рис. 6. Тут гніздо i- це конкретне гніздо, яким володіє Ласта, а для вершини ситуації (володіє j) визначено кілька зв'язків. Така вершина називається надійною рамкою й визначає різні аргументи предиката ситуації.
 
Рис. 15.4. Семантична мережа 4
Семантична мережа являє собою орієнтований граф з позначеними (пойменованими) дугами й вершинами. Основними елементами мережі є вершини й дуги. При цьому вершинам семантичної мережі відповідають поняття, події й властивості (рис. 15.5).
 
Рис. 15.5. Вершини семантичної мережі
Поняття являють собою відомості про абстрактні або фізичні об'єкти предметної області (реального світу).
Події являють собою дії , що проходять, в реальному світі й визначаються:
•	вказівка типу дії;
•	вказівка ролей, які грають об'єкти в цій дії.
Властивості використовуються для уточнення понять і подій. Стосовно до понять вони описують їхні особливості й характеристики (кольори, розмір, якість), а стосовно до подій - тривалість, час, місце.
Дуги графа семантичної мережі відображають різноманіття семантичних відносин, які умовно можна розділити на чотири класи (рис. 15.6).
 
Рис. 15.6. Класифікація семантичних відносин
Лінгвістичні відносини відображають значеннєвий взаємозв'язок між подіями, між подіями й поняттями або властивостями. Лінгвістичні відносини бувають:
•	 дієслівні (час, вид, рід, відмінок);
•	 атрибутивні (кольори, розмір, форма);
•	 відмінковими (див. нижче).
Логічні відносини - це операції, які використовуються при побудові висловлень (алгебра логіки): диз'юнкція, кон'юнкція, інверсія, імплікація.
Теоретико-множинні - це відношення підмножин, відношення частини цілого, відношення множини й елемента. Прикладами таких відносин є IS-A, PART-OF.
Квантифіковані відносини - це логічні квантори спільності й існування. Вони використовуються для подання таких знань як «Будь-який верстат треба ремонтувати», «Існує працівник А, що обслуговує склад Б».
Розглянуті вище приклади семантичних мереж відображали знання про структуру понять й їх взаємозв'язків. Далі розглянемо використання семантичних мереж для подання подій і дій.
Подання структури понять семантичною мережею.
Основою для визначення будь-якого поняття є множина його відносин з іншими поняттями. Обов'язковими відносинами є:
•	 клас, якому належить дане поняття;
•	 властивості, що виділяють поняття із всіх понять даного класу;
•	 приклади (екземпляри) даного поняття.
Тому що терми, які використовуються у визначенні поняття, самі є поняттями, тоді їхнє визначення організується по тій же схемі. В результаті зв'язку поняття утворюють структуру, у загальному випадку мережеву, у якій використовується як мінімум два типи зв'язків (IS- Aй PART- OF).
При поданні подій попередньо виділяються прості відносини, які характеризують основні компоненти події. У першу чергу з події виділяється дія, яка звичайно описуються дієсловом. Далі визначаються:
•	 об'єкти, які діють;
•	 об'єкти, над якими ці дії виконуються.
Всі зв'язки понять, подій і властивостей з дією (дієсловом) називають відмінками або відмінковими відносинами, які відносяться до класу лінгвістичних відносин. Звичайно розглядаються наступні відмінки (Табл. 15.1).
		Таблиця 15.1. Основні відмінки
ВІДМІНОК	Лінгвістичне (відмінкове) відношення, що визначає зв’язок дії з:
агент	- предметом, якій є ініціатором дії
об'єкт	- предметом, що піддається дії
джерело	- розміщення предмета перед дією
приймач	- розміщення предмета після дії
час	- моментом виконання дії
місце	- місцем проведення дії
мета	- дія іншої події

Особливість семантичної мережі як моделі знань складається в єдності БЗ і механізму висновків. При формуванні запиту до БЗ:
•	будується семантична мережа, що відображає структуру запиту;
•	висновок забезпечується за рахунок співставлення загальної мережі БЗ і мережі для запиту.
Розглянемо приклад семантичної мережі, яка відображає підпорядкованість співробітників організації (рис. 15.7).
 
Рис. 15.7. Семантична мережа «Підпорядкованість співробітників організації»
Наведені зв'язки показують підпорядкованість першого співробітника. Інші співробітники зв'язуються через вершини мережі. Інші співробітники зв'язуються через вершини мережі «керує 2», «керує 3» і т.д.
Запит: «Хто керує Сидоровим?» представимо у вигляді підмережі (рис. 15.8).
 
Рис..15.8. Семантична мережа «Хто керує Сидоровим»
Поряд з методом зіставлення, у семантичних мережах використається метод перехресного пошуку, при якому здійснюється:
•	 пошук відносин між поняттями;
•	відповідь на запит формується шляхом виявлення вершини, у якій перетинаються дуги, що йдуть із інших вершин.
Задача-приклад № 1.
Побудувати семантичну мережу, що відображає зв'язки понять при описі знань про структуру поняття юридична особа.
Розв’язання:
Так для поняття «підприємство» у ціймережі (рис. 15.9):
•	визначено клас, якому воно належить, і всі властивості якого воно успадковує («Юридичну особу»);
•	 виділено 3 властивості, які виділяють це поняття із всіх інших понять класу «Юридична особа»;
•	визначено екземпляр даного поняття (об'єкта), а саме «3-д «Оболонь».
 
Рис. 15.9. Приклад семантичної мережі «Юридична особа»

 Контрольні питання
1.Наведіть класифікацію моделей представлення знань.
2. . Особливості моделей знань на семантичних мережах.
3. Наведіть приклади моделей знань на семантичних мережах.
 4. Які існують зв’язки в моделях знань на семантичних мережах?
 




Тема 16.  Фреймові моделі задання знань
На відміну від моделей інших типів, у фреймових моделях фіксується тверда структура інформаційних одиниць, що називається протофреймом. У загальному виді вона виглядає у такий спосіб:
(Ім'я фрейму;
Ім'я слота 1 (значення слота 1) Ім'я слота 2 (значення слота 2) .......... Ім'я слота N (значення слота N).
Значенням слота може бути практично яким завгодно (числа або математичні співвідношення, тексти природною мовою або програми, правила висновку або посилання на інші слоти даного фрейму або інших фреймів). Як значення  слота може виступати набір слот s в більше низького рівня, що дозволяє у фреймових поданнях реалізувати «принцип матрьошки». При конкретизації фрейму його слотам присвоються конкретні імена й відбувається заповнення слотів. Таким чином, із протофреймів виходять фрейми-екземпляри. Перехід від вихідного протофрейма до фрейму-екземпляра може бути багатокроковим, за рахунок поступового уточнення значень слотів.
В основі теорії фреймів лежить сприйняття фактів за допомогою зіставлення отриманої ззовні інформації з конкретними елементами та значеннями, а також з рамками, визначеними для кожного концептуального об’єкта нашої пам’яті. Згідно з теорією Мінського, структура, яка подає ці рамки, – фрейм. Використання аналогії концептуальних об’єктів дозволяє сформувати ієрархію з класифікаційними та узагальнюючими властивостями. Це дає можливість подавати знання шляхом перебудови ієрархічної структури відношень типу «абстрактне-конкретне». Складні об’єкти подаються у вигляді фреймової сітки. Фрейм доповнюється іншими фактами, які дають можливість здійснювати запити до інших фреймів.
За допомогою подання знань фреймами вдається більш повно описати процес мислення шляхом визначення великої та структурованої одиниці подання знань, що ґрунтується на фактах та процедурних знаннях.
Фрейм – це одиниця подання знань, що запам’ятовувалася в минулому, деталі якої за необхідністю можуть бути змінені згідно з поточною ситуацією.
Фрейм являє собою структуру даних, за допомогою якої можна описати, наприклад, розташування об’єктів та ін. Будь-який фрейм доповнюється різною інформацією про застосування фрейму, наслідки застосування і т.п. Фрейм розглядається як сітка, що складається з вершин та відношень. На найвищому рівні фрейму подано фіксовану інформацію: факт, що стосується стану об’єкта, який завжди вважається істинним. На наступних рівнях розташовано термінали (слоти), які обов’язково заповнюються даними. У кожному слоті задається умова, яка виконується при встановленні відповідностей між значеннями (слот встановлює самостійно, або це робить невелика складова фрейму). Проста умова подається позначкою, вона може містити вимоги, наприклад, щоб відповідність встановлював користувач, щоб було достатньо повно описане значення, щоб був вказівник спеціальних складових фреймів. Складні умови називають відношеннями між фактами, які відповідають декількомам слотам. Сполученням множини фреймів, які є відношеннями, можна побудувати фреймову систему. Результатом такої побудови є можливість перетворення фреймів в одній системі. Фрейми використовуються для економічного проведення різноманітних розрахунків та обробки зображень.
Основні властивості фреймів.
Базовий тип. Виділяється пам’ять для зберігання фреймів базового типу, на основі яких будуються фрейми нових стандартів. Фрейм містить слот, в якому є покажчик підструктури, що дозволяє різним фреймам спільно використовувати однакові частини.
Процес зіставлення – процес, у ході якого виявляється правильність вибору фрейму. Цей процес здійснюється відповідно до поточної мети та значень даного фрейму. Фрейм містить умови, які обмежують значення слоту, мета використовується для визначення умови, яка є релевантною до даної ситуації. Алгоритм процесу зіставлення має вигляд:
1.	Вибраний інтуїтивно базовий фрейм на основі виявлених знань підтверджує або не підтверджує свою релевантність. Поточною метою визначається, яке обмеження слоту слід використовувати при зіставленні. При підтвердженні процес закінчується.
2.	Якщо у слоті даного фрейму існує помилка умови погодженості інформації, заданої за замовчуванням, то необхідна інформація, яка забезпечує присвоєння потрібного значення даному слоту. Присвоєння інформації не повинно суперечити обмеженням, які накладаються на слот.
3.	Керування передається іншому фрейму цієї системи, якщо цей фрейм не підходить, керування передається відповідному фрейму іншої системи. Таким чином, використовується інформація про перетворення (зміна кута зору, місця і т.ін.). Якщо зіставлення закінчується невдачею, то задача розв’язку не має.
 
Рис 16.1. Блочно-функціональна форма фрейма «технологічні потоки»

Відношення «абстрактне-конкретне», «ціле-частина». «Абстрактне-конкретне»  (is-a, kind-of) – у верхніх рівнях ієрархічної структури фрейму розташовані абстрактні об’єкти, на нижніх рівнях – конкретні. Об’єкти нижніх рівнів успадковують атрибути усіх об’єктів верхніх рівнів. У відношеннях «ціле-частина» (part-of) властивості об’єкта не успадковуються, а лише доповнюються фактами, що пояснюють об’єкт.
Структура даних фрейму. Фрейм розглядається як ієрархічна структура, вузли якої подібні фреймам (підфрейми).
1.	Ім’я фрейму – унікальне. Фрейм складається зі слотів:
•	які визначаються системою;
•	які визначаються користувачем, шляхом введення відношень is-a;
2.	Ім’я слоту – унікальне у фреймі – є тільки ідентифікатором слоту.
3.	Покажчик успадкування. Належить тільки до відношення «абстрактне-конкретне», показує, яку інформацію про атрибути слотів верхнього рівня успадковують слоти з такими ж іменами у фреймі нижнього рівня.
4.	Зазначення типу даних. Зазначає, що слот має числове значення, або є покажчиком іншого фрейму.
5.	Зазначення слоту. Значення даних слоту повинне зберігатися із зазначеним типом цього слоту.
6.	Демон – процедура, яка автоматично запускається при виконанні певної умови.
7.	Приєднана процедура – службова програма, яка запускається за повідомленням, переданим із іншого фрейму.
Розрізняють фрейми-зразки, або прототипи, що зберігаються в базі знань, і фрейми-екземпляри, які створюються для відображення реальних ситуацій на основі даних, що надходять.
Модель фрейма є досить універсальною, оскільки дозволяє відобразити все різноманіття знань про світ через:
фрейми-структури, для позначення об'єктів і понять (позика, застава, вексель);
фрейми-ролі (менеджер, касир, клієнт);
фрейми-сценарії (банкрутство, збори акціонерів, святкування іменин);
фрейми-ситуації (тривога, аварія, робочий режим пристрою) і ін.
Найважливішим властивістю теорії фреймів є запозичене з теорії семантичних мереж успадкування властивостей. І у фреймах, і в семантичних мережах спадкування відбувається за АКО-зв'язків (A-Kind-Of = це). Слот АКО вказує на фрейм більш високого рівня ієрархії, звідки неявно успадковуються, тобто переносяться, значення аналогічних слотів.
 На відміну від жорстких структур моделей інших типів у фреймових моделях фіксується інформаційних одиниць, яка називається протофрейма. У загальному вигляді вона виглядає наступним чином:
(Ім'я фрейму:
Ім'я слота 1 (значення слота 1)
Ім'я слота 2 (значення слота 2)
. . . . . . . . . . . . . . . . . . . . . .
Ім'я слота К (значення слота К)).
Значним слота може бути практично що завгодно (числа або математичні співвідношення, тексти на природній мові або програми, правила виведення або посилання на інші слоти даного фрейму або інших фреймів). Як значення слота може виступати набір слотів більш низького рівня, що дозволяє у фреймових уявленнях реалізувати "принцип матрьошки".
При конкретизації фрейму йому і слотам присвоюються конкретні імена і відбувається заповнення слотів. Таким чином, з протофрейма виходять фрейми - екземпляри. Перехід від вихідного протофрейма до кадру - екземпляру може бути багатокроковим, за рахунок поступового уточнення значень слотів.
Наприклад, структура, записана у вигляді протофрейма, має вигляд
(Список працівників:
Прізвище (значення слота 1);
Рік народження (значення слота 2);
Спеціальність (значення слота 3);
Стаж (значення слота 4)).
Якщо в якості значень слотів використовувати дані, то вийде фрейм - екземпляр
(Список працівників:
Прізвище (Попов - Сидоров - Іванов - Петров);
Рік народження (1965 - 1946 - 1925 - 1937);
Спеціальність (слюсар - токар - токар - сантехнік);
Стаж (5 - 20 - 30 - 25)).
 Фреймові системи пов'язані з інформаційно-пошуковими системами (мережами). Якщо один фрейм не відповідає поточній проблемі, то така мережа представляє інший фрейм. За допомогою подібної міжфреймової мережі можна представляти знання, що стосуються фактів, подібностей та іншої інформації, корисної для розуміння.
 З кожним слотом можна пов'язати будь-яке число процедур. Три типи процедур найчастіше пов'язані зі слотами:
• Процедура «якщо додано». Виконується, коли будь-яка нова інформація міститься в слот.
• Процедура «якщо видалено». Виконується при видаленні з гнізда.
• Процедура «якщо потрібно». Виконується, коли запитується інформація з слота, а він порожній.
Ці процедури можуть стежити за приписуванням інформації до даного вузла і перевіряти, що при зміні значення проводяться відповідні дії. Фреймові моделі гарні в тих предметних областях, де очікування щодо форми і змісту даних грають важливу роль, наприклад, інтерпретація візуальної інформації, розуміння мови.
Розглянемо приклад. Спеціаліст запитує «Мені потрібен звіт про просування проекту з біологічної газифікації».
Інтерфейсна програма аналізує цю вимогу і записує в слот «тема» назву теми. Далі все відбувається автоматично.
1. Процедура «якщо додано» спрацьовує, тому що слот «тема» записана тема. Ця процедура шукає в базі даних керівника проекту цієї теми і вносить ім'я в слот «керівник».
2. Процедура «якщо додано» спрацьовує знову, так як в слот «керівник» вписано П. І. Б. Ця процедура починає складати повідомлення, щоб відправити його за адресою, але виявляє, що немає значення слота «дата виконання».
3. Починає працювати процедура «ЯКЩО ПОТРІБНО». Вона знаходить поточну дату в календарі бази даних і записує її в слот «дата».
4. Далі процедура «якщо додано» знаходить, що немає повідомлення про обсяг, але слот «обсяг» не пов'язаний з процедурами. Тому процедура йде вище вузла у вузол «загальної концепції звіту» і звідки вибирає обсяг звіту.
Коли всі компоненти заповнені, друкується повідомлення.
У фреймових системах використовуються три способи управління виводу: два - за допомогою приєднаних процедур -демона і службової процедури і один - за допомогою механізму успадкування. Останній можна назвати єдиним основним механізмом управління виводу, яким оснащуються фреймовіх системи. За допомогою третього способу, тобто використання механізму наслідування, що базується на відносинах «конкретне - абстрактне» (або IS -A), здійснюється автоматично пошук і визначення значень слотів фрейму верхнього рівня і приєднаних процедур службового типу.
Наприклад: Фреймове уявлення конференції.Ієрархічні фреймові структури базуються на відносинах IS - A між фреймами, що описують деяку конференцію. Всі фрейми повинні містити інформацію про ДАТУ, МІСЦЕ, НАЗВУ ТЕМИ, доповідач. Таким чином, на самому верхньому рівні визначено фрейм КОНФЕРЕНЦІЯ.
Конференції поділяються на комерційні та з розвитку. Вони складають дочірні фрейми. У них можуть бути додані слоти: обсяг торгівлі і бюджет.
У момент звернення до слоту ТЕМА фрейму «4 конференція» його значення не визначене, тому запускається механізм успадкування і здійснюється пошук значення цього слоту у фреймі верхнього рівня, якщо і там відсутня, то пошук здійснюється ще вище. Це пошук 3 типу (успадкування).
 	Фрейм складається з слотів. Кожен слот - це його ім'я і значення.
Значним слота є посилання на інший фрейм, на слово в словнику або на
документ.
У фреймі існують (але не всі з них використовуються в конкретному фреймі)
такі слоти:
• Parent - посилання на фрейм-батько або клас,
• Owmer - список посилань на фрейми-поняття або складові фрейми, до складу
яких входить даний фрейм,
• Obj - об'єкт, який бере участь в понятті,
• Subject - суб'єкт (або головний об'єкт), який бере участь в понятті,
• Act - дія, яка бере участь в понятті,
• Prop - властивість, яка бере участь в понятті,
• Equal - список понять-синонімів, асоціативно пов'язаних з поняттям,
описаним в даному фреймі,
• UnEqual - список понять-антонімів, асоціативно пов'язаних з поняттям,
описаним в даному фреймі,
• Place - місце дії,
• Time - час дії,
• Include - список посилань на фрейми, включені в дане поняття (є його складовою частиною),
Крім того, фрейм включає в себе наступні параметри:
• Level - рівень фрейма,
• DocName - ім'я файлу (шлях) з документом, пов'язаним з фреймом,
• IndWord - індекс слова в словнику, пов'язаному з фреймом,
• H - поріг спрацьовування фрейму, як нейрона при розпізнаванні поняття,
• Role - роль фрейма в понятті, в яке він входить або може входити (A-
дію, O-об'єкт, S-суб'єкт, P-властивість, U-невизначена або D - дія
при аналізі (викликається процедура),
• NO - ознака інверсії (заперечення) фрейму.
 	У загальному випадку фрейм містить як інформаційні, так і процедурні елементи, які забезпечують перетворення інформації всередині фрейму і зв'язок його з іншими фреймами. Важливою особливістю фреймів є наявність в інформаційних та процедуральних елементах незаповнених частин – слотів (пустот, щілин). Слоти можуть заповнюватися в процесі активізації фрейму відповідно до визначених умовами. Це надає властивість адаптивності моделі подання знань як на модульному рівні, так і на рівні всієї мережі фреймів.
Таким чином, фрейми є декларатівно-процедуральних структури, тобто сукупність описів і (в деяких випадках) пов'язаних з ними процедур, доступ до яких можна отримати прямо з фрейма.
 	Фреймом називається структура для опису стереотипної ситуації, що складається з характеристик цієї ситуації і їх значень. Характеристики називаються слотами, а значення - заповнювачами слотів. Слот може містити не тільки конкретне значення, а й ім'я процедури, що дозволяє обчислити його за заданим алгоритмом, а також одне або кілька правил, за допомогою яких це значення можна знайти. У слот може входити не одне, а кілька значень. Іноді слот включає компонент  фасетів, який задає діапазон або перелік його можливих значень.
Як вже зазначалося, крім конкретного значення, в слоті можуть зберігатися процедури і правила, які викликаються при необхідності обчислення цього значення.  
Процедури, що розташовуються в слоті, називаються пов'язаними процедурами. У попередньому прикладі пов'язана процедура буде активізуватися при кожній зміні поточної дати.
Найчастіше використовуються процедури:
• "якщо - додано" - виконується, коли нова інформація міститься в слот;
• "якщо - видалено" - виконується, коли інформація видаляється з слота;
• "якщо - потрібно" - виконується, коли запитується інформація з слота, а він порожній.
  	Конкретний фрейм-приклад фрейма ДАТА може виглядати наступним
чином:
<IXA ДАТА> (<МІСЯЦЬ> <ЧЕРВЕНЬ>) (<ДЕНЬ> <5>).
Мітка IXA позначає, що даний фрейм є фреймом-прикладом.
Тут заповнені тільки два слота. Значення інших можуть бути обчислені задопомогою відповідних процедур.
Процедури, що включаються в слот, прийнято ділити на два типи: процедури-демони і процедури-слуги.
Процедури-демони активізуються автоматично кожного разу, коли дані потрапляють до відповідного фрейм-приклада або видаляються з нього. Так, процедура, вбудована в слот ДЕНЬ ТИЖНЯ в описаному вище прикладі, є типовим представником процедури-демона. За допомогою процедур цього типу автоматично виконуються, зокрема, всі рутинні операції пов'язані з веденням баз даних і знань. Нехай, наприклад, база даних описує транспортно-складську систему, в якій одні й ті ж деталі в процесі обробки змінюють адреси зберігання. За допомогою процедур-демонів спілкування з системою можна організувати так, що користувач буде повідомляти лише адреса, по якому відправляється конкретна партія деталей. Відповідна процедура-демон активізується автоматично як тільки буде заповнений слот АДРЕСА ОТРИМУВАЧА відповідного фрейма. В результаті виконання процедури ім'я даної партії буде видалено з фрейма, що описує попереднє місце зберігання, і додано в фрейм нового місця зберігання.
Процедури-слуги активізуються тільки за запитом. Прикладом такої процедури є функція, вбудована в слот РІК в фреймі-прототипі ДАТА,  яка викликається тільки в тому випадку, якщо користувач не вказав рік.
Фрейми мають здатність успадковувати значення характеристик своїх батьків, що знаходяться на більш високому рівні ієрархії. Значення характеристик фреймів можуть передаватися за замовчуванням фреймам, що знаходяться нижче  в ієрархії, але, якщо останні містять власні значення даних характеристик, то в якості справжніх даних приймаються сааме вони. Ця обставина дозволяє легко враховувати у фреймових системах різного роду виключення.
 	Переваги фреймової системи в тому, що ті елементи, які присутні в описі об'єктів або подій, групуються і обробляються як єдине ціле. У фреймах об'єднуються як декларативні, так і процедурні знання. Фреймова система - ієрархічна структура, вузли якої є подібні фрейми.
 Ім'я фрейму - ідентифікатор, який є унікальним для кожного фрейма в системі. Ім'я слота - ідентифікатор, який присвоюється слоту фрейма. Він повинен бути унікальним для кожного фрейму. Зазвичай ім'я слота не несе смислового навантаження, але є спеціальні ключові імена: IS-A - показує фрейм - батько даного фрейму, DDESENDANTS - показує прямий дочірній фрейм, FINEDRY - поль-зователь, що визначає фрейм, DEFINEDON - дата визначення фрейму і т.д . Ці слоти називаються системними і використовуються при редагуванні бази знань і управління логічним висновком. Покажчик успадкування, що показує, яку інформацію про атрибути слотів фрейму верхнього рівня успадковують слоти з тим же ім'ям похідних фреймів. Зазвичай вживають покажчики успадкування:
• U - unique (унікальний). Показує, що кожен фрейм може мати слоти з різними значеннями;
• S - same (такий же). Усі слоти мають однакові значения;
• R - range (встановлення меж). Значення фреймів нижнього рівня повинні знаходитись в межах кордонів, зазначених в слотах верхнього рівня;
• O - override (ігнорувати). При відсутності вказівки значення слота фрейму верхнього рівня стає значенням слота нижнього рівня.
Атрибут слота вказує тип даних слота. Це FRAME (покажчик), INTE-GER (цілий), REAL (дійсний), BOOL (логічний), LISP (приєднана процедура), TEXT (текст), LIST (список), TABLE (таблиця) та інші. Значення слота - це значення, відповідне вказаною для даного слота атрибуту. Демон - процедура автоматично запускається при виконанні деякої умови. Найбільш часто використовувані - це: IF - NEEDED (якщо потрібно), IF - ADDED (якщо додано), IF - REMOVED (якщо видалено).
 	У мові представлення знань фреймами відсутній спеціальний механізм управління виводом. Тому користувачеві для виведення надаються приєднані процедури. Мова представлення знань фреймами вважають мовою високого рівня універсальності, що дозволяє користувачеві писати свої програми управління виводом за допомогою приєднаних процедур.  
 	Фрейм - мінімально можливий опис сутності будь-якого об'єкта, явища, події, ситуації, процесу.  	Сукупність даних предметної області може бути представлена множиною взаємопов'язаних фреймів, що утворюють єдину фреймову систему, в яких об'єднуються декларативні і процедурні знання. Така система має, як правило, ієрархічну структуру, в якій фрейми з'єднані один з одним за допомогою родовідових зв'язків. На верхньому рівні знаходиться фрейм, що містить найбільш загальну інформацію, дійсну для всіх фреймів. Покажчики успадкування показують, яку інформацію про атрибути слотах з фрейма верхнього рівня успадковують слоти з однаковими іменами в даному фреймі. Спадкування відбувається за АКО. Слот АКО вказує на фрейм більш високого рівня ієрархії, звідки успадковуються значення однакових слотів. У конкретних слотах покажчики успадкування можуть бути організовані різними способами.
 	У фреймах розрізняють два типи приєднаних процедур: процедури-демони і процедури-слуги. Демони або процедури-демони автоматично запускаються при зверненні до відповідного слоту. Типи демонів пов'язані з умовою запуску процедури.
• Демон IF-NEEDED запускається, якщо в момент звернення до слоту його значення не було встановлено.
• Демон IF-ADDED запускається при спробі зміни слоту;
• Демон IF-REMOVED запускається при спробі видалення значення слота;
• Можливі також інші типи демонів.
На відміну від демонів процедури-слуги запускаються явно.
Механізм наслідування є основним механізмом виведення. Керуючі функції механізму наслідування полягають в автоматичному пошуку і визначенні значень слотів фреймів нижчих рівнів за значенням слотів фреймів верхніх рівнів, а також в запуску приєднаних процедур і демонів.
Загальний механізм зіставлення фреймів і отримання результуючого фрейму, тобто відповіді на запит, полягає в наступному: пошук фрейма в системі фреймів робиться за допомогою ключових слів (ключів), виділених із запиту; при знаходженні фрейма інформація, відсутня в запиті виходить з слотів цього фрейму з умовчанням DEFAULT, обмеженням REQUIRE PREFER і за допомогою демонів; після обробки цього фрейму за допомогою слота АКО переходять на більш високий рівень ієрархії фреймів і знову застосовуються слоти нового фрейму для заповнення слотів фрейма, знайденого за запитом. Приєднані процедури і демони можуть реалізувати будь-який механізм виведення. Однак ця реалізація має конкретний характер і вимагає значних витрат праці проектувальників і програмістів.
В інтелектуальних системах з фреймовим поданням неможливо чітко відокремити процедурні знання від декларативних, оскільки демони і приєднані процедури є і знаннями і засобами управління логічним висновком. У семантичних мережах, також як і при фреймовому поданні знань декларативні і процедурні знання не розділені, отже, база знань не відділена від механізму виведення. Тому процедура виведення зазвичай являє собою сукупність процедур обробки мереж.
Розглянемо конкретні фрейми.
Фрейм-з'єднання призначений для опису різних типів з'єднань (механічних, гідравлічних і т.п.), що зустрічаються в технічних системах.
Фрейм-призначення служить для опису процесів через призначення відповідних елементів, що беруть участь в них.
Фрейм-закон функціонування призначений для опису аналітичних  законів зміни певних параметрів у часі. Він описує ситуацію:«Обчислити значення параметра p в момент часу t з використанням функції f, що має аргументи α1, .... α m ». Мітки дуг позначають відносини: vf - вид функції, τ - час, arg - аргумент функції, res - результат застосування функції.
 
 
Контрольні питання
1.Наведіть класифікацію моделей представлення знань.
2. Побудова фрейму.
3.Особливості фреймових моделей знань.
4. Наведіть приклади фреймових моделей знань.
5. Для чого використовують приєднувальні процедури?

Тема 17.  Онтологія як форма представлення знань в інтелектуальних інформаційних системах
В даний час особливу актуальність набуває ідея комп'ютеризації знань про цілих предметних областях для підвищення якості роботи з програмами за рахунок наділення їх інтелектуальними властивостями, а також створення умов для взаємодії автономних електронних агентів, що виконують наприклад, пошук інформації в комп'ютерних мережах. Центральної компонентою таких систем стали онтології, створення яких є методологію кодування та подання декларативних знань.
Спочатку термін «онтологія» мав виключно філософську основу, згідно з якою онтологія (філос.) – філософське вчення про буття, його основи, принципи, структуру і закономірності. І лише останнім часом він був переосмислений з позицій інформатики. Онтологія (інформ.) - набір визначень (на формальній мові) фрагмента декларативних знань, орієнтований на спільне багаторазове використання різними користувачами в своїх додатках. З цього визначення випливає, що онтологія включає в себе комплекс понять від найзагальніших до найбільш конкретних, що охоплює повний спектр об'єктів і відносин, включаючи події і процеси, а також значення (атрибутів і відносин), що визначаються, якщо необхідно, в часі і просторі.
Ця система об'єктів зв'язується як універсальними залежностями типу «загальне-частинне», «частина-ціле», «причина-наслідок» і т.п., так і специфічними для відповідної предметної області.
Іншими словами, онтологія - модель предметної області, яка використовує всі допустимі засоби представлення знань, релевантні для цієї предметної області.
Можна виділити наступні причини, коли виникає потреба в створенні онтологій:
- спільне використання людьми або програмними агентами загального розуміння структури інформації;
- повторне використання знань в предметній області;
- аналіз знань в предметній області;
- для того щоб зробити припущення в предметної області явним.
Спільне використання людьми або програмними агентами загального розуміння структури інформації є однією з найбільш загальних цілей розробки онтологій. Так, нехай кілька різних Інтернет-сайтів містять інформацію з медицини або надають інформацію про платні медичні послуги, які оплачуються через Інтернет. Якщо ці Інтернет-сайти спільно використовують і публікують одну і ту ж базову онтологію термінів, якими вони всі користуються, то комп'ютерні агенти можуть отримувати інформацію з цих різних сайтів і накопичувати її. Згодом агенти можуть використовувати накопичену інформацію для відповідей на запити користувачів або як вхідні дані для інших додатків.
Забезпечення можливості використання знань предметної області. Подібна властивість онтологій дозволяє формувати єдину понятійну базу предметної області, яку в подальшому можуть використовувати як фахівці, так і інформаційні системи з інших областей, а також інтегрувати її в інші прикладні області для їх розширення.
  Крім того, явні специфікації знань з предметної області корисні для нових користувачів, які повинні дізнатися значення термінів предметної області.
Аналіз знань в предметній області можливий, коли є декларативна специфікація термінів. Формальний аналіз таких термінів цінний при спробі виявлення відповідностей між зовнішньою інформацією та поняттями предметної області, наприклад, при комп'ютерному тестуванні.
Онтології можна застосовувати в якості будівельних блоків компонентів баз знань, схеми об'єктів в об'єктно-орієнтованих системах, концептуальної схеми баз даних, структурованого глосарію взаємодіючих спільнот, словника для зв'язку між агентами, визначення класів для програмних систем.
Важливо відзначити, що, як правило, створення онтології предметної області само по собі не є головною метою. Розробка онтології нагадує процес визначення набору даних і їх структури для використання іншими програмами.
Онтології включають опис як дуже загальних, так і специфічних для конкретної предметної області термінів і можуть бути формалізовано записані як O = <X, R, F>,
де 
X - кінцева, непорожня множина понять (термінів) предметної області;
R - кінцева множина відносин між поняттями X;
F - кінцева множина  функцій інтерпретації, заданих на поняттях X і (або) відносинах R.
Для такої формалізації онтології можливі наступні окремі випадки.
1. R = Ø, F = Ø. В цьому випадку онтологія являє собою простий словник і її практичне використання доцільно в тому випадку, якщо терміни належать дуже вузької предметної області та їх смисли вже заздалегідь узгоджені в межах деякої спільноти. Прикладом такої ситуації можуть служити індекси пошукових машин мережі Інтернет.
2. R = Ø, F ≠ Ø. Тут кожному елементу множини X може бути поставлена відповідна функція інтерпретації. При цьому частина таких інтерпретованих термінів задається процедурно, а не декларативно, тобто сенс термінів предметної області може динамічно змінюватися в залежності від переходу між прикладними областями.
У загальному випадку (X ≠ Ø, R ≠ Ø, F ≠ Ø) основний акцент в онтології робиться на завдання семантичних відносин, наявних в предметній області разом зі створенням єдиної ієрархії понять, уніфікації термінів і правил їх інтерпретації.
В даний час не існує єдиного «правильного» способу розробки онтології. Найчастіше використовується ітераційний підхід, коли, починаючи з деякого чорнового варіанту, онтологія поступово уточнюється з додаванням до неї нових деталей. В загальному випадку процес створення онтології включає розгляд наступних питань.
1. Позначення цілей і сфери застосування створюваної онтології. Для цього необхідно визначити, для чого створюється онтологія і як вона буде в подальшому використовуватися.
2. Побудова онтології. Фіксація знань про предметну область, яка включає:
- визначення основних понять і їх взаємовідносин в обраній предметній області;
- створення точних несуперечливих визначень для кожного основного поняття і відносини;
- визначення термінів, які пов'язані з цими термінами та відносинами;
-	остаточне узгодження всіх названих етапів.
-	3. Кодування, яке має на увазі:
-	- поділ сукупності основних термінів, які використовуються в онтології, на окремі класи понять;
-	- вибір або розробку спеціальної мови для подання онтології;
-	- безпосередньо завдання фіксованою концептуалізації за обраною мовою представлення знань.
-	Як методологія інженерії знань інформація в онтології, як правило, представляється у вигляді семантичної або фреймової мережі. При такому описі вузлами мережі є поняття предметної області, а дуги визначають їх відносини. Для конкретизації таких
-	понять вони організовуються в ієрархію класів, правила проектування якої близькі до технології об'єктно-орієнтованого
-	програмування. Відмінність полягає в тому, що об'єктно
-	орієнтоване програмування зосереджується головним чином на операторних властивості класу, тоді як розробник онтології приймає рішення, ґрунтуючись на структурних властивостях класу.
-	Для опису класів онтології використовуються фрейми, що представляють собою іменовану структуру даних, що складається з слотів, за допомогою яких описуються властивості понять для їх конкретизації.
-	Процес створення онтології як спосіб моделювання предметної області є дуже трудомістким і передбачає в залежності від суб'єктивної думки експерта безліч альтернатив її варіантів. У зв'язку з цим важливим є автоматизація проектування і систематизація вже створених онтологій в електронному вигляді за допомогою існуючого програмного забезпечення. 
Нині існує дуже багато інструментальних засобів розробки онтологій, які застосовуються у багатьох предметних галузей, зокрема Protégé. Це вільний, відкритий редактор онтологій  для побудови баз знань. Платформа Protégé підтримує два основних способи моделювання онтологій за допомогою редакторів Protégé-Frames і Protégé- OWL. Онтології, побудовані в Protégé, можуть бути експортовані в безліч форматів, включаючи RDF (RDF Schema), OWL і XML Schema. Protégé має відкриту архітектуру, яка легко піддається модернізації за рахунок підтримки модулів розширення функціональності, підтримується значним співтовариством, що складається з розробників і вчених, урядових і корпоративних користувачів, котрі використовують його для розв’язання завдань, пов’язаних зі знаннями, у таких різноманітних галузях збір знань і корпоративне моделювання. Protégé OWL дозволяє описувати не тільки поняття, а й конкретні об’єкти і має багатий набір операторів: наприклад, перетин, об’єднання і заперечення. Він заснований на логічній моделі, яка дає змогу створювати визначення, відповідні неформальному опису. Отже, визначення складних понять можуть бути побудовані на основі простіших визначень. Попри це, логічна модель дозволяє з’ясувати, які концепції відповідають заданим визначенням і перевірити, чи поняття і визначення в онтології взаємно узгоджуються. Нині існує кілька методик побудови онтологій і всі вони базуються на принципах: 
1. Чіткість (Clarrity). Онтологія повинна ефективно передавати значення термінів. Визначення мають бути об’єктивними, хоча мотиви введення термінів можуть визначатись ситуацією або вимогами обчислювальної ефективності. Для об’єктивізації визначень повинен використовуватись чітко фіксований формалізм, за якого потрібно логічно задавати визначення у вигляді логічних аксіом. 
2. Сумісність (Coherence). Онтологія має бути сумісною, тобто висновки, які можна зробити з визначень понять і співвідношень між ними, повинні бути сумісні з початковими термінами. Сумісність також має підтримуватися для описаних неформально понять. Якщо висновки, зроблені з формальних визначень, несумісні з неформальними описами, то онтологія вважається несумісною.
 3. Можливість розширення (Extendibility). Онтологія повинна бути побудована так, щоб її без додаткових зусиль можна було використовувати в окремих бібліотеках онтологій. Однією з найважливіших умов такого проектування є можливість визначення нових понять на основі існуючих в онтології елементів так, щоб це не вимагало зміни останніх.
 4. Мінімальна залежність від кодування (Minimal encoding bias). Проектована концептуальна схема не повинна залежати від конкретної мови, яка використовується для запису формалізованого опису. Залежність від кодування виникає тоді, коли вибір онтологічного представлення ґрунтується на сумісності з особливістю мови, якою записується онтологія. Ця залежність має бути мінімізованою, щоб різні бази онтологій, які використовують інші мови, могли без труднощів розуміти проектовану онтологію. 
5. Мінімальна онтологічна фіксація (Minimal ontological commitment). Онтологія повинна містити якнайменше фактів про онтологію світу, який моделюється, надаючи при цьому свободу використання даної онтології в інших онтологіях. Якщо концептуальна схема завдання така, що опис онтології світу істотно необхідний, то цей опис має бути за можливості мінімальним. Варто обмежитися тільки перерахуванням термінів понять, не визначаючи співвідношення між ними, тобто побудувати «слабку» теорію. Тоді різні бази онтологій, що визначають онтології світу по-своєму, зможуть надати цим поняттям свій сенс. Запропонувана методика побудови онтологій засобами Protégé, яка включає в себе сім кроків.
 Крок 1. Визначення галузі й масштабу онтології. Роботу над розробкою онтології потрібно почати з визначення її обсягу та галузі застосування. Для цього розробляють питання компетентності для перевірки відповідності онтології заданій предметній галузі, які надалі будуть виконувати функцію лакмусового папірця, даючи уявлення про повноту поданої інформації і рівень її деталізації. 
Крок 2. Можливість використання наявних онтологій. Варто враховувати, що над задачею створення онтології, наприклад, у галузі харчової промисловості, працював ще хтось. Тоді потрібно перевірити можливість адаптації існуючих онтологічних систем для нашої конкретної предметної галузі. В іншому разі роботу потрібно розпочинати з нуля. На сьогодні є доступними багато розроблених онтологій у різних предметних галузях і вони можуть бути успішно імпортовані в середовище проектування, вибране розробником. 
Крок 3. Перелік важливих термінів в онтології. Корисно скласти список усіх термінів і їх властивостей, які несуть основну інформацію про задану предметну галузь. На початку важливо отримати повний список термінів, не турбуючись, чи є поняття класом або властивістю.
 Крок 4. Визначення класів і їх ієрархії. Є декілька підходів для побудови ієрархії класів: зверху-вниз, знизу-вгору та комбінований процес.
 Крок 5. Визначення властивостей класів. Після визначення певної кількості класів необхідно описати внутрішню структуру понять. Під час кроку 3 були вибрані класи зі створеного списку термінів. Більшість термінів, які залишаться, ймовірно, будуть властивостями цих класів. Усі підкласи класу успадковують властивість цього класу. 
Крок 6. Визначення фацетів властивостей. Властивості можуть мати різні фацети, що описують тип і коефіцієнт (потужність) значення властивості, діапазон та інші характеристики, які вона може мати.
 Крок 7. Створення екземплярів. Останній крок – це створення окремих екземплярів класів в ієрархії. Для визначення окремого екземпляра необхідно: 1) вибрати клас; 2) створити окремий екземпляр цього класу; 3) увести значення слотів. 
Розглянемо приклад побудови онтології з предметної галузі «Хлбопекарська промисловість», що є основою для створення інтелектуальної системи керування технологічними процесами хлібопекарського виробництва. Побудова такої онтології дозволить постачати систему відомостями про добре описану семантику заданих слів і вказувати ієрархічну будову середовища, взаємозв’язок елементів. Усе це дозволить комп'ютерним програмам за допомогою онтологій робити висновки з наявної інформації та маніпулювати даними визначеннями. Попри це, інформаційні ресурси, використані в процесі прийняття рішень, є розподіленими. Сучасні мережеві технології і широке поширення інтернету надають можливість доступу і використання цих ресурсів шляхом об’єднання територіально розподілених джерел інформації такого роду. Онтологічний інтерфейс дозволяє візуалізувати у легкодоступній наочній формі результати інтеграції та агрегації розподілених інформаційних ресурсів у процесі організації взаємодії користувачів. Онтологія визначає загальновживані, семантично значущі «понятійні одиниці інформації», якими оперують інженери-розробники інформаційних систем. На відміну від інформації, закодованої в алгоритмах, онтологія забезпечує її уніфіковане і багаторазове використання багатьма групами інженерів, на різноманітних комп'ютерних платформах, під час розв’язування багатьох завдань. Побудова онтології часто не є кінцевою метою. Онтології, як правило, далі використовуються іншими програмами для вирішення практичних цілей. На сучасному етапі розвитку науки є коло завдань, де застосування даної онтології може дати хороші результати: – машинний переклад; – тестуючі системи; – інформаційний пошук; – системи здобування знань; – загальні системи ведення діалогу між комп’ютером і людиною; – системи розуміння мови (автоматичне реферування тексту, рубрикація та ін.) 
Онтологія подає інформацію так, що вона також може застосовуватися не тільки для відображення, але й для автоматизації, інтеграції та повторного використання тієї ж інформації в різних додатках, які включають у себе штучний інтелект, інформаційно-пошукові системи тощо. Онтологія визначається як сукупність великої кількості понять, їх визначень і представлених в ієрархічному порядку відносин. Існують різні інструменти, доступні для розробки онтологій, наприклад, Hozo, AltovaSemantic Works та ін. Для побудови онтології було використано  Protégé – одним із найбільш широко використовуваних онтологій-редакторів, який визначає розвиток концепції онтології (класи), властивості, таксономії, різні обмеження та екземпляри класів.
Підсистема інтелектуальної підтримки та прийняття рішень на основі динамічної експертної системи з використанням онтологій забезпечить реалізацію оптимального управління технологічним комплексом хлібопекарського виробництва.
Метою роботи є дослідження складного технологічного комплексу хлібозаводу за допомогою методів інженерії знань шляхом розробки онтологій, що дають необхідні можливості практичного застосування результатів для розробки ефективних ресурсоощадних стратегій управління технологічним комплексом хлібопекарського виробництва.
Поставлена мета передбачає розв’язання таких завдань:
1. Скласти глосарій понять предметної галузі (хлібопекарське виробництво).
2. Визначити класи онтологій та побудувати ієрархію онтологій хлібопекарського виробництва.
3. Визначити атрибути класів та властивості екземплярів онтологій хлібопекарського виробництва.
Для ефективного розв’язання проблем представлення знань та реалізації механізму логічного виведення в інтелектуальних системах промислової автоматизації набули широкого поширення  онтології .
Задано:
а) категоріальний апарат онтології, у вигляді кортежу глобальних об’єктів:
KA=<t,a,s,e,p,q> , де                                                                          (17.1)
t – знак «поняття»;
a – знак «дія»;
s – знак «стан»;
e – знак «подія»;
p – знак «властивість»;
q – знак  «величини»;
б) конструкція  знаку «поняття»:
T=<D, P, A, C, S, T, M> , де                                                                (17.2)
D – множина дефініцій поняття t;
P – множина дій поняття t;
C – множина термінів t;
S – множина стану поняття t;
T – множина поняття, що має відношення з терміном t;
M – множина метазнаків поняття t; 
в) текст термінологічного словника TD, релевантної моделі предметної області, проілюстрованої у вигляді двійки:
Msa = < Tk , Kk >, де                                                                            (17.3)
Tk – множина понять ;
Kk – кортеж, що описує множину конструктів та їх взаємозв’язок.
Завданням досліджень є розробка методу, призначеного для розпізнавання у хлібопекарському виробництві глобальних відносин та об’єктів, а також елементів конструкцій їх знаків за наступних обмежень:
1)	ступінь покриття конструктів у породжених правилах вихідних конструктів повинна прагнути до одиниці;
2)	результати розв’язування задач побудови онтологій із застосуванням створених систем хлібопекарської продукції і результати роботи експертів повинні бути близькі, а в ідеальному випадку – однакові.
 Щоб розв’язати поставлену задачу й успішно використати експертні знання, потрібно сформувати модель предметної галузі  хлібопекарського виробництва. Застосовуючи методології еволюційних обчислень, на основі знань про модель предметної галузі генеруються системи продукційних правил як декларативна ілюстрація методу. Так, якщо експерт міркує природною мовою, то продукція матиме природно-мовне уявлення і її потрібно перетворити в формальне подання 
Передбачається, що розуміння онтології може бути використано для управління трьома ключовими процесами, а саме: а) комунікація; 2) інтеграція; 3) логічний висновок. Ці процеси ґрунтуються один на одному й відображають збільшені рівні формальності в сенсі використаних онтологій залежно від зростання складності необхідних знань. У зв’язку з цим збільшуються вимоги до рівня формальності онтологій, починаючи з простих словників до формальних логічних структур, які дають змогу виконувати складні логічні висновки.   Структура  онтології має відображати структуру предметної галузі хлібопекарського виробництва. Технологія виробництва хліба –  галузь знань, що включає широкий спектр питань: технологічні процеси, обладнання, техніко-економічні аспекти виробництва. Хлібопекарське виробництво  здійснюється в технологічному середовищі, вивчення якого можливе лише за умови дотримання принципів  системного підходу. У його системі виділяють підсистеми: функціональну, елементну та організаційну, які представляють собою сторони єдиного цілого. Функціональна сторона виробничої системи (заводу) і його підсистем (ділянок, ліній) визначається їх технологічним призначенням. Елементна сторона визначається складом цих ділянок та їх обладнанням для забезпечення технологічного призначення. Організаційна сторона встановлює структуру системи, зрозумілу мету для кожної її складової частини й реалізує виконання мети відповідно до функціонального призначення.  
Онтологія – це логічний підхід до опису структури понять предметної галузі, який дає змогу детально, осмислено, в  науковому й зрозумілому для дослідника та експерта вигляді, сформувати ієрархію ознак, що впливають на якість. Можна створити ієрархічне дерево ознак, яке може бути імпортовано в розроблювану систему підтримки прийняття рішень у галузі оцінки якості, що репрезентує собою web-додаток для проведення  експертизи під назвою «Кваліметрична експертиза». Онтологія як модель представлення прецеденту описує його як набір екземплярів класів і стосунків між ними. Як база знань у предметній галузі вона описує знання як правила опису логіки (ОЛ) з використанням процедур виведення. Як БД прецедентів онтологія зберігає їх як частину знань предметної  галузі (рис. 17.1).
Практично створення онтології включає:
1)	визначення класів в онтології;
2)	розташування класів у таксономічну ієрархію (підклас – надклас);
3)	заповнення значень слотів екземплярів.

 
Рис.17.1. Схема інтеграції процесу міркування із прецедентів і онтології: 1 – опис моделі надання прецедентів; 2 – формалізовані правила в предметні галузі; 3 – прецедент із БД прецедентів; 4 – прецедент нового вирішеного завдання
Під час реалізації онтології формуються дві незалежні одна від одної підсистеми: безпосередньо сама база знань (сутності й відношення між ними) і комплекс програм, призначений для обробки знань (функції інтерпретації, задані на сутності та  відношеннях онтології), утворюючи класичну інтелектуальну систему.
База знань створюється з урахуванням її майбутнього використання. Саме тут міститься «ядро» всієї системи, яке побудоване на основі моделей знань із використанням онтологій предметної галузі. Підсистема обробки знань повинна будуватися на принципах формальної логіки. В основі побудови онтології повинні лежати теоретичні знання, що ілюструють систему пов’язаних між собою понять і висловлювань в аналізованій предметній галузі, які зв’язуються відповідно до концептів. Форми, в яких фіксуються знання про об’єкт управління в результаті інтелектуальної діяльності, зокрема такі, як «поняття», «висловлювання», «міркування», «логічне виведення», з одного боку, вже містяться в деякому формалізованому вигляді в базі знань, з іншого –  можуть бути отримані алгоритмічно на основі цієї бази .


 

Рис. 17.2. Головне вікно програмного засобу Protégé

Онтологія для технологічного комплексу хлібопекарського виробництва створювалася в програмному засобі для розробки онтологій – Protégé, який включає редактор онтології. На основі сформованих онтологій у Protege  згенеровані форми здобуття знань для введення екземплярів класів і підкласів. Protege заснований на фреймовій моделі представлення знання й забезпечений рядом інструментів, що дає змогу адаптувати його для редагування моделей у різних форматах(стандартний текстовий, бази даних, UML, мов XML, XOL, SHOE, RDF і RDFS, Daml+oil, OWL).
На рис. 17.2 зображено вигляд головного вікна програмного засобу, в якому формувалася онтологія, наведено ієрархію класів (Class Hierarchy), слоти вибраного класу (Template Slots) та обмеження, накладені на слоти (Other Facets).

 
Рис. 17.3. Графічне представлення створеної онтології хлібопекарського виробництва
За допомогою інтеграції програмного засобу OntoGraf в Protégé та використовуючи вкладку OntoGraf можливо графічно зобразити створену онтологію (рис.17.3).
Створена онтологія складається з головного класу «Хліб», який включає етапи, які представлені у вигляді класів: 
- підготовка сировини до виробництва, а також підкласи «борошно», «сіль», «дріжджі», «вода»;
  технологічний процес приготування хліба, а також підкласи «приготування опари», «приготування тіста», «вистоювання, випікання».

Для стадії «випікання» було створено підклас «вихідні показники випікання», який включає в себе підклас «фізико-хімічні показники». Для фізико-хімічних показників характерні наступні слоти, на які накладаються свої обмеження (допустимі діапазони технологічних змінних) залежно від технологічного процесу :
1)	вологість готового хліба;
2)	маса готового виробу;
3)	пористість хліба;
4)	температура центра м’якуша;
5)	титрована кислотність хліба.
Онтології  на базі концептуалізації передбачають виділення її трьох взаємопов’язаних компонентів: таксономії термінів, описів сенсу термінів, а також правил їх використання й обробки у вигляді  онтологічної моделі як знакової системи.
M = (O, A, R),  де O = {o1, o2, ...} – множина онтологій;  A – множина аксіом {a1, a2, ...}; 
R – функція, яка ставить у відповідність  кожному елементу множини O деяку підмножину елементів із множини A.
У  ході проведених досліджень, у  результаті аналізу літературних джерел і опитування експертів було виявлено такі залежності параметрів, які використовуються для оцінки якості виготовлення хліба на стадії приготування  опари:
                                     Wоп = f21(Fб, ВПЗб, Gбо, Gво, tв);                              
                    ПСоп = f22(Гб, ААб, ПСд, Коп, Gбо, Gво, Gд τзо, tоп, τбо);                  
                                Коп = f23(ААб, , Кб, Кд, Gбо, τзо, tв, τбо),                
де Wоп  – вологість опари;
Fб  – сила борошна;
ВПЗб  – водопоглинальна здатність борошна;
Gбо  – дозування частини борошна під час приготування опари;
Gво  – дозування частини води під час приготування опари;
tв  – температура води;
ПСоп  – підйомна сила опари;
Гб  – газоутворювальна здатність борошна;
ААб  – автолітична активність борошна;
ПСд  – підйомна сила дріжджової суспензії;
Коп  – титрована кислотність опари;
Gд  – дозування дріжджової суспензії;
τзо  – зміна тривалості замісу опари;
tоп  – температура опари;
τбо  – тривалість бродіння опари;
Кб  – титрована кислотність борошна;
Кд  – титрована кислотність дріжджової суспензії.
Для стадії приготування тіста встановленні наступні залежності між параметрами:
                                        Wт = f31(ВПЗб, ААб, Gвт);                                          
                    ПСт = f32(Гб, ААб, ПСоп, Кт, Gбт, Gвт, Gср, τз.оп, tт, τбт);                
                                   Кт = f33(ААб, Кб, Коп, Gбт, τз.т, tв, τбт),        
де Wт  – вологість тіста;
ПСт  – підйомна сила тіста;
Кт  – титрована кислотність тіста;
tт  – температура тіста;
τбт – тривалість бродіння тіста;
τз.т  – тривалість замісу тіста;
Для стадії вистоювання :
Фзт = f41(Fб, Нідк, Wт, tш, τвис);
Wтз = f42(Wт, φш, tш),
де Фтз  – формоутримувальна здатність тістової заготовки;
Wт  – вологість тіста;
tш  – температура в шафі вистоювання;
τвис  – тривалість знаходження тістової заготовки в шафі вистоювання;
Wтз  – вологість тістової заготовки;
φш  – вологість у шафі вистоювання;
tш  – температура в шафі вистоювання.
У процесі випікання, залежно від вхідних показників, змінюють:
– температуру (tвип) й вологість (φвип) випікання;
– тривалість випікання  (τвип).
  Створену онтологію в редакторі Protégé можна відображати також у вигляді графу й експортувати у формат, зрозумілий для інших редакторів, котрі використовуються безпосередньо для розробки інтелектуальних систем (CLIPS, HTML, RDF, OWL) Якщо для розв’язання того чи іншого завдання необхідна онтологія, якої немає, але вона може бути отримана з інших існуючих, то тоді виникає потреба виконання послідовності операцій над існуючими онтологіями з метою побудови необхідної. 
1. Злиття онтологій (ontology merging). Створення нової узгодженої онтології, яка об’єднує в собі дві (або більше) інших онтологій. Багато дослідників вважають, що злиттю можуть піддаватися онтології з однієї тематичної предметної галузі. Також загальноприйнятою вимогою є те, що нова онтологія містить всі знання з вихідних онтологій з найменшими можливими змінами. Однак ця вимога в деяких випадках не може бути повністю виконаною, оскільки вихідні онтології можуть бути несумісними. У цьому разі для досягнення сумісності кінцевої онтології треба пожертвувати вимогою повноти. Об’єднана онтологія може містити нові поняття і відносини, які є «сполучною ланкою» між термінами оригінальних онтологій. 
2. Зіставлення онтологій (ontology matching) є перспективним напрямком у розв’язанні проблем семантичної неоднорідності. Воно розв’язує завдання знаходження відповідності між семантично пов’язаними сутностями двох онтологій. Таке зіставлення може використовуватися для розв’язання різних завдань, наприклад, злиття онтологій (ontology merging), отримання відповідей на запити, трансляція даних, навігація по семантичному інтернету. Отже, зіставлення онтологій дозволяє здійснювати оперування даними і знаннями, представленими в цих онтологіях. З огляду на важливість цього аспекту в маніпулюванні онтологіями, був створений сайт (http://www.ontologymatching.org/), що містить літературу, презентації, оцінки, проекти, корисні посилання в цій галузі. 
3. Відображення онтології (ontology mapping). Відображення однієї онтології в іншу – це функція перетворення однієї онтології в іншу або результат такого перетворення. Переважно це означає відображення понять і відносин. У найпростішому випадку поняття і відносини однієї онтології відображаються у відповідні поняття і відносини іншої. У більш складних випадках примітивні (атомарні) поняття і відносини можуть відображатися в складні поняття і відносини та навпаки. Відображення може бути частковим у тому сенсі, що в повному обсязі поняття вихідної онтології відображаються в результуючу. Це означає, зокрема, що у вихідній онтології існує під- онтологія, для якої існує повне відображення. Відображення не повинно мати ніяких невідповідностей. 
4. Узгодження онтологій (alignment) – це процес відображення онтологій в обох напрямках. Воно може бути лише частковим. Специфікація узгодження називається артикуляцією. Співвідношення полягає в тому, щоб встановити різні види відповідностей між двома онтологіями, а потім зберегти вихідні онтології разом з інформацією про знайдені відповідності, щоб надалі використовувати інформацію про взаємозв’язки онтологій. У деяких випадках допускається додавання нових понять і відносин до початкових онтологій для того, щоб знайти відповідне двостороннє відображення. Також пропонуються варіанти, коли використовується ступінь (точність) встановлюваних відповідностей.
 5. Уточнення онтології (ontology refinement). Під уточненням онтології розуміється таке зіставлення онтології A з іншого онтологією B, що кожному поняттю з онтології A ставиться відповідне еквівалентне йому поняття у B. Примітивним поняттям з онтології A можуть відповідати непримітивні поняття онтології B. 
6. Уніфікація онтології (ontology unification). Онтологія наводиться до якогось канонічного (еталонного) подання. Для уніфікації повинна задаватися вихідна онтологія, яка приводиться до результуючої згідно заданої канонічної онтології. Завдання уніфікації безлічі вихідних онтологій стає актуальним у роботі з гетерогенними онтологіями.
7. Інтеграція онтологій (ontology integration). Це операція знаходження однакових частин (тобто встановлення відповідності) двох різних онтологій A і B, при розробці нової онтології C. Інтеграція дає змогу виконати переклад між онтологіями A і B, дозволяючи здійснювати взаємодію між двома системами, де одна використовує онтологію A, а інша – онтологію B. Нова онтологія C може замінити онтології A і B або може використовуватись як проміжна онтологія для перекладу між двома онтологіями. Залежно від поставлених цілей рівень інтеграції може змінюватися від узгодження до уніфікації. Відмінність інтеграції від злиття (merging) полягає в такому: − інтеграція встановлює відповідність, а злиття дає одну результуючу онтологію; − інтеграція, як правило, діє над онтологіями різних доменів, а злиття – одного домену. 
8. Спадкування онтології (ontology inheritance). Це означає, що онтологія A успадковує все з онтології B: усі поняття, відносини, обмеження, аксіоми, додаткові знання, що містяться в онтології, не вносячи при цьому неузгодженостей. Можна сказати, що це родовідне відношення між онтологіями, коли вид успадковує всі властивості роду і при цьому має свої додаткові видові властивості. Родова онтологія описує загальні знання, а видова – спеціалізовані знання, які базуються на загальних.
Для верифікації онтологій використовують програми автоматичного логічного висновку, які  можна умовно розділити на два основних типи: інтерактивні та автоматичні прувери. В інтерактивних пруверів, як правило, використовуються логіки вищих порядків або теорії типів. У таких програмах напівавтоматичний процес пошуку доказів керується користувачем. Автоматичні прувери, як правило, призначені для менш виразних логік: для логіки першого порядку (з рівністю) або для логіки висловлювань. Однак при цьому такі програми здатні виконувати пошук доказів в автономному режимі.
 Бурхливий розвиток інтерактивних пруверів призвело до появи нового методу доказу математичних теорем - комп'ютерної формалізації. Теорема вважається формалізованою, якщо знайдено її доказ в рамках будь-якої несуперечливої формальної аксіоматичної теорії (наприклад, в численні предикатів) і це доказ пройшов процедуру верифікації (перевірки). Як правило, для складних теорем повна формалізація можлива тільки за допомогою комп'ютера. В інтерактивних пруверах, таких як Coq, Agda  і Nuprl, важливу роль відіграють конструктивні теорії. Як правило, в подібних програмах використовуються різні модифікації теорії типів Мартін-Лефа.  
Контрольні питання
 1. Роль онтологій у створенні інтелектуальних систем.
 2. Ієрархічна структура онтологій.
 3. Методика побудови онтологій засобами Protégé.
 4. Яка послідовность операцій над існуючими онтологіями з метою побудови необхідної?
 5. Як будувалась онтологія предметної галузі хлібопекарського виробництва?

Тема 18.   Генетичні алгоритми і еволюційне програмування
 	ЕВОЛЮЦІЙНЕ МОДЕЛЮВАННЯ – ПАРАДИГМА ОБ’ЄКТИВІЗАЦІЇ ПРОЦЕСУ РОЗВ’ЯЗАННЯ ЗАДАЧ ШТУЧНОГО ІНТЕЛЕКТУ. Еволюційне моделювання (evolutionary computation) - напрям в інтелектуальних системах, в основі якого лежать принципи і понятійний апарат, запозичені з еволюційної біології і популяційної генетики і об'єднують комп'ютерні методи (генетичні алгоритми, генетичне програмування, еволюційне програмування і еволюційні стратегії) моделювання еволюційних процесів в штучних системах. Моделювання еволюції складних технічних систем є інформаційним процесом, що базується на ретроспективних даних, знаннях та результатах прогнозування.  Експоненціальний ріст кількості інформації в світі створив умови для руху в напрямку суспільства, що базується на знаннях.  Пріоритетний розвиток гуманітарних наук та дещо зменшена увага до природничих наук сприяли суб’єктивізації представлення даних, у зв’язку з чим актуалізувалась задача їх аналітичної обробки та одержання нових знань. Прикладне застосування наведені аспекти мають при  вирішенні проблем, пов’язаних зі створенням нових систем та технологій. Відомо, що найбільш поширеним засобом їх  дослідження є моделювання. Наслідуючи певною мірою природні процеси, виникла ідея замінити парадигму моделювання систем на парадигму моделювання їх еволюції. Визначимо аргументи, що  свідчать на її користь. Ця методологічна парадигма виглядає як системно узгоджені множини ідей, підходів, методів, припущень та обмежень, які вибирає дослідник для розв’язання конкретної системної задачі.  
Еволюційне моделювання (evolutionary computation) засновано на принципах біологічної еволюції, які використовуються для побудови інтелектуальних систем. Воно є частиною більш широкої області штучного інтелекту - обчислювального інтелекту.
Узгодженість і ефективність роботи елементів біологічних організмів наводить на думку - чи можна використовувати принципи біологічної еволюції для оптимізації практично важливих для людини систем?
У декількох модифікаціях подібні ідеї виникали у ряду авторів. У 1966 році Л. Фогель, А. Оуенс, М. Уолш запропонували схему еволюції логічних автоматів, які вирішують завдання прогнозу. У 1975 р вийшла основоположна книга Дж. Холланда "Адаптація в природних і штучних системах" , в якій був запропонований генетичний алгоритм, досліджений в подальшому учнями і колегами Дж. Холланда в Мічиганському університеті. Приблизно в цей же час група німецьких вчених (І. Рехенберг, Г.-П. Швефель і ін.) почала розробку так званої еволюційної стратегії. Ці роботи заклали основи прикладного еволюційного моделювання або еволюційних алгоритмів.
В даний час існує ряд теорій біологічної еволюції (Ж.-Б.Ламарка, П. Тейяр де Шардена, К.Е.Бера, Л. С. Берга, А.А.Любищева, С.В.Мейена і ін.), однак, жодна з них не вважається загальновизнаною. Найбільш відомою і популярною, звичайно, є теорія Чарльза Дарвіна, яку він представив у роботі "Походження видів" в 1859 році. Ця теорія, як і інші, містить досить багато невирішених проблем. Тут ми можемо відзначити лише деякі найбільш відомі з них. Як це не парадоксально, але незважаючи на те, що сам Чарльз Дарвін назвав свою роботу "Походження видів" але як раз саме походження видів вона і не пояснює. Справа в тому, що виникнення нового виду "за алгоритмом Дарвіна" є вкрай малоймовірним подією, тому що для цього потрібно випадкове виникнення в одній точці простору і часу відразу не менше 100 особин нового виду, тобто особин, які могли б мати  плідне потомство. При меншій кількості особин вид приречений на вимирання. Тому процес видоутворення на  основі  випадкових мутацій мав би зайняти незграбно багато часу (за деякими оцінками навіть в набагато разів більше, ніж час існування Всесвіту). Крім того, "алгоритм Дарвіна" не пояснює явної системності в різноманітті виникаючих форм, типу закону гомологічних рядів Н.І. Вавілова. Тому Л.С. Берг запропонував дуже цікаву концепцію номогенезу - закономірної або спрямованої еволюції живого. У цій концепції передбачається, що філогенез має певний напрям і зміна форми є не випадковою, а задається деяким вектором, природа якого не ясна. Ідеї номогенезу глибоко розробив і розвинув А.А. Любищев, який висловив гіпотезу про математичні закономірності, що визначають різноманіття живих форм. Крім того, Дарвін не зміг показати механізм успадкування, при якому підтримується і закріплюється мінливість. Це було за п'ятдесят років до того, як генетична теорія спадковості почала поширюватися по світу, і за тридцять років до того, як "еволюційний синтез" зміцнив зв'язок між теорією еволюції і молодою генетикою.Тим ні менш і не дивлячись на свої недоліки, саме теорія Дарвіна традиційно і моделюється в еволюційних алгоритмах, хоча, звичайно, це не виключає можливості моделювання і інших теорій еволюції в еволюційних алгоритмах. Більш того, можливо саме таке комп'ютерне моделювання та порівняння його результатів з картиною реальної еволюції життя на Землі може бути і зіграє позитивну роль у подальшій розробці найбільш адекватної  теорії біологічної еволюції.
Теорія Дарвіна застосована не до окремих особ, а до популяцій - великій кількості особин одного виду, тобто здатних давати  плідне потомство, що знаходиться в певному статичному або динамічномц зовнішньому середовищі. В основі моделі еволюції Дарвіна лежать випадкові зміни окремих матеріальних елементів живого організму при переході від покоління до покоління. Доцільні зміни, які полегшують виживання і виробництво нащадків в даному конкретному зовнішньому середовищі, зберігаються і передаються потомству, тобто успадковуються. Особи, які не мають відповідних пристосувань, гинуть, не залишивши потомства або залишивши його менше, ніж пристосовані (вважається, що кількість потомства пропорційно ступеню пристосованості). Тому в результаті природного відбору виникає популяція з найбільш пристосованих особин, яка може стати основою нового виду. Природний відбір відбувається в умовах конкуренції особин популяції, а іноді і різних видів, один з одним за різні ресурси, такі, наприклад, як їжа або вода. Крім того, члени популяції одного виду часто конкурують за залучення шлюбного партнера. Ті особини, які найбільш пристосовані до навколишніх умов, матимуть відносно більше шансів відтворити нащадків. Слабо пристосовані особини або зовсім не справлять потомства, або їх потомство буде дуже нечисленним. Це означає, що гени від високо адаптованих або пристосованих особин будуть поширюваться в збільшенні кількості нащадків на кожному наступному поколінні. Таким чином, по суті справи кожен конкретний еволюційний алгоритм представляє імітаційну модель деякої певної теорії біологічної еволюції або її варіанту. Разом з тим необхідно відзначити, що самі дослідники біологічної еволюції поки що не до кінця визначилися з критеріями і методами визначення ступеня суттєвості для підтримуваної ними теорії еволюції тих чи інших біологічних процесів, які власне і моделюються в еволюційних алгоритмах.
Еволюційне моделювання включає ряд напрямків:
• розробка генетичних оптимізаційних алгоритмів;
• еволюційне програмування (розробка еволюційних алгоритмів і обчислювальних процедур, еволюційні стратегії, генетичне програмування);
• розробка еволюційних моделей загального призначення;
• прикладне еволюційне моделювання (в  тому числі з використанням методів агентного моделювання).
Головною особливістю методів еволюційного моделювання є використання принципів біологічної еволюції, в тому числі селекції, схрещування і мутації особин, які є базовими сутностями моделі. При цьому можлива як природна еволюція, що не припускає зовнішнього втручання в систему, так і спрямована еволюція, заснована на критеріальній селекції особин в популяції, наприклад на основі оцінки значення функції пристосованості особин (фітнес-функції). Відповідно при спрямованій (керованій) еволюції найважливішим завданням є пошук оптимальної стратегії відбору кращих особин і розвитку популяції.
У загальному вигляді еволюційний алгоритм - це оптимізаційний метод, який базується на еволюції популяції "особин". Кожна особина характеризується пристосованістю - багатовимірної функцією її генів. Завдання оптимізації полягає у максимізації функції пристосованості. В процесі еволюції в результаті відбору, рекомбінації і мутації геномів особин відбувається пошук особин з високою пристосованістю. До ключових понять еволюційного процесу відносяться:
- природний відбір і селекція;
- успадкування ознак;
- мінливість;
- мутація;
- навчання;
- механізми  соціальної пам'яті.
Усі процеси, зазначені даними термінами, складають зміст реального ходу соціальної еволюції. Однак в модель необхідно включити їх так, щоб не порушити фундаментальних закономірностей, отримати картину "штучного світу", що чимось нагадує реальний світ і допомагає його зрозуміти. Отже, перш за все аналізуються складові еволюційного процесу. Але одночасно необхідно досліджувати еволюцію конкретного об'єкта, тобто ввести елементарний елемент еволюції. Труднощі використання еволюційних моделей "штучних світів" складаються головним чином в непередбачуваності моделей поведінки, які можуть спонтанно виникати і зникати, причому чим більше "свідома" і "грамотна" система, тим більша ймовірність того, що вона змінить модель поведінки при певних змінах середовища, так як найбільш вміло і швидко ідентифікує цю зміну. Однак множинні інформаційні спотворення, що пронизують реальні  відносини, в процесі розпізнавання зміни призводять до випадкового вибору моделі поведінки, не кажучи вже про випадковості самої зміни.
Отже, побудова еволюційних моделей "штучних світів" відрізняється від традиційних підходів наступними характеристиками:
1) базуються на поняттях "природного відбору", селекції, навчання, мутації і намагаються їх математично формалізувати;
2) досліджують суть динамічні процеси, які розглядають випадковість як невід'ємний елемент еволюції;
3) вважають перехідні процеси важливими, як і стійкі стани;
4) аналізують стійкість з урахуванням механізмів саморуйнування цього стану;
5) вимагають використання нових статистичних процедур, які б дозволяли характеризувати перехідні стани, процеси саморуйнування і раптові появи нових властивостей і моделей поведінки об’єктів;
6) визначають поняття популяції як одиниці еволюції і досліджують процеси взаємодії і передачі знань як всередині популяції, так і між популяціями;
7) обчислювальний експеримент і комп'ютерне моделювання вважають головними інструментами імітації еволюційного процесу і несуть безумовний пріоритет перед аналітичними методами, які практично не використовуються в роботі даних моделей, хоча допомагають у складанні алгоритмів програм при введенні моделей в комп'ютер.
 Основні ідеї та механізми  еволюційного моделювання. Основна теза підходу, названого еволюційним моделюванням - замінити процес моделювання складного об'єкта моделюванням на його еволюцію. Він спрямований      на застосування механізмів природної еволюції при синтезі складних систем обробки інформації. У своїй теорії                 походження видів Ч. Дарвін відкрив і обгрунтував основний закон розвитку органічного світу, охарактеризувавши його   взаємодією трьох наступних факторів:
                     1) спадкової мінливості;
                     2) боротьби за існування;
                     3) природного відбору.
Дарвінівська теорія отримала підтвердження і розвиток у генетиці і інших  науках. Одним з найбільших еволюціоністів І.І.Шмальгаузеном були висунуті наступні необхідні і достатні умови, що визначають неминучість еволюції:
  	  1) спадкова мінливість, тобто мутації як передумова еволюції, її матеріал;
  	  2) боротьба за існування як контролюючий і спрямовуючий фактор;
  	  3) природний відбір як перетворюючий фактор.
 	Еволюційні обчислення - термін, що часто використовується для загального опису алгоритмів пошуку, оптимізації або навчання, основаних на формалізованих принципах природнього еволюційного процесу. Існують різні варіанти класифікації класичних методів, що використовуються для прийняття рішень. Значну їх частину складають методи оптимізації, які застосовуються при розв'язанні задач лінійного, нелінійного, цілочисельного, опуклого, динамічного стохастичного, геометричного програмування тощо. До сьогоднішнього дня не розроблені методи, які були б інваріантними до розмірності і змісту області даних, структури і параметрів цільової функції. Рухаючись у цьому напрямку, різні вчені незалежно один від одного запропонували парадигми, що базуються на ідеях і принципах природної еволюції. До них відносять відомі методи еволюційного моделювання, які ще називають еволюційними алгоритмами:
 Еволюційні методи призначені для пошуку кращих рішень і засновані на статистичному підході при дослідженнях ситуацій і ітераційним наближенням до шуканого стану систем. На відмінність від точних методів математичного програмування еволюційні методи дозволяють знаходити рішення, близькі до оптимальних, за прийнятний час, а на відміну від відомих евристичних методів оптимізації характеризуються істотно меншою залежністю від особливостей застосувань (тобто більш універсальні) і в багатьох випадках забезпечують кращу ступінь наближення до оптимального рішення. Основна перевага еволюційних методів оптимізації полягає в можливості розв’язання багатомодальних (мають кілька локальних екстремумів) задач з великою розмірністю за рахунок поєднання елементів випадковості і детермінованості точно також, як це відбувається в природному середовищі.   	 Детермінованість цих методів полягає в моделюванні природних процесів відбору, розмноження і успадкування, що відбуваються за строго визначеними правилами, основним з яких є є закон еволюції: «виживає найсильніший». Іншим важливим фактором ефективності еволюційних обчислень є моделювання процесів розмноження і успадкування. Розглянуті варіанти рішень можуть за певним правилом породжувати нові рішення, які будуть наслідувати кращі риси своїх «предків».
   	В якості випадкового елемента в методах еволюційних обчислень використовується моделювання процесу мутації. За його допомогою характеристики того чи іншого рішення можуть бути випадково змінені, що приведе до нового напрямку в процесі еволюції рішень і може прискорити процес вироблення кращого рішення.
      Переваги та недоліки еволюційних обчислень можна коротко сформулювати наступним чином.
Переваги еволюційних обчислень:
 	 • широка область застосування;
  	• можливість проблемно-орієнтованого кодування рішень, підбору початкової популяції, комбінування еволюційних обчислень з нееволюційними  алгоритмами, продовження процесу  еволюції до тих пір, поки є необхідні ресурси;
  	• придатність для пошуку в складному просторі рішень великої розмірності;
 	 • відсутність обмежень на вид цільової функції;
 	 • ясність схеми і базових принципів еволюційних обчислень;
  	• інтегрованість еволюційних обчислень з іншими некласичними парадигмами штучного інтелекту, такими як штучні нейромережі і нечітка логіка.
Недоліки еволюційних обчислень:
  	• евристичний характер еволюційних обчислень не гарантує оптимальності отриманого рішення (правда, на практиці, найчастіше, важливо за заданий час отримати одне або кілька субоптимальних альтернативних рішень, тим більше що вихідні дані в задачі можуть динамічно змінюватися, бути неточними або неповними);
 	 • відносно висока обчислювальна трудомісткість, яка проте   додається за рахунок розпаралелювання на рівні організації еволюційних обчислень.  
Принцип еволюційного моделювання передбачає необхідність і ефективність використання методів і технології штучного інтелекту, зокрема, експертних систем.
Основні еволюційні алгоритми:
1) генетичний алгоритм, призначений для оптимізації функцій дискретних змінних і акцентує увагу на рекомбінаціях геномів;
2) еволюційне програмування, орієнтоване на оптимізацію безперервних функцій без використання рекомбінації;
3) еволюційна стратегія, орієнтована на оптимізацію безперервних функцій з використанням рекомбінації;
4) генетичне програмування, що використовує еволюційний метод для оптимізації комп'ютерних програм.
У порівнянні зі звичайними оптимізаційними методами еволюційні алгоритми мають такі особливості: паралельний пошук, випадкові мутації і рекомбінації вже знайдених оптимальних рішень. Вони добре підходять як простий евристичний метод оптимізації багатовимірних, погано визначених функцій. Формуються навіть цілі області застосування еволюційних алгоритмів.
Адекватним засобом реалізації процедур еволюційного моделювання є генетичні алгоритми. Тому не дивно, що вчені, які займаються комп'ютерними  дослідженнями, звернулися до теорії еволюції в пошуках натхнення. Можливість того, що обчислювальна система, наділена простими механізмами мінливості і відбору, могла б функціонувати за аналогією із законами еволюції в природних системах, була дуже приваблива. Ця   надія стала причиною появи ряду обчислювальних систем, побудованих на принципах природного відбору. Саме відбір найкращих об'єктів є ключовою евристикою всіх еволюційних методів, що дозволяють часто зменшити час пошуку рішення на кілька порядків в порівнянні з випадковим пошуком. Якщо спробувати виразити цю евристику на природній мові, то  складно отримати найкраще рішення, модифікуючи поганее; швидше за все, воно вийде з декількох кращих на даний момент. 
З основних особливостей еволюційних алгоритмів можна відзначити їх деяку складність в плані налаштування основних параметрів (виродження, або нестійкість рішення).   Даний недолік випливає з основної евристики - можна "знищити" предка найкращого рішення, якщо зробити селекцію занадто "жорсткої" (не дарма ж біологам давно відомо, що якщо залишилося менше десятка особин зникаючого виду, то цей вид сам по собі зникне через виродження).
Історія еволюційних обчислень почалася з розробки ряду різних, незалежних моделей. Основними з них були генетичні алгоритми і класифікаційні системи Голланда (Holland), опубліковані на початку 60-х років і одержали загальне визнання після виходу в світ книги, що стала класикою в цій області, - "Адаптація в природних і штучних системах". У 70-х роках в рамках теорії випадкового пошуку Растригиним Л.А. був запропонований ряд алгоритмів, що використовують ідеї біологічного поведінки особин. Розвиток цих ідей знайшов відображення в циклі робіт Букатовой І.Л. по еволюційному моделювання. Розвиваючи ідеї про  доцільну і оптимальну поведінці стохастичних автоматів, Неймарк Ю.І. запропонував здійснювати пошук глобального екстремуму на основі колективу незалежних автоматів, що моделюють процеси розвитку та елімінації особин. Великий внесок у розвиток еволюційного програмування внесли Фогел (Fogel) і Уолш (Walsh). Незважаючи на різницю в підходах, кожна з цих "шкіл" взяла за основу ряд принципів, які існують в природі, і спростила їх до такої міри, щоб їх можна було реалізувати на комп'ютері.
Головні труднощі з можливістю побудови обчислювальних систем, заснованих на принципах природного відбору і застосуванням цих систем в прикладних задачах, полягає в тому, що природні системи досить хаотичні, а всі наші дії, фактично, носять чітку спрямованість. Ми використовуємо комп'ютер як інструмент для вирішення певних завдань, які ми самі і формулюємо, і ми акцентуємо увагу на максимально швидкому виконанні при мінімальних витратах. Природні системи не мають ніяких таких цілей або обмежень, у всякому разі нам вони не очевидні. Виживання в природі не спрямовано до деякої фіксованої мети, замість цього еволюція робить крок вперед в будь-якому доступному її напрямку.
 	Звичайно, еволюція біологічних систем не єдиний "джерело натхнення" творців нових методів, що моделюють природні процеси. Нейронні мережі, наприклад, засновані на моделюванні поведінки нейронів в мозку. Вони  можуть використовуватися для ряду задач класифікації, наприклад, завдання розпізнавання образів, машинного навчання, обробки зображень і ін.  Область їх застосування частково перекривається зі сферою застосування генетичних алгоритмів.
Еволюційні алгоритми відрізняються один від іншого. Але  всі вони базуються на принципах еволюції:
1. Індивіди мають кінцевий час життя; для продовження роду необхідне розмноження.
2. Деякою мірою нащадки відрізняються від батьків.
3. Індивіди існують в середовищі, в якому виживання є результатом боротьби за існування, і їх зміни сприяють кращій адаптації до умов зовнішнього середовища.
4. За допомогою природної селекції краще адаптовані індивіди мають тенденцію до більш тривалого життя і більшої кількості нащадків.
5. Нащадкам властиво успадковувати корисні характеристики своїх батьків, що впливає на збільшення пристосованості індивідів в часі.
 	Оскільки кожний еволюційний алгоритм є ітераційним методом, то для його реалізації необхідно застосовувати обчислювальну техніку. Неминуче виникають питання збіжності кожного з цих алгоритмів, швидкості збіжності (для еволюційних алгоритмів вона як і раніше є актуальним), проведення препроцесінгу даних. Ефективний вибір і використання еволюційного алгоритму залежать від правильного співвідношення формалізованої задачі, сутності методу для її розв'язання та очікуваних результатів.
Генетичний алгоритм (ГА) є одним із методів знаходження екстремумів складних функцій. ГА – складова частина еволюційного моделювання як наукового напряму, що базується на принципах природного відбору за Ч. Дарвіном. ГА вперше був запропонований в 1975 році в Мічиганському університеті Джоном Холландом. Він отримав назву репродуктивний план Холланда і надалі активно використовувався як базовий алгоритм в еволюційних обчисленнях. Подальший розвиток ГА, як власне і назву, отримав в роботах Девіда Голдберга (Goldberg D.E.) в лабораторії генетичних алгоритмів Іллінойського університету, Кеннета де Йонга (de Jong K.A.) в університеті Джорджа Мейсона, штат Вірджинія, США та їх учнів.
3 біології відомо, що генетичний код організму називається його генотипом, а фізична реалізація коду - фенотипом. Ці та інші визначення є базовими в термінології ГА, що не означає точного наслідування біологічних процесів, і лише в деякому наближенні ГА можна вважати їх моделлю. У біологічній хромосомі інформація закодована в ланцюжку ДНК, що складається з довгої послідовності чотирьох елементів: аденіну, цитозину, гуаніну та тиміну. Початковий генетичний код організму записують, використовуючи чотири букви (A, C, G, T) алфавіту. B ГА хромосома представлена рядком, записаним в двохелементному алфавіті, що складається з нуля та одиниці.
Генетичний алгоритм є найвідомішим на даний момент представником еволюційних алгоритмів, і за  своєю суттю є алгоритмом для знаходження глобального екстремуму багатоекстремальної функції. ГА являє собою модель розмноження живих організмів. ГА працюють з сукупністю "особин" - популяцією, кожна з яких представляє можливе рішення даної проблеми. Кожна особина оцінюється мірою її "пристосованості" згідно з тим, наскільки "добре" відповідне її рішення задачі. У природі це еквівалентно оцінці того, наскільки ефективний організм при конкуренції за ресурси. Найбільш пристосовані особини отримують можливість "відтворювати" потомство за допомогою "перехресного схрещування" з іншими особинами популяції. Це призводить до появи нових особин, які поєднують в собі деякі характеристики, успадковані ними від батьків. Найменш пристосовані особини з меншою ймовірністю зможуть відтворити нащадків, так що ті властивості, якими вони володіли, будуть поступово зникати з популяції в процесі еволюції. Іноді відбуваються мутації, або спонтанні зміни в генах. Таким чином, з покоління в покоління, хороші характеристики поширюються по всій популяції. Схрещування найбільш пристосованих особин призводить до того, що досліджуються найбільш перспективні ділянки простору пошуку. В кінцевому підсумку популяція буде сходитися до оптимального рішення задачі. Перевага ГА полягає в тому, що він знаходить приблизні оптимальні рішення за відносно короткий час.
 
Рис.18.1. Схема базового генетичного алгоритму
Генетичні алгоритми являють собою новий напрямок в алгоритміці. Вони здатні не тільки вирішувати і скорочувати перебір в складних завданнях, але і легко адаптуватися до зміни проблеми. Спочатку ГА-функція генерує певну кількість можливих рішень, а потім обчислює для кожного 'рівень виживання' (fitness) - близькість до істини. Ці рішення дають потомство. Ті що 'сильніше', тобто більше підходять, має більший шанс до відтворення, а 'слабкі' поступово відмирають. Процес повторюється до тих пір, поки не знайдено рішення, або ніхто не досяг достатню до нього наближення.  
Реалізацію базового генетичного алгоритму можна уявити як ітераційний процес, що включає кілька етапів (рис.18.1):
1. генерація початкової популяції,
2. відтворення "нащадків":
- вибір батьківської пари,
- вибір і реалізація одного з операторів кросовера,
- вибір і реалізація одного з операторів мутації,
3. створення репродукційної групи,
4. процедура відбору і формування на його основі нового покоління,
5. якщо не виконана умова зупинки, то перейти до п.2.

У стандартному генетичному алгоритмі використовуються наступні генетичні оператори:
– оператор відбору (селекції);
– оператор кроссинговера (рекомбінації);
– оператор мутації;
– оператор інверсії (факультативно).
 Також для потреб розв'язуваної задачі можуть застосовуватися інші генетичні оператори: транслокації, сегрегації, ін.
Генетичні алгоритми є одними з еволюційних алгоритмів, застосовуваних для пошуку глобального екстремуму функції багатьох змінних. Принцип роботи генетичних алгоритмів заснований на моделюванні деяких механізмів популяційної генетики: маніпулювання хромосомним набором при формуванні генотипу нової біологічної особи шляхом успадкування ділянок хромосомних наборів батьків (кросинговер), випадкові зміни генотипу, відоме в природі як мутація. Іншим важливим механізмом, запозиченим у природи, є процедура природного відбору, спрямована на поліпшення від покоління до покоління пристосованості членів популяції шляхом більшої здібності до "виживання" особин, що володіють певними ознаками.
Генетичний алгоритм - новітній, але не єдино можливий спосіб вирішення завдань оптимізації. З давніх-давен відомі два основних шляхи вирішення таких завдань - переборний і локально-градієнтний. У цих методів свої переваги і недоліки, і в кожному конкретному випадку слід подумати, який з них вибрати.
 	Переборний метод найбільш простий за своєю суттю і тривіальний в програмуванні. Для пошуку оптимального рішення (точки максимуму цільової функції) потрібно послідовно обчислити значення цільової функції у всіх можливих точках, запам'ятовуючи максимальне з них. Недоліком цього методу є значна обчислювальна вартість.  Однак, якщо перебір всіх варіантів за розумний час можливий, то можна бути абсолютно впевненим у тому, що знайдене рішення справді оптимально.
Другий популярний спосіб заснований на методі градієнтного спуску. При цьому спочатку вибираються деякі випадкові значення параметрів, а потім ці значення поступово змінюють, домагаючись найбільшої швидкості росту цільової функції. Досягнувши локального максимуму, такий алгоритм зупиняється, тому для пошуку глобального оптимуму будуть потрібні додаткові зусилля. Градієнтні методи працюють дуже швидко, але не гарантують оптимальності знайденого рішення. Вони ідеальні для застосування в так званих унімодальних завданнях, де цільова функція має єдиний локальний максимум (він же - глобальний).  
Типове практичне завдання, як правило, мультимодальне і багатовимірне, тобто містить багато параметрів. Для таких завдань не існує жодного універсального методу, який дозволяв би досить швидко знайти абсолютно точне рішення. Однак, комбінуючи переборний і градієнтний методи, можна сподіватися отримати хоча б наближене рішення, точність якого буде зростати при збільшенні часу розрахунку.
Генетичний алгоритм являє собою саме такий комбінований метод. Механізми схрещування і мутації в якомусь сенсі реалізують переборну частина методу, а відбір кращих рішень - градієнтний спуск. На рис. 11.2 показано, що така комбінація дозволяє забезпечити стійко хорошу ефективність генетичного пошуку для будь-яких типів завдань. Отже, якщо на деякій множині  задана  складна функція від декількох змінних, то генетичний алгоритм - це програма, яка за розумний час знаходить точку, де значення функції досить близько до максимально можливого. Вибираючи прийнятний час розрахунку, ми отримаємо одне з кращих рішень, які взагалі можливо отримати за цей час.
 	На практиці часом складно, а часом і неможливо, зафіксувати властивості функціональної залежності вихідних параметрів від вхідних величин, ще складніше привести аналітичний опис такої залежності. Ця обставина значно ускладнює застосування на стадії проектування класичних методів оптимізації, оскільки більшість з них грунтуються на використанні апріорної інформації про характер поведінки цільової функції, а завдання визначення належності функції до того чи іншого класу порівняно за складністю з вихідною функцією. У зв'язку з цим постає завдання побудови таких методів оптимізації, які були б здатні відшукувати рішення практично при повній відсутності припущень про характер досліджуваної функції. Одними з таких методів є так звані еволюційні методи пошуку і, зокрема, генетичні алгоритми (ГА), що моделюють процеси природної еволюції.
Особливості еволюційного моделювання як технології оптимізації.
–	Разом зі звичайним найчастіше використовується закодоване уявлення значень параметрів задачі (як правило, у вигляді хромосоми).
–	Пошук здійснюється не з єдиної точки, а з «популяції» точок.
–	Специфіка роботи дозволяє накопичувати і використовувати знання по дослідженому просторі пошуку і отже виявляти здатність до самонавчання.
–	В процесі пошуку використовується значення цільової функції, а не її приріст.
–	Виконується одночасний аналіз різних областей простору рішень, у зв'язку з чим можливе знаходження нових областей з найкращими значеннями цільової функції за рахунок об'єднання субоптимальних рішень з різних популяцій.
До базових операторів ГА відносять кросовер (рекомбінацію, кросинговер), мутацію та інверсію. 3 їх допомогою здійснюється домінуюче розмноження краще адаптованих до зовнішнього середовища індивідів, а також одержання індивідів з характеристиками, які були відсутні у індивідів попередніх поколінь. B оптимізаційних задачах, таким чином, реалізується наближення до оптимального розв'язку і виходу цільової функції з локальних екстремумів. У штучній системі при оптимізації деяка частина факторів може бути керованою в сенсі того, що їх значення задаються в певних межах аналітиком з метою мінімізації або максимізації цільової функції.  Узагальнюючи, вважаємо надалі, що всі фактори керовані. Крім того, заздалегідь приймаємо відомими межі зміни їх значень, тобто, якщо ці умови не виконані, то задача матиме іншу постановку. B нашому випадку задача полягає в знаходженні екстремального значення функції з точністю, при відомих припущеннях про керованість факторів і відомих інтервалах їх значень. Вказана точність розв'язку свідчить про апріорне допущення про те, що отриманий розв'язок відрізнятиметься від точного розв'язку на величину , що не перевищує наперед заданого значення, і це не суперечить цілі розв'язання задачі. Таку задачу можна розв'язати і методом повного перебору, але комбінаторна складність такого підходу часто робить його непридатним через час розрахунку, порівнянний з часом існування людства або Всесвіту. Тому пропонується більш компактний алгоритм пошуку розв'язку на базі ГА.
 Переваги генетичних алгоритмів   як методів оптимізації (рис. 18.2):
–	незалежність від виду функції, включаючи підтримку неаналітичного завдання функції;
–	незалежність від області визначення і типів змінних оптимізації;
–	застосування до широкого діапазону завдань без модифікації алгоритму;
–	висока перешкодозахищеність, як наслідок адекватна робастність (здатність лише поступово знижувати якість роботи у міру наближення до кордонів допустимої надійності даних).
 
Рис.18.2. Переваги генетичних алгоритмів   як методів оптимізації
Цільова функція f (x) може бути:
1) задана аналітично або таблично;
2) бути результатом чисельного експерименту, зокрема обчислюватися за допомогою імітаційної моделі.
У першому випадку застосування ГА невиправдано, тому що існує клас градієнтних методів оптимізації, що дозволяють отримати точне рішення. У другому випадку застосування ГА та інших методів стохастичної (тобто заснованої на випадковому пошуці) оптимізації може бути єдино можливим підходом, за умови що обчислювальна складність завдання така, що прямі чисельні алгоритми (алгоритми нульового порядку, наприклад метод Хука - Дживса, алгоритм Нелдера - Міда і ін.) не працюють або неефективні. До подібних складним оптимізаційних завдань відносяться завдання класу NP, тобто завдання, рішення якого можна перевірити на недетермінованій машині Тьюринга (МТ) за поліноміальний час. Інакше, для знаходження рішення такої оптимізаційної задачі в гіршому випадку потрібен повний перебір всіх рішень   на традиційному комп'ютері. Слід зазначити, що генетичні алгоритми дозволяють здійснити повний перебір рішень за умови недопущення передчасної збіжності (що забезпечується оператором мутації). Відповідно, теоретично ГА здатні вирішувати завдання класу NP.
Отже, з практичної точки зору доказ належності оптимізаційної задачі до класу NP може бути використано в якості одного з основних обгрунтувань застосування генетичних алгоритмів. Проте дана підстава не є єдиною.
Застосування генетичних алгоритмів також обгрунтовано, якщо неможливо сформулювати завдання у вигляді, придатному для більш швидких алгоритмів локальної оптимізації (наприклад, для градієнтних алгоритмів, які передбачають можливість швидкого обчислення градієнта функції, представленої у вигляді штучної нейронної мережі, за допомогою алгоритму зворотного поширення помилки), або якщо стоїть завдання оптимізації недиференційованої функції, або завдання багатокритеріальної глобальної оптимізації..Застосування ГА вельми доцільно в системах імітаційного моделювання, інтегрованих з інформаційним сховищем (багатовимірної базою даних). У подібних системах оцінка значення цільової функції, як правило, вимагає значних обчислювальних і часових ресурсів (так як необхідно завантаження надвеликого масиву вихідних даних з інформаційного сховища в модель, а також прогін моделі на всьому інтервалі імітаційного моделювання), що істотно обмежує можливості застосування точних методів нульового порядку і методів класу нейронних мереж. Крім того, одним з відомих недоліків багатьох точних методів нульового порядку є висока ймовірність алгоритму «застрягти» в одному з локальних екстремумів. В ГА для запобігання подібної проблеми використовується оператор мутації. Відзначимо, що, на думку відомого американського вченого К. де Іонг, великого фахівця в області генетичних алгоритмів, вирішальним аргументом застосування ГА є відповідь на питання про те, який простір пошуку буде досліджено. Якщо цей простір легко аналізувати і його структура дозволяє використовувати спеціалізовані методи пошуку, то використання генетичних алгоритмів менш ефективно з точки зору витрат обчислювальних ресурсів. Якщо ж простір пошуку не піддається аналізу і відносно слабко структурований і якщо можливий ефективний спосіб представлення за допомогою ГА цього простору, то ГА виявляються досить ефективним методом евристичного пошуку у великих і складних областях.
На сьогоднішній день генетичні алгоритми довели свою конкурентноздатність при вирішенні багатьох NP-важких завдань і особливо в практичних додатках, де математичні моделі мають складну структуру і застосування стандартних методів типу гілок і меж, динамічного або лінійного програмування вкрай утруднено. В середньому локальні оптимум розташовані набагато ближче до глобального оптимуму, ніж до випадково вибраної точці. Їх розподіл в області допустимих рішень не є рівномірним. Вони концентруються в районі  глобального оптимуму, займаючи область невеликого діаметру. Ця гіпотеза частково пояснює працездатність генетичних алгоритмів. Якщо в популяції збираються локальні оптимум, які відповідно до гіпотези сконцентровані в одному місці, і чергове рішення i 'вибирається десь між двома довільними локальними оптимуму, то такий процес має багато шансів знайти глобальний оптимум.  
	Специфічна термінологія в сфері ГА в деякій мірі відповідає термінології математичного моделювання та оптимізації (табл. 18.1).
Розглянемо базовий ГА.
Крок 1. Ініціалізація початкового моменту часу t = 0.
Крок 2. Випадковим чином сформувати початкову популяцію, що складається з  визначеної певним чином індивідів. .
Крок 3. Обчислити пристосованість кожного індивіда та популяції в цілому за допомою фітнес-функція (fitness-function). Значення цієї функції вказує на те, наскільки оптимальним є індивід, що описується даною хромосомою, для розв'язання задачі.
Крок 4. За певним принципом обрати індивіда з популяції .
Крок 5. За тим самим принципом обрати іншого індивіда з популяції та з певною, наперед заданою ймовірністю (ймовірністю кросоверу) виконати оператор кросоверу.
Крок 6. 3 певною ймовірністю  з відібрати одного індивіда.
Крок 7. 3 певною наперед заданою ймовірністю (ймовірністю мутації ) виконати оператор мутації .
Крок 8. 3 певною наперед заданою ймовірністю (ймовірністю інверсії ) виконати оператор інверсії .
Крок 9. Помістити отриману хромосому в популяцію  .
Крок 10. Оцінити пристосованість нового індивіда у порівняні з іншими індивідами. Вилучити з популяції найгірш пристосовану особину  .
Крок 11. Збільшити номер поточної епохи  .
Крок 12. Якщо виконується умова зупинки (гранична кількість епох, збіжність популяції, граничне значення часу роботи алгоритму), то завершити роботу, інакше перейти на крок 3.
Таблиця 18.1. Відповідність термінів еволюційних та математичних моделей
Еволюційна модель	Математична модель
Хроносома	Розв’язок, об’,єкт, рядок, послідовність
Ген	Змінна, параметр, характеристика, ознака
Аллель	Значення фрагмента закодованого параметра
Локус	Номер фрагмента закодованого параметра
Генотип	Множина закодованих розв’язків задачі, простір пошуку
Фенотип	Множина  розв’язків задачі, простір розв’язків
Особина, індивід	Об’єкт, система
Придатність, пристосованість	Якість, оптимальність
Fitness-функція	Цільова функція
Популяція	Множина  розв’язків
Покоління	Ітерація роботи еволюційного алгоритму
Необхідними і достатніми умовами виникнення еволюційного процесу є:
- спадкова мінливість як передумова еволюції;
- боротьба за існування як контролюючий і спрямовуючий чинник;
- природний відбір як перетворюючий фактор.
Нехай є деякий простір розв’язків, заповнений усіма можливими розв’язками, процес пошуку полягає в дослідженні точок цього простору з метою постійного поліпшення значень параметрів задачі. 
Тоді на кожній ітерації (еволюції) пошуку:
- кожна нова популяція складається тільки з «життєздатних» об'єктів;
- кожна нова популяція краща (в сенсі пристосованості, оптимальності)
попередньої;
- в процесі еволюції подальша популяція залежить тільки від попередньої;
- природний відбір моделюється через виконання процедури селекції членів популяції. Якість об'єкта популяції (якість розв’язку) пропорційна ймовірності його переходу повністю (копіювання) або частково (у вигляді нащадків) в наступне покоління;
- «розв’язки-нащадки» успадковують характеристики батьків з деякою варіацією;
- пристосованість індивіда популяції (якість розв’язку) оцінюється за допомогою спеціальної fitness-функції. Чим краще її значення, тим більше нащадків в наступному поколінні буде у даного члена популяції.
 Залежно від обраного методу ГА  подання інформації про завдання в еволюційній моделі  може бути різне: на рівні генотипу або фенотипу (рис.18.3).
 

Рис.18.3. Відображення генотипів простору пошуку в фенотип простору розв’язків 

Генотип - уявлення простору пошуку завдання в закодованому вигляді комплексу генів, що містяться в наборі хромосом.
Фенотип - уявлення простору розв’язку  завдання в звичному для сприйняття користувачем вигляді.
Тобто, в ГА використовується явний поділ на простір пошуку (генотип) і простір розв’язків   (фенотип) (рис.18.4). При цьому кожний розв’язок кодується у вигляді бінарної хромосоми C довжиною L (C), що складається з n числа генів g, а кожен ген є двійковий код довжиною L (g), відповідний одній змінній задачі оптимізації.

 

Рис. 18.4. Кодування простору розв’язку  завдання в ГА

Альтернативними формами кодування хромосом є використання коду Грея, - символьне кодування; кодування  за допомогою дійсних чисел, а також визначається програмістом, виходячи із специфіки задачі.
	Наприклад, використання коду Грея. (рис.18.5) дає  забезпечення неперервності, тобто якщо фенотипи відрізняються на крок, то і відповідні генотипи відрізнятимуться значенням лише одного гена (біта). Для переходу від звичайного бінарного представлення до коду Грея використовують таке правило: якщо перетворення починається з боку старшого розряду, то старший розряд залишається незмінним; значення елементів у кожному наступному розряді залишається незмінним, якщо сусідній старший розряд дорівнює нулю, або інвертується, якщо він дорівнює одиниці. Користуючись таким правилом для комбінації початкового коду 1011011, одержимо код Грея - 1110110. 
Перетворення із коду Грея на звичайний бінарний код здійснюємо таким чином: Залишаючи старший розряд незмінним, інвертувати елементи у кожному наступному розряді стільки разів, скільки одиниць передує йому у пройдених розрядах комбінацій рефлексного коду.
Приклад . Перетворимо код Грея 1110100 на звичайний код. Старший розряд записуємо без змін - 1. Значення наступного елемента зміниться на нуль, оскільки перед ним - непарна кількість одиниць (іншими словами, він інвертується непарну кількість разів). Значення наступного розряду залишиться незмінним; четвертий і п'ятий зліва елементи змінюються на протилежні; шостий і сьомий розряди пишемо без змін: 1011000.

 

Рис.18.5. Цифрове кодування хроносом в ГА

Цільова функція стає фітнес-функцією. Можливі значення елемента вектора розв’язків задачі і простору пошуку стають його фенотипом. Двійковим представленням фенотипу є генотип (наприклад, 34→100010). Генотип має певну кількість елементів (генів, бітів). Один або декілька генотипів (по кількості елементів ) утворюють хромосому (рис. 18.4).
 Оцінка особин популяції.      Щоб оптимізувати будь-яку структуру з використанням ГА, потрібно задати міру якості для кожного індивіда в просторі пошуку. Для цієї мети використовується функція пристосованості (fitnes-функція). У завданнях максимізаціі цільова функція часто сама виступає в якості функції пристосованості; для задач мінімізації цільову функцію слід інвертувати. якщо рішення  завдання має обмеження, виконання яких неможливо контролювати алгоритмічно, то функція пристосованості, як правило, включає також штрафи за невиконання обмежень (вони зменшують її значення).
	Генерація випадкового початкового стану. Перше покоління створюється з довільно обраних рішень (хромосом). Це відрізняється від стандартних методів, коли початковий стан завжди одний і те ж. Початкова популяція містить певну кількість випадково згенеруваних хромосом (як правило) або хромосом, пов'язаних зі специфічними (перспективними в плані
дослідження) точками простору рішень (при наявності додаткової інформації про розташування оптимального рішення) (рис.18.6). 
	Стандартні оператори для усіх типів генетичних алгоритмів це: селекція, схрещування і мутація.
Функцією оператора селекції (reproduction, selection) є вибір двох найсильніших (пристосованих) батьківських особин з популяції для схрещування (кросовера) з метою формування нових більш сильних особин. Таким чином, здійснюється спрямований пошук локальних екстремумів (і послідовний рух в сторону максимуму) в розглянутій задачі. Селекція застосовується для визначення на основі значень fitness-функції хромосом-кандидатів в наступне покоління. У генетичному алгоритмі можуть бути використані різні схеми селекції:
- пропорційний відбір, коли число копій хромосоми пропорційно її
оптимальності. У наступне покоління можуть перейти хромосоми тільки з
оптимальністю вище середньої;
- відбір на основі «колеса рулетки». Чим вище оптимальність хромосоми, тим більше її сектор на колесі рулетки. При такому відборі члени популяції з більш високою пристосованістю з більшою ймовірністю будуть частіше вибиратися, ніж особини з низькою пристосованістю. Випадкова складова цього методу відбору дає шанс усім хромосомам потрапити в наступне покоління;
- турнірний відбір. Популяція випадково розбивається на групи з певною кількістю хромосом. Із кожної групи найкраща хромосома вибирається в наступне покоління. Сама «найгірша» хромосома популяції не має шансів потрапити в наступне покоління;
- відбір на основі ранжування (лінійного, рівномірного) членів популяції за їх  пристосованістю. На основі рангу хромосоми обчислюється ймовірність її попадання в наступну популяцію.
Для гарантованого потрапляння кращої хромосоми в наступне покоління використовується стратегія елітизму. Ідея елітного відбору, загалом, не нова, цей метод заснований на побудові нової популяції тільки з кращих особин репродукційної групи, що об'єднує в собі батьків, їх нащадків і мутантів. У літературі, присвяченій генетичним алгоритмам, елітному відбору відводять місце як досить слабкого з точки зору ефективності пошуку. В основному це пояснюють потенційною небезпекою передчасної збіжності, віддаючи перевагу пропорційному відбору. Але швидка збіжність, що забезпечується елітним відбором, може бути, коли це необхідно, з успіхом компенсовано відповідним методом вибору батьківських пар.
Другий метод, на якому хотілося б зупинитися, це відбір витісненням. Відбір, побудований на такому принципі, носить бікритеріальний характер - те, чи буде особина з репродукційної групи заноситися в популяцію нового покоління, визначається не тільки величиною її пристосованості, а й тим, чи є вже в сформованій популяції наступного покоління особина з аналогічним хромосомним набором. Із усіх особин з однаковими генотипами перевагу спочатку, звичайно ж, віддається тим, чия пристосованість вище. Таким чином, досягаються дві мети:
- по-перше, не втрачаються кращі знайдені рішення, які характеризуються різними хромосомними наборами,
- по-друге, в популяції постійно підтримується достатня генетична різноманітність.
Витіснення в даному випадку формує нову популяцію  скоріше з далеко розташованих особин, замість особин, що групуються близько поточного знайденого рішення. Цей метод особливо добре   показав себе  при вирішенні багатоекстремальних завдань, при цьому крім визначення глобальних екстремумів  мається можливість виділити і ті локальні максимуми, значення яких близькі до глобальних.
	

 

Рис.18.6. Формування початкової популяції в ГА
Оператор схрещування (crossover)  (кросинговер) призначений для обміну із заданою вірогідністю генетичним кодом між хромосомами-батьками, отриманими в результаті відбору, з метою генерації хромосом-нащадків для наступного покоління.
Зауважимо, що кросинговер може бути одноточковим (рис.18.7), двохточковим та багатоточковим.  При одноточковому кросовері перша частина першого батька поєднується з іншою частиною другого батька і навпаки. Випадковим чином обирається лише місце розриву хромосоми, ідентичне для обох батьків. В разі двоточкового кросоверу генеруються два випадкових місця розриву батьківських хромосом, після чого перший з нащадків отримує голову й хвіст від першого батька, а серединку – від другого, другий нащадок – навпаки. В цьому варіанті кросоверу до параметрів ГА додається мінімальна кількість бітів у кожному відрізку (хоча найчастіше вона дорівнює 1). Варіантів багатоточкового кросоверу існує достатньо багато, з них найпоширенішими є два наступні:
•	для кожного нового біту першого нащадка з рівною ймовірністю обирається ген першого або другого батька, відповідно другий нащадок отримує решту;
•	випадковим чином при кожному кросовері генеруються кількість розривів та біти, після яких вони здійснюються. Після цього непарні фрагменти першого батька дістаються першому нащадку, парні – другому, і навпаки.
Вибір батьківських пар теж може здійснюватися по-різному. Відомі наступні основні методи:
•	панміксія - батьки обираються з популяції випадковим чином, тому один батько може складати пару з самим собою, або брати участь в кількох парах;
•	селекція - обираються такі батьки, у яких значення функції пристосованості вище середнього значення по популяції;
•	інбридинг - перший батько  обирається  випадковим чином, а другим батьком з більшою ймовірністю є індивід популяції, найближчий до першого (зауважимо, що відстань може визначатись як між генотипами, так і між фенотипами);
•	аутбридинг - перший батько вибирається випадковим чином, а другим батьком з більшою ймовірністю є індивід популяції найвіддаленіший від першого (справедливе зауваження як і до інбридингу);
•	пропорційний - батьки вибираються з ймовірностями, пропорційними їх значенням функції пристосованості.
У залежності від реалізації функції відстані між індивідуумами інбридинг та аутбридинг можуть бути генотипними (вимірюється в Хемінговому просторі як кількість бітів, на які відрізняються хромосоми) або фенотипним (визначаються у дійсному чи цілочисельному просторі зазвичай за Евклідовою відстанню).
 
Рис.18.7. Схема одноточкового кросинговера в ГА

Точка розриву - ділянка між сусідніми бітами в рядку. Обидві батьківські структури розриваються на два сегменти по цій точці. Потім, відповідні сегменти різних батьків склеюються і виходять два генотипи нащадків.
 	Мутація (mutation) - стохастична зміна частини хромосом. Кожен ген рядки, яка піддається мутації, з імовірністю  (зазвичай дуже маленькою) змінюється на інший ген (рис.18.8).

 
 
Рис.18.8. Схема мутації в ГА
У випадку застосування оператора інверсії  відбувається    зміна порядку місцезнаходження частин хромосоми (наприклад, 1100→0011). Характеризується ймовірністю для кожного нового нащадка та довжиною частини, що інвертується (у загальному випадку може розподілятися за тим чи іншим законом).
Ефективність пошуку за допомогою ГА залежить від «настройки» співвідношення дослідження-використання:
- інтенсивність застосування кросинговеру визначає ступінь використання (деталізацію пошуку) знайдених підобластей пошукового простору;
- оператор мутації впливає на дослідження нових областей простору пошуку, дозволяє знизити ризик збіжності до локальних оптимумів;
- налаштування співвідношення ймовірностей застосування генетичних операторів кросинговеру і мутації дозволяє змінювати характер пошуку на випадковий, випадково-спрямований, направлено-випадковий, спрямований
Умови закінчення роботи ГА:
– досягнення заданого числа поколінь;
– зниження різноманітності популяції і її виродження в переважну більшість однакових за пристосованістю хромосом;
– зниження швидкості збіжності алгоритму (протягом певного числа поколінь якість рішень не змінюється);
– отримання рішення, що задовольняє користувача;
– досягнення ліміту витраченого на пошук часу, числа виконання визначених фрагментів алгоритму.
Як результат роботи ГА приймається хромосома останнього покоління, що має найкраще значення fitness-функції.
Переваги і недоліки генетичних алгоритмів. Однак, ГА не гарантує виявлення глобального рішення за прийнятний час. ГА не гарантують і того, що знайдене рішення буде оптимальним рішенням. Тим ні менш вони можуть бути застосовані для пошуку "досить хорошого" рішення задачі за "досить короткий час". ГА є різновидом алгоритмів пошуку і мають переваги перед іншими алгоритмами при дуже великих размірностях завдань і відсутності впорядкованості у вихідних даних, коли альтернативою їм є метод повного перебору варіантів. У випадках, коли завдання може бути вирішено спеціально розробленим для нього методом, практично завжди такі методи будуть ефективніше ГА як за швидкодією, так і за точністюі знайдених рішень. Головним же достоїнством ГА є те, що вони можуть застосовуватися для вирішення складних неформалізованих задач, для яких не розроблено спеціальних методів, тобто ГА забезпечують рішення проблем. Але навіть в тих випадках, для яких добре працюють існуючі методики, можна досягти цікавих результатів, поєднуючи їх з ГА.
Генетичне програмування (ГП) - розширення генетичного алгоритму для рішення оптимізаційних завдань в просторі комп'ютерних програм.
Мета ГП - автоматичний синтез програми для завдання з невідомим алгоритмом рішення, де:.
- немає відмінностей між простором пошуку і простором рішень;
- фенотип складається з набору функцій (арифметичні операції, математичні функції, логічні операції, умовні і циклічні оператори) і термінальних символів (змінні, числові або логічні константи);
- програма в ГП має ієрархічне уявлення, з обмеженою глибиною;
- fitness-функція в ГП кількісно оцінює якість роботи програми (точність рішення);
- схема роботи ГП збігається з ГА, але відрізняється реалізацією генетичних операторів;
- мета генетичних операторів в ГП - отримувати правильно працюючі алгоритмічні фрагменти.
Контрольні питання
1.Що таке еволюційне моделювання? 
2.	Які критерії ефективності при еволюційному моделюванні? 
3.	Для якого типу прогнозування (за тривалістю) використовується і є
ефективним еволюційне моделювання?
4. Що таке генетичний алгоритм?
5. Які основні спільні та відмінні властивості генетичних і "не генетичних" алгоритмів?
 	6. Основні поняття, принципи і передумови генетичних алгоритмів.
7. Приклад роботи класичного генетичного алгоритму.
8. Переваги та недоліки генетичних алгоритмів.






Тема 19.   Інтелектуальний аналіз даних
Вперше поняття інтелектуального аналізу даних прозвучало в 1978 році. Спочатку його в основному застосовували для завдань обробки та аналізу даних в межах прикладної статистики. Також при цьому вирішувалися завдання обробки невеликих баз даних. В подальшому основним завданням інтелектуального аналізу даних став пошук прихованих знань у великих базах даних. Інтелектуальний аналіз даних можна вважати міждисциплінарним напрямком, адже він охоплює такі галузі комп'ютерних наук як генетичні алгоритми, теорію нейронних мереж та еволюційне програмування. Методами інтелектуального аналізу даних також є і різні методи статистики: - кореляційний аналіз; - регресійний аналіз; - дисперсійний аналіз; - факторний аналіз; - і т.д. Важливу роль відіграють також методи машинного навчання та візуалізації результатів. Так як після застосування інтелектуального аналізу даних можуть з’являтися не тільки корисні результати, а й хибні, то в такому випадку можна користуватися методами машинного навчання. За визначенням, машинне навчання - це наука, що вивчає комп'ютерні алгоритми, які автоматично покращуються під час роботи. Візуалізація використовується для наочного представлення виявлених закономірностей. Застосування візуалізації дозволяє створити 13 графічний образ аналізованих даних, а сам образ допомагає побачити в процесі аналізу аномалії, структури і тренди. Для вирішення завдання візуалізації використовуються графічні методи, що показують наявність закономірностей в даних. Візуалізацію також можна розглядати як самостійний метод аналізу, що називається Visual Mining. В процесі інтелектуального аналізу даних проводиться дослідження безлічі об'єктів. У більшості випадків його можна представити у вигляді таблиці, кожен рядок якої відповідає одному з варіантів, а в стовпці розміщені значення параметрів, що його характеризують. Залежна змінна - параметр, значення якого розглядається як залежне від інших параметрів. Власне, цю залежність і необхідно визначити, використовуючи методи інтелектуального аналізу даних. Використання інтелектуального аналізу даних може включати два або три етапи:
 - Виявлення закономірностей. На цьому етапі проводиться дослідження набору даних з метою пошуку прихованих закономірностей. Попередні гіпотези щодо виду закономірностей на даному етапі ще не формуються. На цьому етапі повинна здійснюватися перевірка достовірності знайдених закономірностей з використанням даних, що не брали участь в їх формуванні (мається на увазі контрольна вибірка). Результат перевірки при цьому повинен співпасти з попереднім результатом. Такий поділ даних на навчальну множину та множину, що перевіряється, часто використовують в методах нейронних мереж.
 - Використання виявлених закономірностей для передбачення невідомих значень (прогнозоване моделювання). В випадку прогнозованого моделювання використовуються результати роботи першого етапу. 
 
 - Аналіз винятків. Призначення даного етапу - виявлення і пояснення аномалій, що були попередньо знайдені в закономірностях. Можливо два варіанти: - Існує деяке логічне пояснення, яке також можна оформити у вигляді правила. - Відхилення трактується як помилка вихідних даних. В цьому випадку етап аналізу винятків можна використовувати для очищення даних. Розглянемо декілька відомих класифікацій методів інтелектуального аналізу даних за різними ознаками. Всі методи інтелектуального аналізу даних можна розділити на дві великі групи за принципом роботи з вихідними навчальними даними. У цій класифікації верхній рівень визначається на підставі того, чи зберігаються дані після інтелектуального аналізу даних або вони дистилюються для подальшого використання. Відповідно маємо дві групи: 
1. Безпосереднє використання даних, або збереження даних. У цьому випадку вихідні дані зберігаються в явному детальному вигляді і безпосередньо використовуються на стадіях 15 прогнозованого моделювання та/або аналізу винятків. Недолік цієї групи методів в тому, що при їх використанні можуть виникнути складності аналізу надвеликих баз даних. Методи цієї групи: - кластерний аналіз; - міркування за аналогією; - метод найближчого сусіда; - метод k-найближчого сусіда. 
2. Виявлення і використання формалізованих закономірностей, або дистиляція шаблонів. За умови використання технології дистиляції шаблонів один зразок (шаблон) інформації витягується з вихідних даних і перетворюється в певні формальні конструкції, вид яких залежить від методу інтелектуального аналізу даних, що використовується. Цей процес виконується на стадії вільного пошуку, у першій же групі методів дана стадія в принципі відсутня. На стадіях прогнозованого моделювання та аналізу винятків використовуються результати стадії вільного пошуку, вони значно компактніше самих баз даних. Конструкції цих моделей можуть трактуватися аналітиком або ні ( "чорні ящики"). Методи цієї групи: - логічні методи; - методи кростабуляціі; - методи візуалізації; - методи, засновані на рівняннях. Логічні методи, або методи логічної індукції, включають: - нечіткі запити і аналізи; - дерева рішень; - символьні правила; - генетичні алгоритми. Методи цієї групи, мабуть, найбільше інтерпретуються, адже вони оформляють знайдені закономірності в досить прозорому вигляді з точки зору користувача. Отримані правила можуть включати безперервні і дискретні змінні. Слід зауважити, що дерева рішень можуть бути легко перетворені в набори символьних правил шляхом генерації одного правила по шляху від кореня дерева до його термінальної вершини. Дерева рішень і правила фактично є різними способами вирішення однієї задачі і відрізняються лише за своїми можливостями.  
В основу технології інтелектуального аналізу даних покладена концепція шаблонів, що представляють собою закономірності. В результаті виявлення цих закономірностей вирішуються завдання інтелектуального аналізу даних. Завдання інтелектуального аналізу даних в залежності від способу їх вирішення можна розділити на два класи: 
 - навчання з учителем; 
- навчання без вчителя. 
У першому випадку потрібен навчальний набір даних, на якому створюється і навчається модель інтелектуального аналізу даних. В подальшому готова модель тестується і згодом використовується для передбачення значень в нових наборах даних. У другому випадку мета завдань полягає у виявленні закономірностей, що наявні в існуючому наборі даних. Варто зауважити, що при цьому навчальна вибірка не потрібна. В якості прикладу можна навести завдання аналізу споживчого кошика, коли в ході дослідження виявляються товари, що покупці найчастіше купують разом. До цього ж класу належить задача кластеризації. Якщо говорити про класифікацію завдань інтелектуального аналізу даних за призначенням, то відповідно до неї, вони діляться на: - описові; - передбачливі. Мета вирішення описових завдань - краще зрозуміти дані, що досліджуються, виявити наявні в них закономірності, навіть якщо в інших наборах даних вони не зустрічатимуться. Для передбачливих завдань характерним є те, що в ході їх вирішення на підставі набору даних з відомими результатами будується модель для передбачення нових значень. Основними завданнями інтелектуального аналізу даних є: - класифікація; - регресія; - кластеризація; - пошук асоціативних правил; - пошук послідовності; - прогнозування.  
 Сучасний рівень розвитку апаратних і програмних засобів з деяких пір уможливив повсюдне ведення баз даних оперативної інформації на всіх рівнях управління. В процесі своєї діяльності промислові підприємства, корпорації, органи державної влади і управління накопичили великі обсяги різнорідних даних. Ці дані зберігають у собі великі потенційні можливості по вилученню корисної аналітичної інформації, на основі якої можна виявляти приховані тенденції, будувати стратегію розвитку, знаходити нові рішення.
В останні роки використовуються наступні концепції накопичення і аналізу даних:
• сховища даних (англ . Data Warehouse);
• оперативна аналітична обробка даних (англ . On-Line
Analytical Processing, OLAP);
• інтелектуальний аналіз даних (англ . Data Mining).
Метою побудови сховища даних є інтеграція, актуалізація і узгодження оперативних даних з різнорідних джерел для формування єдиного несуперечливого погляду на об'єкт управління в цілому.
Завданнями оперативної аналітичної обробки даних є узагальнення, агрегація, багатовимірний аналіз і гіперкубічне уявлення інформації, зібраної в сховище даних.
Інтелектуальний аналіз даних - це процес підтримки прийняття рішень, заснований на пошуку в даних схованих закономірностей.
 Системи обробки даних розділяються на два класи:
• системи, орієнтовані на трансакційну обробку даних (СОД);
• системи, орієнтовані на аналітичну обробку даних
- системи підтримки прийняття рішень (СППР).
СОД призначені для розв'язання добре структурованих задач, за якими є вхідні дані, відомі алгоритми, що ведуть до вирішення завдань. Система працює з мінімальною участю людини. Основними функціями СОД є збір даних і перенесення їх на машинні носії, передача в місця зберігання і обробки, зберігання, обробка інформації за стандартними алгоритмами, висновок та подання інформації користувачу у вигляді регламентних форм.
СППР використовуються для вирішення в режимі діалогу погано структурованих задач, для яких характерною є неповнота вхідних даних, часткова ясність цілей і обмежень. Участь людини в роботі системи велика, він може втручатися в хід рішення, модифікувати вхідні дані, процедури обробки, цілі та обмеження завдання, вибирати стратегії оцінки варіантів рішень. СППР використовується на рівні стратегічного планування, оперативного і управлінського контролю.
За допомогою сучасних методів інтелектуального аналізу даних можна вирішуються наступні категорії задач:
1. Завдання класифікації. Використання методів дозволяє виявити ознаки, що характеризують однотипні групи об'єктів - класи,  для того щоб за відомими значеннями цих характеристик можна було віднести новий об'єкт до того чи іншого класу. Методами вирішення завдання класифікації є: метод к-середніх, Байесові мережі, дерева рішень, нейронні мережі.
2. Завдання кластеризації. Логічно продовжують ідею класифікації на більш складний випадок, коли самі класи заздалегідь не визначені. Результатом використання методів, що виконують кластеризацію, є  визначення тих властивих досліджуваним даними ознак, які розбивають їх на групи. Такі групи даних називаються кластерами. Об'єкти даних усередині кластерів "схожі" один на одного і "відрізняються" від об'єктів даних інших кластерів. Методами вирішення завдання кластеризації є нейронні мережі, що навчаються без вчителя – самоорганізовані карти Кохонена (СОКК).
Самонавчальні інтелектуальні системи засновані на методах автоматичної класифікації ситуацій з реальної практики, або на методах навчання на прикладах. Приклади реальних ситуацій складають так звану навчальну вибірку, яка формується протягом певного історичного періоду. Елементи навчальної вибірки описуються множиною класифікаційних ознак.
Стратегія "навчання з учителем" передбачає завдання фахівцем для кожного прикладу значень ознак, що показують його належність до певного класу ситуацій. При навчанні "без учителя "система повинна самостійно виділяти класи ситуацій за ступенем близькості значень класифікаційних ознак.
В процесі навчання проводиться автоматична побудова узагальнюючих правил або функцій, що описують належність ситуацій до класів, якими система згодом буде користуватися при інтерпретації незнайомих ситуацій. З узагальнюючих правил, в свою чергу, автоматично формується база знань, яка періодично коригується в міру накопичення інформації про аналізовані ситуації.
У загальному випадку, основна міць апарату штучних нейронних мереж ґрунтується, по-перше, на розпаралелювання обробки інформації, а по-друге, на здатності в отриманні обґрунтованого результату на підставі даних, які не зустрічалися в процесі навчання. Нейронні мережі працюють з неповними даними, тобто даними, в яких пропущені значення деяких класифікаційних ознак. Кількість обчислювальних операцій в них зростає лінійно зі збільшенням обсягу даних, що аналізуються. Нейронні мережі не чутливі до розмірності аналізованих даних.
Самоорганізаційна карта Кохонена (англ. Self-organizing map — SOM) —нейронна мережа з некерованим навчанням, яка використовується для конструювання багатовимірного простору в простір з нижчою розмірністю (найчастіше, двовимірний). Створює дискретне представлення вхідних просторів навчальних вибірок, які називаються картою (англ. map), і тому використання цього типу нейронної мережі є методом для зниження розмірності. Самоорганізовані карти відрізняються від інших штучних нейронних мереж, оскільки вони застосовують конкурентне навчання, яке є протилежним до навчання з виправленням помилок (наприклад, метод зворотного поширення помилки з градієнтним спуском), і в тому сенсі, що вони використовують функцію сусідства для збереження топологічних властивостей вхідного простору.
 Самоорганізовані карти Кохонена (мережі Кохонена, СОКК) – це штучні нейронні мережі, відмітною особливістю яких є автоматичний, некерований процес роботи з даними, що називається навчанням. При навчанні СОКК вчиться розуміти саму структуру даних, дає можливість користувачеві розпізнати кластери в даних. Якщо після навчання мережа зустрінеться зі спостереженнями, несхожими ні на один з відомих їй зразків, то вона не зможе класифікувати такий набір і тим самим виявить його новизну, тобто новий кластер даних.
СОКК - це нейронна мережа без зворотних зв'язків, в якій використовується алгоритм навчання без вчителя. За допомогою процесу, іменованого самоорганізацією, СОКК утворює топологічне представлення вхідних даних, що аналізуються з нейронів, одержуваних на виході.
СОКК можна навчити дізнаватися або знаходити взаємозв'язки між входами і виходами або організовувати дані таким чином, щоб виявляти в них раніше невідомі образи або структури.
Метод навчання СОКК не припускає зовнішнього втручання. В нейромережевих методах, які передбачають навчання з учителем, для знаходження образу або співвідношення між вхідними даними потрібно, щоб один або більше виходів були точно задані разом з одним або більше входами. СОКК, навпаки, відображає дані більшої розмірності  на карті меншої розмірності, що складається з решітки нейронів.
Алгоритм самоорганізації Кохонена грунтується на змагальному навчанні без учителя. Він забезпечує зберігання топології відображення з простору великої розмірності в нейрони карти, які зазвичай утворюють двовимірну решітку. Таким чином, це відображення є відображенням простору великої розмірності на площину. Властивість збереження топології означає, що СОКК розподіляє подібні вектори вхідних даних по нейронам, тобто точки, розміщені в просторі входів близько один до одного, відображаються на близько розміщжені нейрони мережі. Таким чином, СОКК може служити як засобом кластеризації, так і засобом візуального представлення даних великої розмірності.
У своєму класичному варіанті СОКК має всього два прошарки: вхідний шар, що містить нейрони для кожного вектора вхідного простору аналізованих даних, і вихідний шар нейронів, пов'язаних з усіма нейронами вхідного шару (рис.19 1) за допомогою вагових векторів. Вихідний шар називається також шаром топографічної карти. Нейрони топографічної карти розташовуються, як правило, в двовимірному просторі.

 

Рис. 19.1. Класична модель мережі Кохонена
Число нейронів в топографічній карті визначається користувачем на підставі початкової форми або розміру карти, яку він хоче отримати. Нейрони в карті пов'язані так званими латеральними зв'язками (по аналогії з біологічними зв'язками між нейронами в головному мозку).
Чим далі нейрони розташовані один від одного, тим менше цей зв'язок.
Коли вхідний вектор подається в мережу, нейрони вихідного шару змагаються один з одним за право бути переможцем. Переможцем стає той вихідний нейрон, ваги зв'язків якого виявляються найближчими до вхідного образу в сенсі евклідової відстані. Після того як вхідний вектор пред'явлений мережі, кожен нейрон прагне досягти найбільшої з ним відповідності. Вихідний нейрон, найближчий до вхідного образу, визнається переможцем. Вагові вектори нейрона-переможця потім коригуються, тобто зсуваються в напрямку вхідного вектора з допомогою множника, який визначається коефіцієнтом навчання. В цьому і полягає сутність змагальних нейронних мереж. Коли СОКК здійснює топологічне відображення, відбувається регулювання не тільки ваги нейрона-переможця, але також ваг суміжних вихідних нейронів, найближчих сусідів переможця. ціла околиця вихідних нейронів стає зрушеною ближче до вхідного образу. Коли процес починається з випадкових значень ваг, вихідні нейрони повільно вирівнюються, оскільки при пред'явленні вхідного образу на нього реагує не тільки окремий нейрон, але також і його околиці. У міру того як навчання триває, розмір цієї околиці навколо нейрона-переможця поступово зменшується. В кінці навчання коригуються тільки ваги нейрона-переможця.
Результатом є ваги зв'язків між вхідними векторами і вихідними нейронами, кожному з яких відповідає типовий вхідний образ для деякого підмножини вхідних даних, яке потрапляє в окремий кластер. Процес стиснення даних великої розмірності до деякого набору кластерів називається сегментацією. початковий простір великої розмірності стискається в двовимірну карту. Індекс вихідного нейрона-переможця, по суті, розділяє вхідні образи на множину категорій або кластерів.СОКК також мають здатність до узагальнення. Це означає, що подібні нейронні мережі можуть дізнаватися або характеризувати вхідні дані, з якими вони ніколи раніше не мали справу. Новий вектор вхідних даних співвідноситься з тим елементом карти, на який він відображається. Більш того, для пошуку або прогнозування значень пропущених даних на основі використання раніше навченої карти вони можуть використовувати навіть вхідні вектори з відсутніми (пропущеними) даними.
Ітераційний алгоритм навчання СОКК. Вихідний ітераційний алгоритм СОКК визначає рекурсивний процес спеціального виду, в якому на кожному кроці здійснюється обробка тільки частини нейронів.
Нехай в евклідовому просторі Rm з системою координат  (x1   ..., хm), де m - розмірність простору, задана фізична область X, на якій визначено набір вхідних векторів, який позначається ХK = {х1, х2, ..., хK :}, де К - кількість вхідних векторів,   ,    
 
Рис.19.2. (а) – обчислювальна область U  із зафіксованою сіткою UN,
                                   (б)  – фізична область X із простором вхідних даних XK
  Нехай U - це обчислювальна область в просторі R2 з системою координат (u1, і2), на якій задана мережа вузлів (нейронів) UN = {u1, ..., uN}, де N - кількість нейронів мережі,   ,   . Нейрони в мережі пов'язані між собою зв'язком, який називається латеральним.
 Алгоритм СОКК визначає відображення простору     на
  , яке переводить набор вхідних векторів ХK  на двумірну сітку нейронів UN (рис. 19.2).
Кожному нейрону  uj ставиться у відповідність параметричний вектор,
який називають ваговим вектором  , де  ,
j = l,..,,N. На   стадії ініціалізації мережі усім ваговим векторам присвоюються невеликі випадкові значення.
Для навчання СОКК із ХK   вибирають підмножину   навчаючих векторів, яка, також, може  співпадати із  ХK . За допомогою вагового вектора wj - кожний нейрон з’єднаний  зі усіма  вхідними векторами із Р (рис.19. 3).


 
Рис. 19.3.  Масив вузлів (нейронів) в двомірній решітці UN  СОКК

При цьому вхідні навчаючі вектори хp нормалізують. При нормалізованих вхідних векторах, вектори вагів wj, що прагнуть до них, нормалізуються автоматично.  
Після того, як підготовлена структура нейронної мережі, починається процес переміщення нейронів в вхідному просторі Rm по наступному алгоритму.
1. Із навчаючої множини Р вхідних даних випадковим чином вибирається елемент, який буде  вхідним вектором х для СОКК.
2. В нейронній мережі  вибирають нейрон, що переміг в конкурентній боротьбі завдяки тому, що його вектор вагів в найменшій степені відрізняється від відповідних компонентів вектора х. Для такого w-го нейрона-переможця повинно виконуватись відношення:
                                                                             (19.1)                                                                                                         
 
Такий спосіб визначення нейрона-переможця є алгоритмом, який називається "переможець забирає все" (англ.: Winner Takes All, WTA).
Частіше всього  в якості міри  відстані використовується евклідова міра:
                                         (19.2)


 
Іншими мірами вілстані є:
 	• скалярний добуток:
                                           (19.3)

• міра відносно норми L1 (Манхетен):
 
                                                                   (19.4)
• міра відносно норми  Lx :
                                                               (19.5)
 
 	3. В оточенні  нейрона-переможця утворюється топологічна область сусідства

                                                                                            (19.6)
шо складається із нейронів-сусідів (рис.19. 4). Розміри цієї області з часом навчання зменшуються, тобто із кожної ітерації навчання в цю область попадає все менша кількість нейронів-сусідів.

 

Рис.19. 4. Топологічна область сусідства для нейрона-переможця

4. Нейрон-переможець і  усі нейрони, що розміщені  в межах його Sw(t) області, піддаються адаптації, під час якої їх вагові вектори змінюються в напрямку вектора х за правилом Кохонена:
                                                           (19.7)
В формулі (19.7) параметр   означає коефіцієнт навчання      ui  - го нейрона з околиці Sw(t) в t-й момент часу. При цьому t  [0;Т], де Т- кількість епох (ітерацій) навчання. Ваги нейронів, які знаходяться за межами Sw(t), за  правилом (19.7) не змінюються.
Епоха навчання - це один проход нейронной мережі  по всій навчаючій множині Р вхідних векторів. Кількість епох навчання задається за допомогою параметра Т перед початком процеса навчання.
Коефіцієнт навчання    - це функція, яка приймає значення із проміжку [0;1) і зменьшуєтся із збільшенням відстані між ui -м нейроном-сусідом и uw -м нейроном-переможцем в просторі решітки мережі   . Звичайно вона задається у вигляді добутка двох функцій:
                                                                                   (19.8)
де           - функції швидкості навчання,        - функції сусідства.
Функція швидкості навчання      встановлюється однаковою для
всіх нейронів і монотонно убуває з часом навчання t мережі. Вона може бути лінійною, експоненціальною чи обернено пропорціональною часу  t.  
Для функції сусідства в класичному алгоритмі Кохонена має місце таке співвідношення, яке називається сусідством прямокутного типа:
                                                  (19.9)
де   - евклідова відстань між векторами вагів   - го  нейрона-
переможця і   - го  нейрона мережі,   - радіус сусідства - ще одна
лінейно монотонно  спадна функція часу, яка задає розмір  топологічної околиці Sw(t):
                                                                    (19.10)

 	де   - початковий радіус навчання мережі, який задається користувачем перед навчанням.
 	Область сусідства Sw нейрона-переможця uw визначається як множина
нейронів иi , сусідніх з нейроном-переможцем в решітці:
                                    (19.11)
На рис. 14.5 показано декілька прикладів областей сусідства різних
радіусів  

 

Рис.19 5. Області сусідства нейрона-переможця різних радіусів

5. Алгоритм навчання СОКК повторується, повертаючись до вибору наступного випадкового вхідного вектора із навчаючої множини Р.  Кількість повторів алгоритма дорівнює кількості епох навчання Т.
 	В процесі навчання СОКК вагові вектори нейронів налаштовуються таким чином, щоб нейрони розташовувалися в місцях локальних згущень вхідних даних, тобто описували кластерну структуру хмари даних. В цей же час зв'язки між нейронами відповідають відносинам сусідства між відповідними кластерами у вхідному просторі.
Після навчання нейронна мережа здатна класифікувати поданий їй на вхід випробуваний вектор, знаходячи найближчий до нього нейрон-переможець і, тим самим, визначаючи кластер, до якого цей нейрон-переможець належить. Всі кластери нейронної мережі маркуються змістовними за сенсом мітками. Якщо ж кластер знайти не вдається, то це означає, що мережа не прийняла ніякого рішення і   вхідний  вектор, що подавався, належить новому, раніше не пізнаному кластеру. Таким чином, відбувається пошук нових знань в аналізованих даних.
Після того, як мережа навчена розпізнаванню структури даних, її можна використовувати як засіб візуалізації при аналізі даних. Можна обробляти окремі спостереження і виявляти, як при цьому змінюється топологічна карта. Це дозволяє зрозуміти, чи мають кластери якийсь змістовний сенс (як правило, при цьому доводиться повертатися до змістовного сенсу завдання, щоб встановити, як співвідносяться один з одним кластери аналізованих даних).
 	Побудова візуальних топографічних карт для СОКК. Алгоритм самоорганізації Кохонена забезпечує зберігання топології відображення з простору великої розмірності в нейрони мережі, які зазвичай утворюють двовимірну решітку. Таким чином, це відображення є відображенням простору великої розмірності на площину. Властивість збереження топології означає, що СОКК розподіляє подібні вектори вхідних даних по нейронам, тобто точки, розміщені в просторі входів близько один до одного, відображаються на близько розміщені нейрони мережі. Завдяки цьому, СОКК може служити як засобом кластеризації, так і засобом візуального представлення даних великої розмірності.
 	Нижче перераховані основні способи побудови візуальних топографічних карт навчених самоорганізованих нейронних мереж Кохонена.
1. Розфарбовування ділянок карти в різні кольори за допомогою кольорової палітри або відтінків сірого кольору. При цьому колір кожної ділянки відображає середню відстань між ваговим вектором нейрона, якій відповідає розфарбована ділянка карти, і векторами ваг найближчих сусідів цього нейрона. Таке відображення називається U- матрицею. Якщо середня відстань між сусідніми ваговими векторами мала, то використовуються, наприклад, сині відтінки кольору, і навпаки, великі відстані між векторами відображаються відтінками червоного кольору (рис.19. 6).
 __

 

Рис 19.6. Карта СОКК, побудована за технологією U-матриці

2. Ділянки карт також можуть маркуватися. Якщо у вхідному наборі даних є вектори з присвоєними їм мітками, то ці мітки ставляться на ділянку карти, нейрон якого знаходиться найближче до такого вхідного вектора (рис. 19.7).
 
Рис. 19.7. Карта СОКК. Ділянках карти присвоєні маркери вхідних векторів,
яким вони відповідають

3. Розфарбовування ділянок карт за значенням якого-небудь ознаки або компоненти вагових векторів (рис.19.8). При цьому колір кожної ділянки відображає значення цієї ознаки або компоненти. Низьким значенням ознаки відповідають сині кольори, а високим значенням - червоні кольори. При цьому під картою відображається кольорова градієнтна шкала, на якій проставлені числові значення для кожного кольору карти.
 

Рис. 19.8. Карта СОКК, побудована за значенням якої-небудь ознаки
або компоненти

 4. Відображення на кожній ділянці карти квадрата, розмір якого пропорційний числу точок даних, найближчих з точки зору вагових векторів до нейрона, який відображається на даній ділянці. Квадрат розфарбовується в колір, який відповідає значенню відображеної компоненти вагового вектора. Такий спосіб відображення називається діаграмою Хінтона (рис.19. 9).



 
Рис.19.9. Карта СОКК, побудована як діаграма Хінтона

Слід ще раз підкреслити, що СОКК виконує топологічне відображення багатовимірного простору вхідних даних на плоску карту. Це означає, що близьким елементам вхідного простору відповідає один і той же або близькі нейрони на карті.
Таким чином, вивчаючи розмальовки карт компонент і кластерів, можна виявляти закономірності, якими володіють аналізовані дані, а також класи (кластери), на які ці дані поділяються. Більш того, отримавши набір карт для декількох серій аналізованих даних, виконується аналіз тенденцій пересування даних між кластерами.
Контрольні питання
 1. Які задачі розв’язуються при класифікації та кластеризації даних?
 2.  Основні відмінності навчання нейронних мереж “з учителем” та“без учителя”.
 3. Побудова саморганізованої карти Кохонена.
 4. Охарактеризуйте алгоритм роботи СОКК.
 5.Як виконується ітераційний алгоритм навчання СОКК?
 6. Яким чином зафарбовуються карти Кохонена?

Тема 20.   Багатоагентні технології в інтелектуальних системах
 Розвиток інформаційних технологій і пошук ефективних методів управління привели до появи нових управлінських парадигм, однією з яких є « мережевоцентричне управління». Це поняття в даний час знаходить широке висвітлення в наукових виданнях і активно впроваджується в практику вирішення завдань управління в різних областях діяльності (військової, фінансової, виробничої, проектної та ін.). Разом з тим до цього часу відсутній загальний погляд на дане поняття. У зв'язку з цим виникає потреба у формуванні єдиного погляду на поняття «мережевоцентричного управління» зокрема, і «мережецентризм» в цілому. Необхідно привести систему понять різних експертів і фахівців в єдину інтегровану понятійну систему.
 З перехресного аналізу відкритих джерел інформації випливає, що в  інформаційно-керуючих системах, гетерогенних за своєю суттю, намагаються ефективно пов'язати: різні формати і типи циркулюючих даних; різнорідні джерела інформації; різні способи первинної, вторинної та третинної обробки інформації; різнорідних споживачів.
Мережевоцентрична парадигма реалізується через базовий функціонал матричних інформаційно-керуючих систем, який включає в себе такі основні складові: формування єдиного координатно-часового поля і прив'язка до нього всіх елементів системи, інформаційних агентів, подій, і власне даних; збір та інтеграція різнорідної інформації (в єдиному координатно-часовому полі), отриманої від розрізнених джерел з перехресним уточненням і додаванням; аналіз і прогноз розвитку обстановки на стратегічному, тактичному і операційному рівнях; формування єдиного інформаційно-керуючого поля; формування середовища підтримки прийняття рішень; трансляція і доведення інформації і керуючих команд до споживачів і виконавців; документування всіх подій і керуючих команд.
Відмінною рисою мережевоцентричних інформаційно-керуючих систем спеціального призначення є їх глобальність - як в просторовому, так і у функціональному плані. Вони  функціонують в режимі реального часу, в асинхронному (подієвому) режимі роботи.
Виходячи з вищевикладеного, можна зробити висновок, що система мережевоцентричного управління являє собою поєднання завчасно створених і розгорнутих розгалужених автоматизованних електронних мереж збору та первинної обробки інформації, вузлів зберігання і аналізу інформації, а також контурів управління і приняття рішень, які сукупними зусиллями створюють єдиний інформаційно-управлінський простір, що охоплює весь спектр задач управління.
Електронні мережі розгортаються в вузлах і органах збору / обробки, аналізу, оцінки, дисиміляції інформації про зовнішній світ, на всіх рівнях органів державного управління та регулювання. Електронні мережі сполучаються і зв'язуються в єдиний інформаційно-управлінський комплекс, що забезпечує безперервне оперативне управління наявними силами і засобами по вертикалі і горизонталі на просторі управління.
Сукупними зусиллями всіх елементів комплекс створює єдине «інформаційно-управлінське поле » (простір), яке безперервно підтримується в робочому стані, самосинхронізується, оновлюється інформацією знизу і зверху, доступно для всіх рівнів управління по вертикалі і горизонталі, і захищене від несанкціонованого проникнення і впливу.
Говорячи про управління, необхідно, в першу чергу, визначити об'єкт, яким необхідно управляти. Таким об'єктом управління є розподілена система. Розподілена система - сукупність автономних, оснащених компьютерним інтелектом об'єктів, об'єднаних загальною глобальною мережею і здатних діяти як самостійно, так і в групі для виконання загальної цільової функції.
На підставі усього вищевикладеного, пропонується дати наступне визначення терміна «мережевоцентрична система управління». Мережевоцентрична система управління - система управління розподіленою системою, що характеризується принципами відкритості, самоорганізації, слабкою ієрархії в контурі прийняття рішень і здатністю породжувати цілі всередині себе.
 Останнім часом термін «мережевоцентричний» все частіше використовується в різних сферах діяльності, пов'язаних з використанням мережевих комп'ютерних технологій. Однак розуміння того, що ж саме вкладається в це поняття, істотно розрізняється. Одна з часто використовуваних трактувань поняття мережевоцентризму полягає в використанні мережевих технологій для отримання максимально повної інформації (заповнення баз даних) і її подальшого використання в системах підтримки прийняття. Таке уявлення  недостатньо повно відображає сутність даного поняття. Ще більш складним завданням є визначення терміна «мережевоцентричне управління». Навіть серед фахівців, до сих пір немає єдиного і чіткого розуміння сутності даного терміна і означеного їм поняття.  Вперше термін «мережевоцентричний» (NetworkCentric) був використаний віце-адміралом ВМС США Артуром Себровскі і Джоном Гарстка в опублікованій ними в журналі "Proceedings" в січні 1998 року статті "мережевоцентрична війна: її походження".  У концептуально-теоретичному плані Себровскі і Гарстка представили модель мережевоцентричної війни як систему,  основу якої складає інформаційна решітка, на яку накладаються  сенсорна і бойова решітки.  Концепція мережевоцентричної війни є не новий тип війни , а новий підхід до організації та ведення бойових дій, де в центрі уваги виявляється мережа. Причому найбільш важливим аспектом є принципи її організації і, багато в чому, самоорганізаціі. 
Кажучи про управління, необхідно, в першу чергу, визначити об'єкт, яким ми хочемо управляти. З нашої точки зору, об'єктом управління є розподілена система. Термін розподілена система відомий давно і застосовується в різних областях. Зокрема, Таненбаум  визначає розподілену систему як набір незалежних комп'ютерів, що представляються їх користувачам єдиною об'єднаною системою. При цьому вказуються найбільш важливі характеристики таких систем: 
• від користувачів приховані відмінності між комп'ютерами і способи зв'язку між ними; 
• користувачі і додатки однообразно працюють в розподілених системах, незалежно від того, де і коли відбувається їх взаємодія; 
• вони повинні відносно легко піддаватися розширенню або масштабування; 
• розподілені системи зазвичай існують постійно, однак деякі іх частини можуть тимчасово виходити з ладу. Користувачі і додатки не повинні увідомлятися про те, що ці частини замінені або полагоджені або що додані нові частини для підтримки додаткових користувачів або додатків. Розширюючи дане визначення, можна визначити розподілену систему наступним чином. 
Розподілена система - сукупність автономних, оснащених комп'ютерним інтелектом об'єктів, об'єднаних загальною глобальною мережею і здатних діяти як самостійно, так і в групі для виконання загальної цільової функції
 Останнім часом в світі ведуться активні обговорення так званих мережевоцентричних інформаційно-керуючих систем спеціального призначення. Аналіз відкритих джерел інформації показує, що якщо на ранніх етапах це були в основному прожекти і ескізні проекти, то поточна ситуація дещо змінилася. Від дослідження питань, пов'язаних з принциповою товарністю цих систем, і промальовуванням їх можливих архітектур і принципів функціонування, розробники плавно переходять до детального опрацювання питань, пов'язаних з технічними та організаційними завданнями розгортання, експлуатації та застосування. Тобто починається фаза технічного проектування. Зустрічаються вже і окремі реалізації «в залізі», які відтворюють окремі ланки, фрагменти повноцінних глобальних систем. Звичайно, достатню увагу при цьому приділяється науково-теоретичному обгрунтуванню закладених принципів, застосовуваних рішень, завданням алгоритмізації і інтелектуалізації систем.
На шляху створення повномасштабних систем є ряд труднощів, як технічного, технологічного, організаційного та економічного характеру, так і ряд проблем носять принциповий характер. Все це разом, не дозволяє в даний час визнати подібні системи фактом, що відбувся, а й відмахнутися від мережевоцентричної парадигми побудови інформаційно-керуючих систем спеціального призначення, як від фантастичної ідеї окремих груп футурологів - вже теж не можна.  
З перехресного аналізу відкритих джерел інформації випливає, що тенденція розвитку мережевоцентричної парадигми має цілком певний вектор - це матричні інформаційно-керуючі системи (ІКС), в основі яких лежить так звана «Глобальна інформаційна решітка» (ГІР, GIG - global information grid). Під цим поняттям розуміється не тільки вертикальна інтеграція між джерелами інформації, вузлами прийняття рішення і виконавчими органами, а й широкий розвиток горизонтальних зв'язків між різнорідними постачальниками,  споживачами циркулюючої в ІКС інформації. У цих інформаційно-керуючих системах, гетерогенних за своєю суттю, намагаються ефективно пов'язати:
різні формати і типи циркулюючих даних;
різнорідні джерела інформації;
різні способи первинної, вторинної та третинної обробки інформації;
різнорідних споживачів.
 Відмінною рисою мережевоцентричних інформаційно-керуючих систем спеціального призначення є їх глобальність - як в просторовому, так і в функціональному плані. Вони функціонують в режимі реального часу, в асинхронному (подієвому) режимі роботи. Мережевоцентричні  ІКС спочатку проектуються стійкими до глибоких часткових відмов вузлів мережі і ліній зв'язку, з високим ступенем захисту від несанкціонованого доступу. Ще одна риса подібних систем (реалізація якої в повній мірі наштовхується на проблеми штучного інтелекту) - це обов'язкове впровадження в контур обробки інформації перехресного аналізу даних з метою підвищення достовірності циркулюючої в мережі інформації і заповнення «білих плям». Вельми сильна також прогностична складова в контурі обробки і прийняття рішень.
Серед центральних проблем реалізації мережевоцентричних інформаційно-керуючих систем спеціального призначення особливе місце займають два кола питань, які потребують вирішення.
По-перше, це проблема людино-машинних інтерфейсів, де з одного боку дуже висока гетерогенність технічних платформ, з іншого - досить різний рівень підготовки (і різна спеціалізація) осіб, що приймають рішення, операторів, споживачів і джерел інформації. У зв'язку з цим, з новою силою проявляється дослідницький інтерес до проблем людино-машинних інтерфейсів; гібридних людино-машинних систем, психології людини-оператора.
По-друге, це проблема впровадження штучного інтелекту в контур обробки інформації та оптимальна побудова структури системи в цілому. Наукові дослідження тут зосереджені в області розподілених слабкоієрархічних (з активними проміжними шарами) систем прийняття рішення. Активно розвиваються методи математичного моделювання слабкоформалізованих явищ і процесів, ідентифікації слабкоспостережуваних об'єктів. І звичайно ж, на увазі цілий пласт наукових напрямків  і питань вилучення та формування «знань».
Різнорідність інформації циркулюючої в мережевоцентричній  ІКС, подієво-командний (вербально-семантичний) характер багатьох даних породжує нагальну потребу в досить широкому наборі специфічних алгоритмів обробки інформації та прийняття рішення. Мережевоцентричні ІКС, одні з найактивніших «споживачів» методів побудови логіко-імовірнісних моделей складних об'єктів і / або явищ в важкоформалізованих областях людської діяльності. Досить затребувані методи кількісного аналізу разнотипової емпіричної і феноменологічної інформації, яка може бути представлена як багатовимірними таблицями, багатовимірними часовими рядами і полями, так і набором імовірнісних експертних висловлювань про об'єкт дослідження. Причому методи обробки даних і прийняття рішення повинні породжувати стійкі і спроможні оцінки при слабких припущеннях про клас розподілів, малих обсягах вибірки (в тому числі з перекрученими і / або відсутніми даними). І головне - вони повинні представляти результати вирішення мовою, близькою до природної мови логічних суджень.
Проблематика гетерогенності технічних платформ (в тому числі затрат на введення-виведення, зберігання, передачу та обробку даних) вирішується в даний час досить успішно. Проводиться стандартизація, уніфікація та комплексне впровадження новітніх інформаційних і телекомунікаційних технологій в усі елементи і вузли як самої ІКС, так і її кінцевих агентів - кінцевих джерел і споживачів інформації.  
Відзначимо, що в світлі розгортання елементів мережевоцентричних  інформаційно-керуючих систем спеціального призначення зазначається певна зміна пріоритетів. Замість обговорення ізольованих тактико-технічних характеристик і економічних показників окремих функціональних інформаційних, управляючих і вимірювальних систем, їх потенційні споживачі все частіше оперують інтегральним критерієм «ефективність цільового застосування». І, як наслідок, їх в першу чергу цікавить те, як змінюється (поліпшується) цільова ефективність застосування різних сил і засобів, при інтеграції з тією, чи іншою функціональною інформаційною (керуючою, вимірювально) системою, яку вони збираються купувати.
  Одна з домінуючих коректних точок зору базується на твердженні: в основі мережевоцентричної парадигми лежить синергія! Позначимо доказ цього висловлювання.
Як відомо, в узагальненому вигляді, система управління, в кібернетичному аспекті, складається з наступних функціональних блоків: джерело інформації (датчик); блок керування; виконавчі органи. Природно, що об'єкт управління і зовнішнє середовище наявні за замовчуванням.   Тому розглянемо тільки синергічний аспект перших трьох складових мережевоцентричної системи управління.
Джерело інформації (датчики, інформаційні агенти). В силу масштабності системи і її нестаціонарності, сенсорна решітка в загальному вигляді не є нормалізованим джерелом інформації. Під нормальністю тут розуміється оптимальний рівень повноти та достовірності одержуваних даних. З іншого боку, глобальність породжує потенційно високий рівень інформаційної повноти і некорельованості вихідних даних, що створює передумови для прояву синергетичного ефекту - можливості відновлення пропущеної або спотвореної інформації.
Блок управління (особа, яка приймає рішення, експертна рада). У мережевоцентричній системі управління, цей модуль має спеціальну, багатошарову структуру. Мінімальна конфігурація - 3 шари. Перший шар, звернений до сенсорної решітці, складається з осіб, що приймають рішення, що спеціалізуються в конкретних областях і питаннях. Вони готують інформацію і формують проміжні рішення для другого шару - відповідального за тактичні і стратегічні рішення в загальному. Третій шар на основі цих директив формує оперативне управління, яке надходить на виконавчі органи. Природно, що кожен з шарів управління має доступ як до інформаційної решітки, так і до кінцевих агентів. Подібна конфігурація дозволяє приймати інтегральне самоузгоджене рішення, яке знову ж має високий синергічний потенціал в силу своєї близькості до оптимуму. Необхідно відзначити, що реальні структури керуючого блоку дещо відрізняються від наведеного тут ідеалізованого випадку. Виконавчі органи (кінцеві агенти). Їх головний девіз: «Координація в часі і в просторі, розподіл цілей і завдань». Саме цей аспект часто залишається поза увагою фахівців, які намагаються дати відповідь на питання: «що є мережевоцентричне  управління?». Дійсно,  мережевоцентрична інформаційно-керуюча система реалізується через формування єдиного координатно-часового поля і прив'язку до нього всіх елементів системи, інформаційних агентів, подій, і власне даних. Тобто формування управління, планування і виконання мережевоцентричних  операцій йде в єдиному просторі станів. Отже, синергія проявляється не тільки через агрегацію інформації, а й через побудову єдиного інформаційно-керуючого поля, що дозволяє синтезувати керуючі команди для всієї множини виконавчих органів (кінцевих агентів) скоординовано в часі і в просторі, оптимально розподіляючи між ними цілі і завдання. При цьому кожне з елементарних управлінь саме по собі не здатне привести до досягнення мети управління (цілі мережевоцентричної операції). При цьому цілком можливо зробити дію того чи іншого кінцевого агента (виконавчого органу), на початковій стадії операції, важкостережним і / або практично непередбачуваним. Подібне управління володіє двома важливими властивостями: скритністю і раптовістю. Це знову ж таки синергічний ефект: зосереджені завдання вирішуються, як правило, силами і засобами, розподіленими в просторі і часі.
У підсумку, вся ця сукупність властивостей породжує емерджентність мережевоцентричниої системи управління, яка і обумовлює її ефективність і продуктивність при вирішенні ряду завдань.
 Мережевоцентричність - принцип організації систем управління, що дозволяє реалізувати режим ситуаційної обізнаності завдяки формуванню і підтриманню єдиної для всіх ярусів управління цілісної контекстної інформаційного середовища
Основою розподіленого управління є мережевоцентричне управління, наведене на рис.20.1.  Рис.20.1 можна розглядати як модифікацію матричного управління, в якому рівні матриці замкнуті в концентричні кола.
  Рівнів управління може бути багато від 1 до n. По концентричних рівнях функціонують  або регулюють потоки від ГП1 до ГПn. Система управління на рис.20.1 є гетерогенною. Гетерогенність проявляється на відміну повноважень, у відмінності змісту управління і технічних відмінностях. Крім того, об'єкти управління також можуть відрізнятися. Все це накладає додаткові вимоги до узгодження управлінських і звітних потоків. Всі рівні від 1 до n-1є керуючими. Рівень n є операційним. Істотна відмінність даної схеми від ієрархічної та матричної схеми проявляється в наявністі на нижньому операційному рівні управління додаткових зв'язків між об'єктами управління. Елементи нижнього рівня також пов'язані, як і елементи верхніх рівнів. Це дозволяє здійснювати передачу ресурсів на разі такої необхідності від об'єкта, у якого є надлишкові ресурси, до об'єкта, у якого не вистачає ресурсів. Таким чином, гетерогенність операційного рівня проявляється в розподіленому управлінні ресурсами. Гетерогенність верхніх рівнів управління проявляється в застосуванні гармонізуючих інформаційних потоків, які в різній мірі впливають на спадні або висхідні інформаційні потоки. Цим суттєво розвантажується інформаційна логістика  і істотно підвищується оперативність управління. Такі прості, на перший погляд, схеми управління істотно ускладнюють функціонування таких систем. Адаптивне розподілене управління вимагає виконання умови структурної зміни і можливості структурної перебудови. Цим розподілене управління істотно відрізняється від експлуатації мережевих систем, в яких структура мережі незмінна і змінюються тільки потоки, їх напрямок і їх інтенсивність. Розподілене управління з цієї причини вимагає використання в якості допоміжної технології відносно нову технологію - структурний менеджмент.
 
 


Рис.20.1. Структура субсидіарного розподіленого управління.
 
  Розподілене управління істотно збільшує число об'єктів управління в порівнянні з матричної схемою і тим більше в порівнянні з ієрархічною схемою. Це обумовлено скороченням часу прийняття рішень  і введенням адаптивної декомпозиції управлінських завдань замість фіксованої декомпозиції. Фіксована декомпозиція характеризується завданням структури управління  і завданням числа і структури завдань. Однак з плином часу при зростанні складності завдань такі структури можуть виявитися неефективними.
Наприклад, якщо одне велике завдання розділене на множину незалежних підзадач, то може виявитися, що їх кількість більше, ніж число доступних керуючих вузлів і це знижує ефективність управління. Протилежна інформаційна ситуація виникає при декомпозиції задачі на підзадачі, яких менше, ніж число керуючих вузлів. В цьому випадку ефективність розподіленої системи також падає. З цього випливає необхідність узгодження розбиття задач і фізичних вузлів в аспекті інформаційного відповідності за структурою і за інтенсивністю інформаційних потоків .
У той же час розподілене управління істотно збільшує кількість об'єктів управління і на порядки знижує вимоги до кількості ресурсів. Ідеологічно розподілені системи управління тісно пов'язані з мережевими. Однак мережеві орієнтовані на комунікацію, а розподілені системи управління на управління.
В аспекті взаємодії з користувачем близькими до розподілених систем управління є розподілені бази даних (РБД). Вони мають схожість в аспекті структури та інформаційної взаємодії. Фізично РБД  являє собою набір вузлів, пов'язаних між собою комунікаційною мережею, в якій кожен вузол має свої власні незалежні від інших вузлів ресурси і своїх локальних користувачів. Будь-який з вузлів здатний незалежно обробляти запити, однак для такої системи характерна однорідність або тенденція до однорідності.
Технологічно РБД можна розглядати як спосіб спільної роботи окремих локальних вузлів (БД), розташованих в мережі. Акцент інформаційної взаємодії в такій розподіленої системі направлений з периферії в центр. Вузли в такій інформаційній системі намагаються зробити однорідними з програмного забезпечення і за форматами даних.
Розподілена система управління може бути розглянута також як спосіб спільної роботи окремих локальних вузлів, розташованих в мережі. Акцент інформаційної взаємодії в такій розподіленої системі спрямований з центру на периферію.  
В реалізації прикладних функцій мережевоцентричного управління набувають широкого розвитку розробки технології штучних агентів, створення багато- мультиагентних систем (МАС) і віртуальних організацій, що  є однією з найбільш важливих і перспективних областей розвитку нових інформаційних і комунікаційних технологій, де сьогодні відбувається інтеграція сучасних мережевих WWW-технологій, методів і засобів штучного інтелекту,  включаючи великі бази даних / знань, багатокомпонентні вирішувачі, і системи об'єктно-орієнтованого проектування. У фахівців  з інформаційних технологій сформувалося і увійшло в широкий науковий обіг уявлення про штучні агенти як активних, автономних, комунікабельних, а головне, мотивованих, об'єктів, які «живуть» і «діють» в складних, динамічних і, найчастіше віртуальних, середовищах. Уже сьогодні агентно-орієнтований підхід знаходить широке застосування в таких областях як розподілене рішення складних задач (і ефективне рішення розподілених задач), поєднане проектування виробів, реінжиніринг бізнесу і побудова віртуальних підприємств, імітаційне моделювання інтегрованих виробничих систем і електронна торгівля, організація роботи колективів роботів і розподілена (сполучена) розробка комп'ютерних програм. У найближчому майбутньому він, безсумнівно, займе, центральне місце при розвитку засобів управління інформацією і знаннями, і звичайно, при створенні та впровадженні новітніх систем телекомунікації, розвитку глобальних комп'ютерних мереж, особливо, мережі Інтернет.
На сьогодні багатоагентні системи є одним з найважливіших напрямків досліджень та розробок в області інформаційних технологій та штучного інтелекту. Багатоагентна система складається з декількох взаємодіючих програмних компонентів – агентів, які здатні співпрацювати між собою для вирішення проблем, які не залежать від можливостей будь-якого окремого агента.  
В основу теорії і практики систем штучного інтелекту в першу чергу полягають поняття формальних систем, заснованих на класичній логіці, традиційних методах інженерії знань. На сьогоднішній день розвиваються нові підходи: нечітка логіка, нейромережеві моделі, генетичні алгоритми, багатоагентні (мультиагентні) системи і штучні організації . Особливий інтерес викликають мультиагентні системи (МАС), принцип роботи яких заснований на спільній дії і співробітництві, узгодженні індивідуальних інтересів, вирішенні своєї частки завдання.   В основі МАС знаходиться поняття інтелектуального чи програмного агента. Воно розглядається в широкому і вузькому сенсі. Зокрема в більш філософському сенсі можна навести визначення П.Маєс: «автономні агенти - це комп'ютерні системи, що функціонують у складному, динамічному середовищі, які здатні відчувати і автономно впливати на це середовище і, таким чином, виконувати певні завдання, для яких вони призначені». У вузькому сенсі агенти сприймаються як обчислювальні підсистеми, які здатні підтримувати локальні стани, взаємодіяти з іншими агентами і виконувати дії в певних умовах середовища. Поняття агента є розширенням поняття об'єкта в програмуванні. Однак на відміну від об'єкта, агент традиційно  володіє автономністю – можливістю самостійно вирішувати завдання, соціальністю - здатністю обмінюватися повідомленнями з іншими агентами, реактивністю - здатністю сприймати і реагувати на стан середовища, внутрішньою активністю - можливістю проявляти ініціативу в досягненні власних цілей. МАС будуються на принципах обмеженого раціоналізму: агенти володіють неповними і нечіткими знаннями в певній області компетентності; всі агенти прагнуть досягати своєї цілі, при цьому вони змушені об'єднуватися з іншими агентами і допомагати їм у вирішенні їхніх завдань; ресурси системи розподілені; обчислення в системі проводяться асинхронно. За структурою МАС повинні включати: множину організаційних одиниць - агентів, множину завдань, середовище для життя агентів, перелік їх можливих відношень, множину дій. Особливе місце в теорії МАС займає організація процесів взаємодії. До базових типів належать: координований, простий, непродуктивний, байдуже співробітництво, колективне та індивідуальне суперництво. Взаємодія агентів проводиться у формі переговорів за певними протоколами. Незважаючи на те, що технологія мультиагентних систем розвивається вже близько сорока років, слід зазначити, що теорія і практика цієї галузі знаходяться на стадії становлення і привертають інтереси найкращих науковців сучасності. 
Рішення завдання одним агентом на основі інженерії знань являє собою точку зору класичного штучного інтелекту (ШІ), згідно з якою агент (наприклад, інтелектуальна система), володіючи глобальним баченням проблеми, має всі необхідні здібності, знання і ресурси для її вирішення. Навпаки, в розподіленому штучному інтелекті (РШІ) і, взагалі, в області МАС передбачається, що окремий агент може мати лише часткове уявлення про загальне завдання і здатний вирішити лише деяку його підзадачу. Тому для вирішення скільки-небудь складної проблеми, як правило, потрібна взаємодія агентів, яка невіддільне від організації МАС. Цей соціальний аспект вирішення завдань - одна з фундаментальних характеристик концептуальної новизни передових комп'ютерних технологій і штучних (віртуальних) організацій, що будуються як МАС. Які основні причини, що зумовлюють особливу актуальність  МАС в наші дні? 
В першу чергу, це складність сучасних систем і організацій, яка досягає такого рівня, що централізоване управління в них стає неефективним через наявність величезних потоків інформації, коли занадто багато часу витрачається на її передачу в центр і прийняття ним рішень. Тому зараз відбувається справжня революція в області організаційного управління (стратегічного менеджменту), пов'язана з корінною перебудовою традиційних організацій і  підприємств та появою мережевих організаційних структур нового типу, наприклад, горизонтальних, розширених і віртуальних підприємств. Самі комп'ютерні системи також стають все складніше і складніше і включають ряд підсистем різної природи, що володіють різними функціональними характеристиками і взаємодіють з різними фахівцями, віддаленими один від одного. Крім того, з ростом складності падає надійність систем, і все важче сформулювати їх адекватну цільову функцію.
По-друге, самі  завдання або  системи часом неоднорідні і розподілені: а) в просторі (наприклад, транспортна мережа або система космічного зв'язку); б) в функціональному плані, оскільки жодна людина не може створити сучасну складну систему поодинці. Важко уявити собі єдиний проект розвитку транспортної або комп'ютерної мережі. Очевидно, що у подібних систем немає єдиної мети і єдиного розробника: вони виникли і розвиваються в ході технічної еволюції (а системи, що виникли еволюційним шляхом, не пов'язані з централізованим управлінням).
По-третє, поняття відкритої системи означає, що у неї є розвинені можливості і засоби адаптації до змін середовища, в тому числі шляхом модифікації своєї структури і параметрів. Наприклад, в разі відкритої програмної системи, модифікація та розширення програмного забезпечення можливі прямо в ході його функціонування. Еволюція програмного забезпечення відбувається в бік його розробки на основі автономних, індивідуалізованих, взаємодіючих модулів. З іншого боку, в останні роки можливості еволюційного проектування починають всерйоз братися до уваги і при створенні апаратних засобів ЕОМ.
   	 По-четверте, саме поширення різних мереж породжує розподілений погляд на світ. Розвиток мобільних комп'ютерних засобів, коли вся інформація і ресурси її обробки розподілені по різних вузлів мережі (наприклад, мережа Інтернет вже налічує кілька десятків тисяч вузлів у всьому світі), вимагає перегляду класичних моделей обчислень, заснованих на зосередженій, послідовній машині фон Неймана, і прийняття нових концепцій обчислювального простору, наприклад, концепції «гігантської павутини», як у випадку з World Wide Web або «обчислювального поля» (computing field)  по аналогії з фізичними полями. 
Все це пояснює бурхливий розвиток нового стратегічного напрямку в інформатиці і ШІ: теорії, методів, і програмно-апаратних засобів побудови розподілених систем і мережевих організацій, включаючи МАС, інтелектуальні мережі, віртуальні спільноти.  
При визначенні поняття «агент» зручно спиратися на уявлення про об'єкт, розвиненому школою об'єктно-орієнтованого програмування (ООП) .Тоді штучний агент може розумітися як метаоб'єкт, наділений певною часткою суб'єктності, тобто здатний маніпулювати іншими об'єктами, створювати і знищувати їх, а також має розвинуті засоби взаємодії з середовищем і собі подібними. Іншими словами, це «активний об'єкт» або «штучний діяч», що знаходиться на помітно більш високому рівні складності по відношенню до традиційних об'єктів в ООП і використовує їх для досягнення своїх цілей шляхом управління, що змінює їх стани. Відповідно мінімальний набір базових характеристик довільного агента включає такі властивості як: а) активність, здатність до організації і реалізації дій; б) автономність (напівавтономність), відносна незалежність від навколишнього середовища або наявність деякої «свободи волі», пов'язане з хорошим ресурсним забезпеченням його поведінки; в) товариство, що випливає з необхідності вирішувати свої завдання спільно з іншими агентами і забезпечується розвиненими протоколами комунікації; г) цілеспрямованість, яка передбачає наявність власних джерел мотивації, а в більш широкому плані, спеціальних інтенціональних характеристик. Таке уявлення близько до одного з найбільш популярних визначень поняття «агент» у М.Вулдріджа і Н.Дженнінгса. Вони вважають, що агент - це програмно або апаратно реалізована система, що володіє наступними властивостями:
• автономність - здатність функціонувати без прямого втручання людей або комп'ютерних засобів і при цьому здійснювати самоконтроль над своїми діями і внутрішніми станами;
• суспільна поведінка (social ability), тобто здатність до взаємодії з іншими агентами (а можливо, людьми), обмінюючись повідомленнями за допомогою мов комунікації;
• реактивність - здатність сприймати стан середовища (фізичного світу, користувача - через призначений для користувача інтерфейс, сукупності інших агентів, мережі Internet, або відразу всі цих компонентів зовнішнього середовища);
• цілеспрямована активність (pro-activity) - здатність агентів не просто реагувати на стимули, що надходять з середовища, а й здійснювати цілеспрямовану поведінку, проявляючи ініціативу.
Відповідно, якщо розглянути систему абстрактних полярних шкал типу «пасивний-активний», «реактивний-цілеспрямований», «залежний-автономний» і помістити на них об'єкти і агенти, то інтуїтивно зрозуміло, що об'єкти будуть знаходиться на лівих полюсах, а агенти повинні бути розташовані правіше, ближче до полюсів «активний», «цілеспрямований», «автономний». Зсунуте до правих полюсів проміжне положення агентів на зазначених шкалах показує досягнутий рівень суб'єктності в штучній системі.
 	Таким чином, агентно-орієнтований підхід в інформатиці і ШІ є розвиток відомих підходів, заснованих на поняттях об'єктів і акторів, але в той же час має ряд принципових відмінностей. Поняття об'єкт і актор є одиниці програмних систем, що задаються деякою структурою і механізмом взаємодії. Об'єкт (як реалізація фрейма за М.Мінским) має єдине ім'я і свої власні дані і процедури. Об'єкт може складатися з декількох так само певних об'єктів і в свою чергу бути частиною більш великого об'єкта. Об'єкти містять слоти, які в свою чергу можуть складатися з фактів. Слот може бути просто атрибутом або відношенням. Всі дії в ООП виконуються через повідомлення (проте повідомлення вказують об'єкту, що робити, але не як робити). В цілому, поняття об'єкта визначається за допомогою 4 ознак: а) інкапсуляція; б) відношення «клас-приклад»; в) властивість наслідування; г) проходження повідомлень, що допускає визначення поліморфних процедур, тобто процедур, код яких може відрізнятися в залежності від приймача повідомлення. Об'єкти не можуть аналізувати свою поведінку, визначати характер своїх зв'язків з іншими об'єктами або природу адресованих їм повідомлень. Іх механізм отримання повідомлень зводиться до виклику процедури. А головне,  вони не можуть самостійно формувати цілі.
Точно так само і актори  - розвинені, інтерактивні, паралельно функціонуючі об'єкти, які взаємодіють шляхом посилки асинхронних повідомлень, не можуть проводити міркування про зміст цих повідомлень. Сама модель акторів організована, виходячи з двох простих принципів: посилки повідомлень і локальної обробки. На локальному рівні актор містить три складові: а) знання про своє середовище; б) знання про інших акторів; в) множина даних і дій. Ці складові визначають його локальну поведінку в залежності від  повідомлення. Коли актор отримує деяке повідомлення, він може передавати його іншим акторам. Крім цього, актор здатний створювати нових акторів і змінювати свій внутрішній стан. Це означає, що в ряді випадків актори можуть розглядатися як свого роду підагенти.
Наявність у агента механізму цілеутворення забезпечує принципово новий рівень автономії. Це означає, що він необов'язково виконує розпорядження будь-якого іншого агента або користувача, а просто залежить від умов середовища, включаючи цілі та наміри інших агентів. На відміну від об'єкта агент може прийняти на себе певні зобов'язання або, навпаки, відмовитися від виконання деякої роботи, мотивуючи це відсутністю компетентності, зайнятістю іншим завданням тощо. У той же час агент може виконувати такі дії як породження, придушення і заміна інших агентів, активізація функцій (як своїх, так і у інших агентів), активізація сценарію діяльності, запам'ятовування поточного стану інших агентів та ін.
В одному з найбільш капітальних сучасних підручників з ШІ, виданому С.Расселом і П.Норвігом, під агентом розуміється «будь-яка сутність, яка знаходиться в деякому середовищі, сприймає її за допомогою сенсорів, отримуючи дані, які відображають події, що відбуваються в середовищі, інтерпретує ці дані і діє на середовище за допомогою ефекторів». Таким чином, тут вичленяються чотири вихідних агентоутворюючих фактора - середовище, сприйняття, інтерпретація, дія.
 	 У близькому за змістом визначенні Б.Хейес-Рот підкреслюється, що інтелектуальні агенти безперервно виконують три наступні функції: 1) сприйняття динаміки середовища; 2) дії, що змінюють середовище; 3) міркування з метою інтерпретації спостережуваних явищ, вирішення завдань, виведення висновків і визначення дій. Іншими словами, спеціально обмовляється динамічність середовища і підпорядкованість міркування дії: агенти міркують для того, щоб вибрати дії.
Згідно П.Маес, «автономні агенти - це комп'ютерні системи, що функціонують в складній, динамічної середовищі, здатні відчувати і автономно діяти на цю середовище і, таким чином, виконувати множину завдань, для яких вони призначені». Тут запропоновані два обмеження на середовище агентів - «складна і динамічна».
 	Отже, ключовими характеристиками будь-яких агентів як «штучних діячів» є автономність і цілеспрямованість. Йдеться про автономне виконанні деяких дій на основі цілеспрямованих проблемно-орієнтованих міркувань. Часом в якості головних ознак агента беруться інтелектуальність і автономність, де інтелектуальність зв'язується зі сприйняттям і міркуваннями, а автономність - з прийняттям рішень і дією на середовище. 
Досить сильне визначення інтелектуального агента дали К.Сікара і співавтори . Тут виділені наступні характеристики:
• здатність вирішення завдань, поставлених людьми або іншими комп'ютерними агентами;
• активність, тобто здатність ініціювати рішення задачі і пропонувати свої послуги користувачеві;
• мережеве «середовище проживання» і здатність самоорганізації в ньому;
• напівавтономність (у користувача є можливість управляти рівнем автономності агента);
• антиципація, тобто здатність передбачати запити користувача;
• надійність;
• здатність співпрацювати з людьми або іншими комп'ютерними агентами в інтересах вирішення завдання;
• гнучкість, що виявляється в здатності працювати з неоднорідними агентами і віддаленими інформаційними ресурсами;
• адаптивність, здатність оперативно пристосовуватися до зміни потреб користувача і факторів середовища;
• наполегливість у вирішенні завдання.
 	Можна дати наступне загальне визначення інтелектуального агента.
Під інтелектуальними агентами в інформатиці і ШІ розуміються будь-які фізичні або віртуальні одиниці:
а) здатні діяти на об'єкти в деякому середовищі, на інших агентів, а також на самих себе (дія);
б) здатні спілкуватися з іншими агентами (спілкування);
в) які виходять із деяких потреб і здатні до цілеутворення (потребністно-цільова основа); володіють набором інтенціональних характеристик (переконання, бажання, наміри та ін.);
г) які мають певні обов'язки, які можуть надати ряд послуг (наявність зобов'язань);
д) володіють власними ресурсами, що забезпечують їх автономію (автономія);
е) здатні до сприйняття середовища (сприйняття з обмеженим дозволом);
ж) здатні будувати часткове уявлення цього середовища на основі його сприйняття, тобто наявність перцептивних навичок і умінь (локальне уявлення середовища);
з) здатні до навчання, еволюції та адаптації (еволюційний і адаптаційний потенціал);
і) здатні до самоорганізації і самовідтворення (самозбереження).
 Можна запропонувати чимало різних підстав для побудови класифікацій агентів. Найбільш очевидними є критерії класифікації, пов'язані з полярними шкалами «природне-штучне» і «матеріальне-ідеальне». За першим критерієм, виділяються натуральні агенти (тварини, люди, групи організмів, колективи людей) і штучні агенти (роботи, колективи автоматів, складні комп'ютерні програми).  За другим критерієм, все штучні агенти поділяються на: 1) матеріальних, фізично існуючих і працюючих в реальному просторі, наприклад, інтегральні роботи) і 2) віртуальних, існуючих лише в програмному середовищі (віртуальному просторі); нерідко такі «програмні роботи» (software robots) називають скорочено софтботамі (softbots)  
 	 Класифікацію агентів можна побудувати за такими двома ознаками: а) ступінь розвитку внутрішнього уявлення зовнішнього світу і б) спосіб поведінки.
   	 За першою ознакою, виділяються інтелектуальні (когнітивні, розумові) і реактивні агенти. Когнітивні агенти  мають багатший арсенал подання зовнішнього середовища, ніж реактивні. Це досягається за рахунок наявності у них бази знань і механізму вирішення.  Близький термін «розумовий (deliberative) агент» служить для позначення агента, який володіє символьною моделлю зовнішнього світу, а також можливістю приймати рішення на основі символьних міркувань, наприклад, методу порівняння за зразком. Звідси випливає ще одна істотна відмінність між інтелектуальними і реактивними агентами, пов'язана з можливостями прогнозування змін зовнішнього середовища і, як наслідок, свого майбутнього. Реактивні агенти, мають досить бідне внутрішнє уявлення зовнішнього середовища (або не мають його зовсім), мають дуже обмежений діапазонм передбачення. Вони практично не здатні планувати свої дії, оскільки реактивність в чистому вигляді означає таку структуру зворотного зв'язку, яка не містить механізмів прогнозу. У той же час когнітивні агенти, завдяки розвиненим внутрішнім уявленням зовнішнього середовища і можливостям міркувань, можуть запам'ятовувати і аналізувати різні ситуації, передбачати можливі реакції на свої дії, робити з цього висновки, корисні для подальших дій і, в результаті, планувати свою поведінку. Саме інтелектуальні здібності дозволяють таким агентам будувати віртуальні світи, працюючи в яких вони формують плани дій. Когнітивні агенти мають яскравіше виражену індивідуальність, будучи набагато більш автономними, ніж реактивні, і характеризуються розвиненою доцільною поведінкою в співтоваристві агентів, досить незалежною від інших агентів. З іншого боку, реактивні агенти, як це видно з самого їх назви, працюють в основному на рівні стимульно-реактивних зв'язків, володіючи дуже бідної індивідуальністю і сильною залежністю від зовнішнього середовища (спільноти агентів).  Отже, когнітивні агенти, завдяки їх складності, наявності знань і здібностей до міркувань про свою поведінку і зовнішнє середовище можуть бути більш автономними і працювати  незалежно, демонструючи досить гнучку поведінку. Але та ж складність автономних агентів, що виливається в здатність опиратися зовнішнім впливам, викликає певні труднощі при організації їх ефективної взаємодії. Тому в складі МАС, побудованої з інтелектуальних агентів, як правило, присутні не більше 7 + 2 автономних одиниць (магічне число Міллера). Навпаки, досить проста структура реактивних агентів, обумовлює їх жорстку залежність від середовища. Отже, їх можливості порівняно невеликі, коли вони функціонують  поодинці і обмежені своїми власними ресурсами. Однак їм легше утворити групу або організацію, здатну гнучко адаптуватися до змін середовища під дією механізму природного відбору. Тому реактивні агенти представляють інтерес не на індивідуальному, а на колективному рівні, причому їх здатності до адаптації і розвитку виникають в результаті локальних взаємодій. Таким чином, реактивні агенти, які майже не мають індивідуальності, розчиняються в загальній масі, але за рахунок свого великого числа і надмірності вони можуть вирішувати складні завдання. Відповідні МАС можуть формуватися в результаті взаємодій без точного визначення окремих агентів. Подібні «хмари» (swarms), що складаються з великої кількості реактивних агентів, можна порівняти з якимсь надорганізмом, взаємна адаптація і кооперація клітин якого дозволяє створити загальний ланцюг зворотного зв'язку, що забезпечує гомеостаз всієї системи.
 	Будь-яка МАС складається з наступних основних компонентів:
1) множина організаційних одиниць, в якому виділяються підмножина агентів;
2) множина  завдань;
3) середовище, тобто деякий простір, в якому існують агенти і об'єкти;
4) множина  відносин між агентами;
4) множина дій агентів (наприклад, операцій над об'єктами).
В МАС завдання розподілені між агентами, кожен з яких розглядається як член групи або організації. Розподіл завдань передбачає призначення ролей кожному з членів групи, визначення міри його відповідальності і вимог до досвіду.
Ролі характеризують функції агентів незалежно від їх внутрішньої структури. За рольового ознакою можна виокремити такі основні види агентів в МАС:
1. Агент-замовник, що розсилають заявки на виконання деякого завдання іншим агентам.
2. Агент-координатор (посередник), який приймає замовлення і розподіляє їх між іншими (компетентними) агентами.
3. Агент-виконавець
4. Агент-субординатор (супервізор), який організовує і контролює роботу вищевказаних трьох агентів і наділений правом екстреного втручання і перерозподілу ресурсів в критичних (позаштатних) ситуаціях.
Ці ролі відповідають мінімальному набору функцій, необхідних для функціонування організації як цілеспрямованої системи, тобто досягнення цілей в умовах адаптації до змін середовища. Ролі не обов'язково є жорстко фіксованими і можуть змінюватися з розвитком організації.  
Загальна методика висхідного проектування МАС включає наступні етапи.
1) Формулювання призначення (цілі розробки) МАС.
2) Визначення типу і основних властивостей середовища МАС.
3) Визначення основних і допоміжних функцій агентів в МАС.
4) Уточнення складу агентів і розподіл функцій між агентами. Вибір архітектур агентів.
5) Виділення базових взаємозв'язків (відносин) між агентами в МАС.
6) Визначення можливих дій (операцій) агентів.
7) Побудова базової архітектури (функціонально-структурної одиниці) МАС, аналіз її можливих станів (нормальні, вироджені, критичні та ін.).
8) Аналіз реальних поточних або передбачуваних змін зовнішнього середовища (умов функціонування) або внутрішніх протиріч МАС.
9) Визначення відповідних змін функцій агентів і формулювання стратегії еволюції МАС
10) Побудова загальної архітектури МАС, інваріантної до розглянутої області змін середовища (або самовідтворення функціонально-структурної одиниці МАС).
Контрольні питання
 1. Охарактеризуйте мережевоцентричну парадигму в реалізації сучасних інформаційно-керуючих систем.
 2.  Дайте визначення мережевоцентричної системи управління.
 3. Назвіть основні особливості МАС.
 4. Які основні причини, що зумовлюють особливу актуальність  МАС в наші дні? 
 5.  Дайте визначення агента в МАС.
 6.  Наведіть основні компоненти МАС.

Література
1.	Злобин В.К.    Нейросети и нейрокомпьютеры:  учебное пособие для студентов высших учебных заведений по направлению "Информатика и вычислительная техника" / В. К. Злобин, В. Н. Ручкин. - Санкт-Петербург : БХВ-Петербург, 2011. – 252 с.
2.	Литвин В. В. Бази знань інтелектуальних систем підтримки прийняття рішень/ В. В. Литвин . — Львів: Видавництво Львівської політехніки, 2011. —240 с. 
3.	Осипов Г. С.  Лекции по искусственному интеллекту / Г. С. Осипов. – М.:   Либроком, 2012. – 272 с.
4.	Рыбина Г.В. Основы построения интеллектуальных систем:  Учебное пособие / Г.В. Рыбина. – М.: Финансы и статистика, 2009. –  432 c.
5.	Бессмертный И.А. Искусственный интеллект рядов/ И.А.Бессмертный .– СПб: СПбГУ ИТМО, 2010. – 132 с.
6.	6 Евменов В. П. Интеллектуальные системы управления/ В. П. Евменов. . – М.:  Либроком , 2009. – 144 с.
7. Хайкин Саймон. Нейронные сети: полный курс [Текст]:/С. Хайкин. - 2-е издание. : Пер. с англ. – М. : Издательский дом «Вильямс», 2008. – 1104 с.
8.  Ярушкина Н.Г. Основы теории нечетких и гибридных систем/ Н.Г. Ярушкина. – М.: Финансы и статистика, 2009. – 320 с.





7.2 Методичне забезпечення


7.3. Допоміжна
5  Бессмертный И.А. Искусственный интеллект рядов [Текст]/ И.А.Бессмертный .– СПб: СПбГУ ИТМО, 2010. – 132 с.
6 Евменов В. П. Интеллектуальные системы управления [Текст]/ В. П. Евменов. . – М.:  Либроком , 2009. – 144 с.
7.Хайкин Саймон. Нейронные сети: полный курс [Текст]:/С. Хайкин. - 2-е издание. : Пер. с англ. – М. : Издательский дом «Вильямс», 2008. – 1104 с.
8Ярушкина Н.Г. Основы теории нечетких и гибридных систем [Текст]/ Н.Г. Ярушкина. – М.: Финансы и статистика, 2009. – 320 с.

8. Інформаційні ресурси






  

